
Slave_B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000de6  00000e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000e7c  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000029b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c04  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043f  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085e  00000000  00000000  00003b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00004394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  00004674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a48  00000000  00000000  00004a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	38 04       	cpc	r3, r8
  56:	4c 04       	cpc	r4, r12
  58:	60 04       	cpc	r6, r0
  5a:	74 04       	cpc	r7, r4
  5c:	88 04       	cpc	r8, r8
  5e:	9c 04       	cpc	r9, r12
  60:	27 04       	cpc	r2, r7
  62:	27 04       	cpc	r2, r7
  64:	27 04       	cpc	r2, r7
  66:	27 04       	cpc	r2, r7
  68:	27 04       	cpc	r2, r7
  6a:	27 04       	cpc	r2, r7
  6c:	27 04       	cpc	r2, r7
  6e:	27 04       	cpc	r2, r7
  70:	27 04       	cpc	r2, r7
  72:	27 04       	cpc	r2, r7
  74:	b0 04       	cpc	r11, r0
  76:	b5 04       	cpc	r11, r5
  78:	ba 04       	cpc	r11, r10
  7a:	bf 04       	cpc	r11, r15
  7c:	c4 04       	cpc	r12, r4
  7e:	c9 04       	cpc	r12, r9
  80:	27 04       	cpc	r2, r7
  82:	27 04       	cpc	r2, r7
  84:	27 04       	cpc	r2, r7
  86:	27 04       	cpc	r2, r7
  88:	27 04       	cpc	r2, r7
  8a:	27 04       	cpc	r2, r7
  8c:	27 04       	cpc	r2, r7
  8e:	27 04       	cpc	r2, r7
  90:	27 04       	cpc	r2, r7
  92:	27 04       	cpc	r2, r7
  94:	d1 04       	cpc	r13, r1
  96:	d6 04       	cpc	r13, r6
  98:	db 04       	cpc	r13, r11
  9a:	e0 04       	cpc	r14, r0
  9c:	e5 04       	cpc	r14, r5
  9e:	ea 04       	cpc	r14, r10
  a0:	27 04       	cpc	r2, r7
  a2:	27 04       	cpc	r2, r7
  a4:	27 04       	cpc	r2, r7
  a6:	27 04       	cpc	r2, r7
  a8:	27 04       	cpc	r2, r7
  aa:	27 04       	cpc	r2, r7
  ac:	27 04       	cpc	r2, r7
  ae:	27 04       	cpc	r2, r7
  b0:	27 04       	cpc	r2, r7
  b2:	f2 04       	cpc	r15, r2

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e6 ee       	ldi	r30, 0xE6	; 230
  c8:	fd e0       	ldi	r31, 0x0D	; 13
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 36       	cpi	r26, 0x62	; 98
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a2 e6       	ldi	r26, 0x62	; 98
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 36       	cpi	r26, 0x65	; 101
  e2:	b1 07       	cpc	r27, r17
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 01 04 	call	0x802	; 0x802 <main>
  ea:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_vInit>:
#include "MACROS.h"
#include <avr/io.h>

void ADC_vInit(void)	//by default bysht8l 3la pin 0 port A ela law 8ayrtha mn ADMUX
{
	SET_BIT(ADMUX,REFS0);		//Vref howa el volt el da5l 3ala pin Avcc bas lazm a7ot capacitor ma3 pin AREF
  f2:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);		//2.56
  f4:	3f 9a       	sbi	0x07, 7	; 7
	
	SET_BIT(ADCSRA,ADEN);		//ENABLE ADC
  f6:	37 9a       	sbi	0x06, 7	; 6
	
	SET_BIT(ADCSRA,ADPS2);		//DIVISION FACTOR IS 64
  f8:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  fa:	31 9a       	sbi	0x06, 1	; 6
}
  fc:	08 95       	ret

000000fe <ADC_u16Read>:

unsigned short ADC_u16Read(void)
{
	unsigned short return_value;
	SET_BIT(ADCSRA,ADSC);
  fe:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);		//loop yfdl mkano tol ma el ADSC=1 hya msh htrg3 0 8er lma el conversion ttem 5als
 100:	36 99       	sbic	0x06, 6	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF);					//clear el interrupt flag 
 104:	34 9a       	sbi	0x06, 4	; 6
	
	return_value=ADCL;
 106:	84 b1       	in	r24, 0x04	; 4
 108:	90 e0       	ldi	r25, 0x00	; 0
	return_value|=(ADCH<<8);
 10a:	45 b1       	in	r20, 0x05	; 5
 10c:	34 2f       	mov	r19, r20
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	82 2b       	or	r24, r18
 112:	93 2b       	or	r25, r19
	
	return return_value;
 114:	08 95       	ret

00000116 <DIO_set_PINDir>:
#include "DIO_driver.h"
#include "MACROS.h"

void DIO_set_PINDir(unsigned char portname,unsigned char pinnumber,unsigned char Direction) //EX: ('A',0,1)
{
	switch(portname)
 116:	84 34       	cpi	r24, 0x44	; 68
 118:	09 f4       	brne	.+2      	; 0x11c <DIO_set_PINDir+0x6>
 11a:	71 c0       	rjmp	.+226    	; 0x1fe <DIO_set_PINDir+0xe8>
 11c:	85 34       	cpi	r24, 0x45	; 69
 11e:	48 f4       	brcc	.+18     	; 0x132 <DIO_set_PINDir+0x1c>
 120:	82 34       	cpi	r24, 0x42	; 66
 122:	99 f1       	breq	.+102    	; 0x18a <DIO_set_PINDir+0x74>
 124:	83 34       	cpi	r24, 0x43	; 67
 126:	08 f0       	brcs	.+2      	; 0x12a <DIO_set_PINDir+0x14>
 128:	4d c0       	rjmp	.+154    	; 0x1c4 <DIO_set_PINDir+0xae>
 12a:	81 34       	cpi	r24, 0x41	; 65
 12c:	09 f0       	breq	.+2      	; 0x130 <DIO_set_PINDir+0x1a>
 12e:	83 c0       	rjmp	.+262    	; 0x236 <DIO_set_PINDir+0x120>
 130:	0f c0       	rjmp	.+30     	; 0x150 <DIO_set_PINDir+0x3a>
 132:	82 36       	cpi	r24, 0x62	; 98
 134:	51 f1       	breq	.+84     	; 0x18a <DIO_set_PINDir+0x74>
 136:	83 36       	cpi	r24, 0x63	; 99
 138:	20 f4       	brcc	.+8      	; 0x142 <DIO_set_PINDir+0x2c>
 13a:	81 36       	cpi	r24, 0x61	; 97
 13c:	09 f0       	breq	.+2      	; 0x140 <DIO_set_PINDir+0x2a>
 13e:	7b c0       	rjmp	.+246    	; 0x236 <DIO_set_PINDir+0x120>
 140:	07 c0       	rjmp	.+14     	; 0x150 <DIO_set_PINDir+0x3a>
 142:	83 36       	cpi	r24, 0x63	; 99
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_set_PINDir+0x32>
 146:	3e c0       	rjmp	.+124    	; 0x1c4 <DIO_set_PINDir+0xae>
 148:	84 36       	cpi	r24, 0x64	; 100
 14a:	09 f0       	breq	.+2      	; 0x14e <DIO_set_PINDir+0x38>
 14c:	74 c0       	rjmp	.+232    	; 0x236 <DIO_set_PINDir+0x120>
 14e:	57 c0       	rjmp	.+174    	; 0x1fe <DIO_set_PINDir+0xe8>
	{
		case 'A':
		case 'a':
		if(Direction==1)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	69 f4       	brne	.+26     	; 0x16e <DIO_set_PINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_set_PINDir+0x4c>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_set_PINDir+0x48>
 166:	ba 01       	movw	r22, r20
 168:	62 2b       	or	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26
 16c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,pinnumber);
 16e:	2a b3       	in	r18, 0x1a	; 26
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac 01       	movw	r20, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_set_PINDir+0x66>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_set_PINDir+0x62>
 180:	ba 01       	movw	r22, r20
 182:	60 95       	com	r22
 184:	62 23       	and	r22, r18
 186:	6a bb       	out	0x1a, r22	; 26
 188:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(Direction==1)
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	69 f4       	brne	.+26     	; 0x1a8 <DIO_set_PINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
 18e:	27 b3       	in	r18, 0x17	; 23
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_set_PINDir+0x86>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_set_PINDir+0x82>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 2b       	or	r22, r18
 1a4:	67 bb       	out	0x17, r22	; 23
 1a6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_set_PINDir+0xa0>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_set_PINDir+0x9c>
 1ba:	ba 01       	movw	r22, r20
 1bc:	60 95       	com	r22
 1be:	62 23       	and	r22, r18
 1c0:	67 bb       	out	0x17, r22	; 23
 1c2:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(Direction==1)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	69 f4       	brne	.+26     	; 0x1e2 <DIO_set_PINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
 1c8:	24 b3       	in	r18, 0x14	; 20
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	ac 01       	movw	r20, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_set_PINDir+0xc0>
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_set_PINDir+0xbc>
 1da:	ba 01       	movw	r22, r20
 1dc:	62 2b       	or	r22, r18
 1de:	64 bb       	out	0x14, r22	; 20
 1e0:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 1e2:	24 b3       	in	r18, 0x14	; 20
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_set_PINDir+0xda>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_set_PINDir+0xd6>
 1f4:	ba 01       	movw	r22, r20
 1f6:	60 95       	com	r22
 1f8:	62 23       	and	r22, r18
 1fa:	64 bb       	out	0x14, r22	; 20
 1fc:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(Direction==1)
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	69 f4       	brne	.+26     	; 0x21c <DIO_set_PINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
 202:	21 b3       	in	r18, 0x11	; 17
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	ac 01       	movw	r20, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_set_PINDir+0xfa>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_set_PINDir+0xf6>
 214:	ba 01       	movw	r22, r20
 216:	62 2b       	or	r22, r18
 218:	61 bb       	out	0x11, r22	; 17
 21a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 21c:	21 b3       	in	r18, 0x11	; 17
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_set_PINDir+0x114>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_set_PINDir+0x110>
 22e:	ba 01       	movw	r22, r20
 230:	60 95       	com	r22
 232:	62 23       	and	r22, r18
 234:	61 bb       	out	0x11, r22	; 17
 236:	08 95       	ret

00000238 <DIO_Write>:
	}
}

void DIO_Write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)//EX: ('A',0,1)
{
	switch(portname)
 238:	84 34       	cpi	r24, 0x44	; 68
 23a:	09 f4       	brne	.+2      	; 0x23e <DIO_Write+0x6>
 23c:	71 c0       	rjmp	.+226    	; 0x320 <DIO_Write+0xe8>
 23e:	85 34       	cpi	r24, 0x45	; 69
 240:	48 f4       	brcc	.+18     	; 0x254 <DIO_Write+0x1c>
 242:	82 34       	cpi	r24, 0x42	; 66
 244:	99 f1       	breq	.+102    	; 0x2ac <DIO_Write+0x74>
 246:	83 34       	cpi	r24, 0x43	; 67
 248:	08 f0       	brcs	.+2      	; 0x24c <DIO_Write+0x14>
 24a:	4d c0       	rjmp	.+154    	; 0x2e6 <DIO_Write+0xae>
 24c:	81 34       	cpi	r24, 0x41	; 65
 24e:	09 f0       	breq	.+2      	; 0x252 <DIO_Write+0x1a>
 250:	83 c0       	rjmp	.+262    	; 0x358 <DIO_Write+0x120>
 252:	0f c0       	rjmp	.+30     	; 0x272 <DIO_Write+0x3a>
 254:	82 36       	cpi	r24, 0x62	; 98
 256:	51 f1       	breq	.+84     	; 0x2ac <DIO_Write+0x74>
 258:	83 36       	cpi	r24, 0x63	; 99
 25a:	20 f4       	brcc	.+8      	; 0x264 <DIO_Write+0x2c>
 25c:	81 36       	cpi	r24, 0x61	; 97
 25e:	09 f0       	breq	.+2      	; 0x262 <DIO_Write+0x2a>
 260:	7b c0       	rjmp	.+246    	; 0x358 <DIO_Write+0x120>
 262:	07 c0       	rjmp	.+14     	; 0x272 <DIO_Write+0x3a>
 264:	83 36       	cpi	r24, 0x63	; 99
 266:	09 f4       	brne	.+2      	; 0x26a <DIO_Write+0x32>
 268:	3e c0       	rjmp	.+124    	; 0x2e6 <DIO_Write+0xae>
 26a:	84 36       	cpi	r24, 0x64	; 100
 26c:	09 f0       	breq	.+2      	; 0x270 <DIO_Write+0x38>
 26e:	74 c0       	rjmp	.+232    	; 0x358 <DIO_Write+0x120>
 270:	57 c0       	rjmp	.+174    	; 0x320 <DIO_Write+0xe8>
	{
		case 'A':
		case 'a':
		if(outputvalue==1)
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	69 f4       	brne	.+26     	; 0x290 <DIO_Write+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_Write+0x4c>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_Write+0x48>
 288:	ba 01       	movw	r22, r20
 28a:	62 2b       	or	r22, r18
 28c:	6b bb       	out	0x1b, r22	; 27
 28e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTA,pinnumber);
 290:	2b b3       	in	r18, 0x1b	; 27
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_Write+0x66>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_Write+0x62>
 2a2:	ba 01       	movw	r22, r20
 2a4:	60 95       	com	r22
 2a6:	62 23       	and	r22, r18
 2a8:	6b bb       	out	0x1b, r22	; 27
 2aa:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(outputvalue==1)
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	69 f4       	brne	.+26     	; 0x2ca <DIO_Write+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 2b0:	28 b3       	in	r18, 0x18	; 24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	ac 01       	movw	r20, r24
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_Write+0x86>
 2ba:	44 0f       	add	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_Write+0x82>
 2c2:	ba 01       	movw	r22, r20
 2c4:	62 2b       	or	r22, r18
 2c6:	68 bb       	out	0x18, r22	; 24
 2c8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 2ca:	28 b3       	in	r18, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_Write+0xa0>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_Write+0x9c>
 2dc:	ba 01       	movw	r22, r20
 2de:	60 95       	com	r22
 2e0:	62 23       	and	r22, r18
 2e2:	68 bb       	out	0x18, r22	; 24
 2e4:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(outputvalue==1)
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	69 f4       	brne	.+26     	; 0x304 <DIO_Write+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 2ea:	25 b3       	in	r18, 0x15	; 21
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ac 01       	movw	r20, r24
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_Write+0xc0>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_Write+0xbc>
 2fc:	ba 01       	movw	r22, r20
 2fe:	62 2b       	or	r22, r18
 300:	65 bb       	out	0x15, r22	; 21
 302:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTC,pinnumber);
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	ac 01       	movw	r20, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_Write+0xda>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_Write+0xd6>
 316:	ba 01       	movw	r22, r20
 318:	60 95       	com	r22
 31a:	62 23       	and	r22, r18
 31c:	65 bb       	out	0x15, r22	; 21
 31e:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(outputvalue==1)
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	69 f4       	brne	.+26     	; 0x33e <DIO_Write+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_Write+0xfa>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_Write+0xf6>
 336:	ba 01       	movw	r22, r20
 338:	62 2b       	or	r22, r18
 33a:	62 bb       	out	0x12, r22	; 18
 33c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 33e:	22 b3       	in	r18, 0x12	; 18
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	ac 01       	movw	r20, r24
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_Write+0x114>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_Write+0x110>
 350:	ba 01       	movw	r22, r20
 352:	60 95       	com	r22
 354:	62 23       	and	r22, r18
 356:	62 bb       	out	0x12, r22	; 18
 358:	08 95       	ret

0000035a <DIO_u8read>:
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	unsigned char return_value=0;
	switch(portname)
 35a:	84 34       	cpi	r24, 0x44	; 68
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_u8read+0x6>
 35e:	4e c0       	rjmp	.+156    	; 0x3fc <DIO_u8read+0xa2>
 360:	85 34       	cpi	r24, 0x45	; 69
 362:	40 f4       	brcc	.+16     	; 0x374 <DIO_u8read+0x1a>
 364:	82 34       	cpi	r24, 0x42	; 66
 366:	31 f1       	breq	.+76     	; 0x3b4 <DIO_u8read+0x5a>
 368:	83 34       	cpi	r24, 0x43	; 67
 36a:	b0 f5       	brcc	.+108    	; 0x3d8 <DIO_u8read+0x7e>
 36c:	81 34       	cpi	r24, 0x41	; 65
 36e:	09 f0       	breq	.+2      	; 0x372 <DIO_u8read+0x18>
 370:	57 c0       	rjmp	.+174    	; 0x420 <DIO_u8read+0xc6>
 372:	0e c0       	rjmp	.+28     	; 0x390 <DIO_u8read+0x36>
 374:	82 36       	cpi	r24, 0x62	; 98
 376:	f1 f0       	breq	.+60     	; 0x3b4 <DIO_u8read+0x5a>
 378:	83 36       	cpi	r24, 0x63	; 99
 37a:	20 f4       	brcc	.+8      	; 0x384 <DIO_u8read+0x2a>
 37c:	81 36       	cpi	r24, 0x61	; 97
 37e:	09 f0       	breq	.+2      	; 0x382 <DIO_u8read+0x28>
 380:	4f c0       	rjmp	.+158    	; 0x420 <DIO_u8read+0xc6>
 382:	06 c0       	rjmp	.+12     	; 0x390 <DIO_u8read+0x36>
 384:	83 36       	cpi	r24, 0x63	; 99
 386:	41 f1       	breq	.+80     	; 0x3d8 <DIO_u8read+0x7e>
 388:	84 36       	cpi	r24, 0x64	; 100
 38a:	09 f0       	breq	.+2      	; 0x38e <DIO_u8read+0x34>
 38c:	49 c0       	rjmp	.+146    	; 0x420 <DIO_u8read+0xc6>
 38e:	36 c0       	rjmp	.+108    	; 0x3fc <DIO_u8read+0xa2>
	{
		case 'A':
		case 'a':
		return_value=READ_BIT(PINA,pinnumber);
 390:	29 b3       	in	r18, 0x19	; 25
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	06 2e       	mov	r0, r22
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_u8read+0x44>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_u8read+0x40>
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	82 23       	and	r24, r18
 3a6:	93 23       	and	r25, r19
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8read+0x54>
 3aa:	95 95       	asr	r25
 3ac:	87 95       	ror	r24
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_u8read+0x50>
		break;
 3b2:	08 95       	ret
		
		case 'B':
		case 'b':
		return_value=READ_BIT(PINB,pinnumber);
 3b4:	26 b3       	in	r18, 0x16	; 22
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	06 2e       	mov	r0, r22
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8read+0x68>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8read+0x64>
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	82 23       	and	r24, r18
 3ca:	93 23       	and	r25, r19
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_u8read+0x78>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_u8read+0x74>
		break;
 3d6:	08 95       	ret
		
		case 'C':
		case 'c':
		return_value=READ_BIT(PINC,pinnumber);
 3d8:	23 b3       	in	r18, 0x13	; 19
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	06 2e       	mov	r0, r22
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8read+0x8c>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_u8read+0x88>
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	82 23       	and	r24, r18
 3ee:	93 23       	and	r25, r19
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_u8read+0x9c>
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_u8read+0x98>
		break;
 3fa:	08 95       	ret
		
		case 'D':
		case 'd':
		return_value=READ_BIT(PIND,pinnumber);
 3fc:	20 b3       	in	r18, 0x10	; 16
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	06 2e       	mov	r0, r22
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8read+0xb0>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8read+0xac>
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	82 23       	and	r24, r18
 412:	93 23       	and	r25, r19
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_u8read+0xc0>
 416:	95 95       	asr	r25
 418:	87 95       	ror	r24
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_u8read+0xbc>
		break;
 41e:	08 95       	ret
	}
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	unsigned char return_value=0;
 420:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	return return_value;
}
 422:	08 95       	ret

00000424 <DIO_Toggle>:

void DIO_Toggle(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	switch(portname)
 424:	84 34       	cpi	r24, 0x44	; 68
 426:	09 f4       	brne	.+2      	; 0x42a <DIO_Toggle+0x6>
 428:	3d c0       	rjmp	.+122    	; 0x4a4 <DIO_Toggle+0x80>
 42a:	85 34       	cpi	r24, 0x45	; 69
 42c:	40 f4       	brcc	.+16     	; 0x43e <DIO_Toggle+0x1a>
 42e:	82 34       	cpi	r24, 0x42	; 66
 430:	f9 f0       	breq	.+62     	; 0x470 <DIO_Toggle+0x4c>
 432:	83 34       	cpi	r24, 0x43	; 67
 434:	50 f5       	brcc	.+84     	; 0x48a <DIO_Toggle+0x66>
 436:	81 34       	cpi	r24, 0x41	; 65
 438:	09 f0       	breq	.+2      	; 0x43c <DIO_Toggle+0x18>
 43a:	40 c0       	rjmp	.+128    	; 0x4bc <DIO_Toggle+0x98>
 43c:	0c c0       	rjmp	.+24     	; 0x456 <DIO_Toggle+0x32>
 43e:	82 36       	cpi	r24, 0x62	; 98
 440:	b9 f0       	breq	.+46     	; 0x470 <DIO_Toggle+0x4c>
 442:	83 36       	cpi	r24, 0x63	; 99
 444:	18 f4       	brcc	.+6      	; 0x44c <DIO_Toggle+0x28>
 446:	81 36       	cpi	r24, 0x61	; 97
 448:	c9 f5       	brne	.+114    	; 0x4bc <DIO_Toggle+0x98>
 44a:	05 c0       	rjmp	.+10     	; 0x456 <DIO_Toggle+0x32>
 44c:	83 36       	cpi	r24, 0x63	; 99
 44e:	e9 f0       	breq	.+58     	; 0x48a <DIO_Toggle+0x66>
 450:	84 36       	cpi	r24, 0x64	; 100
 452:	a1 f5       	brne	.+104    	; 0x4bc <DIO_Toggle+0x98>
 454:	27 c0       	rjmp	.+78     	; 0x4a4 <DIO_Toggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
 456:	2b b3       	in	r18, 0x1b	; 27
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	ac 01       	movw	r20, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_Toggle+0x40>
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_Toggle+0x3c>
 468:	ba 01       	movw	r22, r20
 46a:	62 27       	eor	r22, r18
 46c:	6b bb       	out	0x1b, r22	; 27
		break;
 46e:	08 95       	ret
		
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
 470:	28 b3       	in	r18, 0x18	; 24
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	ac 01       	movw	r20, r24
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_Toggle+0x5a>
 47a:	44 0f       	add	r20, r20
 47c:	55 1f       	adc	r21, r21
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_Toggle+0x56>
 482:	ba 01       	movw	r22, r20
 484:	62 27       	eor	r22, r18
 486:	68 bb       	out	0x18, r22	; 24
		break;
 488:	08 95       	ret
		
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
 48a:	25 b3       	in	r18, 0x15	; 21
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	ac 01       	movw	r20, r24
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_Toggle+0x74>
 494:	44 0f       	add	r20, r20
 496:	55 1f       	adc	r21, r21
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_Toggle+0x70>
 49c:	ba 01       	movw	r22, r20
 49e:	62 27       	eor	r22, r18
 4a0:	65 bb       	out	0x15, r22	; 21
		break;
 4a2:	08 95       	ret
		
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
 4a4:	22 b3       	in	r18, 0x12	; 18
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	ac 01       	movw	r20, r24
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_Toggle+0x8e>
 4ae:	44 0f       	add	r20, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_Toggle+0x8a>
 4b6:	ba 01       	movw	r22, r20
 4b8:	62 27       	eor	r22, r18
 4ba:	62 bb       	out	0x12, r22	; 18
 4bc:	08 95       	ret

000004be <DIO_SET_Port_Direction>:
	}
}

void DIO_SET_Port_Direction(unsigned char portname,unsigned char direction)//EX: ('A',0xFF)
{
	switch(portname)
 4be:	84 34       	cpi	r24, 0x44	; 68
 4c0:	d9 f0       	breq	.+54     	; 0x4f8 <DIO_SET_Port_Direction+0x3a>
 4c2:	85 34       	cpi	r24, 0x45	; 69
 4c4:	38 f4       	brcc	.+14     	; 0x4d4 <DIO_SET_Port_Direction+0x16>
 4c6:	82 34       	cpi	r24, 0x42	; 66
 4c8:	99 f0       	breq	.+38     	; 0x4f0 <DIO_SET_Port_Direction+0x32>
 4ca:	83 34       	cpi	r24, 0x43	; 67
 4cc:	98 f4       	brcc	.+38     	; 0x4f4 <DIO_SET_Port_Direction+0x36>
 4ce:	81 34       	cpi	r24, 0x41	; 65
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <DIO_SET_Port_Direction+0x3c>
 4d2:	0c c0       	rjmp	.+24     	; 0x4ec <DIO_SET_Port_Direction+0x2e>
 4d4:	82 36       	cpi	r24, 0x62	; 98
 4d6:	61 f0       	breq	.+24     	; 0x4f0 <DIO_SET_Port_Direction+0x32>
 4d8:	83 36       	cpi	r24, 0x63	; 99
 4da:	18 f4       	brcc	.+6      	; 0x4e2 <DIO_SET_Port_Direction+0x24>
 4dc:	81 36       	cpi	r24, 0x61	; 97
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_SET_Port_Direction+0x3c>
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <DIO_SET_Port_Direction+0x2e>
 4e2:	83 36       	cpi	r24, 0x63	; 99
 4e4:	39 f0       	breq	.+14     	; 0x4f4 <DIO_SET_Port_Direction+0x36>
 4e6:	84 36       	cpi	r24, 0x64	; 100
 4e8:	41 f4       	brne	.+16     	; 0x4fa <DIO_SET_Port_Direction+0x3c>
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <DIO_SET_Port_Direction+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 4ec:	6a bb       	out	0x1a, r22	; 26
		break;
 4ee:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB=direction;
 4f0:	67 bb       	out	0x17, r22	; 23
		break;
 4f2:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=direction;
 4f4:	64 bb       	out	0x14, r22	; 20
		break;
 4f6:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=direction;
 4f8:	61 bb       	out	0x11, r22	; 17
 4fa:	08 95       	ret

000004fc <DIO_WRITE_PORT>:
	}
}

void DIO_WRITE_PORT(unsigned char portname, unsigned char outputvalue)//EX: ('A',0xFF)
{
	switch(portname)
 4fc:	84 34       	cpi	r24, 0x44	; 68
 4fe:	d9 f0       	breq	.+54     	; 0x536 <DIO_WRITE_PORT+0x3a>
 500:	85 34       	cpi	r24, 0x45	; 69
 502:	38 f4       	brcc	.+14     	; 0x512 <DIO_WRITE_PORT+0x16>
 504:	82 34       	cpi	r24, 0x42	; 66
 506:	99 f0       	breq	.+38     	; 0x52e <DIO_WRITE_PORT+0x32>
 508:	83 34       	cpi	r24, 0x43	; 67
 50a:	98 f4       	brcc	.+38     	; 0x532 <DIO_WRITE_PORT+0x36>
 50c:	81 34       	cpi	r24, 0x41	; 65
 50e:	a1 f4       	brne	.+40     	; 0x538 <DIO_WRITE_PORT+0x3c>
 510:	0c c0       	rjmp	.+24     	; 0x52a <DIO_WRITE_PORT+0x2e>
 512:	82 36       	cpi	r24, 0x62	; 98
 514:	61 f0       	breq	.+24     	; 0x52e <DIO_WRITE_PORT+0x32>
 516:	83 36       	cpi	r24, 0x63	; 99
 518:	18 f4       	brcc	.+6      	; 0x520 <DIO_WRITE_PORT+0x24>
 51a:	81 36       	cpi	r24, 0x61	; 97
 51c:	69 f4       	brne	.+26     	; 0x538 <DIO_WRITE_PORT+0x3c>
 51e:	05 c0       	rjmp	.+10     	; 0x52a <DIO_WRITE_PORT+0x2e>
 520:	83 36       	cpi	r24, 0x63	; 99
 522:	39 f0       	breq	.+14     	; 0x532 <DIO_WRITE_PORT+0x36>
 524:	84 36       	cpi	r24, 0x64	; 100
 526:	41 f4       	brne	.+16     	; 0x538 <DIO_WRITE_PORT+0x3c>
 528:	06 c0       	rjmp	.+12     	; 0x536 <DIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=outputvalue;
 52a:	6b bb       	out	0x1b, r22	; 27
		break;
 52c:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=outputvalue;
 52e:	68 bb       	out	0x18, r22	; 24
		break;
 530:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=outputvalue;
 532:	65 bb       	out	0x15, r22	; 21
		break;
 534:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=outputvalue;
 536:	62 bb       	out	0x12, r22	; 18
 538:	08 95       	ret

0000053a <DIO_Read_PORT>:
}

unsigned char DIO_Read_PORT(unsigned char portname)
{
	unsigned char return_value=0;
	switch(portname)
 53a:	84 34       	cpi	r24, 0x44	; 68
 53c:	d9 f0       	breq	.+54     	; 0x574 <DIO_Read_PORT+0x3a>
 53e:	85 34       	cpi	r24, 0x45	; 69
 540:	38 f4       	brcc	.+14     	; 0x550 <DIO_Read_PORT+0x16>
 542:	82 34       	cpi	r24, 0x42	; 66
 544:	99 f0       	breq	.+38     	; 0x56c <DIO_Read_PORT+0x32>
 546:	83 34       	cpi	r24, 0x43	; 67
 548:	98 f4       	brcc	.+38     	; 0x570 <DIO_Read_PORT+0x36>
 54a:	81 34       	cpi	r24, 0x41	; 65
 54c:	a9 f4       	brne	.+42     	; 0x578 <DIO_Read_PORT+0x3e>
 54e:	0c c0       	rjmp	.+24     	; 0x568 <DIO_Read_PORT+0x2e>
 550:	82 36       	cpi	r24, 0x62	; 98
 552:	61 f0       	breq	.+24     	; 0x56c <DIO_Read_PORT+0x32>
 554:	83 36       	cpi	r24, 0x63	; 99
 556:	18 f4       	brcc	.+6      	; 0x55e <DIO_Read_PORT+0x24>
 558:	81 36       	cpi	r24, 0x61	; 97
 55a:	71 f4       	brne	.+28     	; 0x578 <DIO_Read_PORT+0x3e>
 55c:	05 c0       	rjmp	.+10     	; 0x568 <DIO_Read_PORT+0x2e>
 55e:	83 36       	cpi	r24, 0x63	; 99
 560:	39 f0       	breq	.+14     	; 0x570 <DIO_Read_PORT+0x36>
 562:	84 36       	cpi	r24, 0x64	; 100
 564:	49 f4       	brne	.+18     	; 0x578 <DIO_Read_PORT+0x3e>
 566:	06 c0       	rjmp	.+12     	; 0x574 <DIO_Read_PORT+0x3a>
	{
		case 'A':
		case 'a':
		return_value=PINA;
 568:	89 b3       	in	r24, 0x19	; 25
		break;
 56a:	08 95       	ret
		
		case 'B':
		case 'b':
		return_value=PINB;
 56c:	86 b3       	in	r24, 0x16	; 22
		break;
 56e:	08 95       	ret
		
		case 'C':
		case 'c':
		return_value=PINC;
 570:	83 b3       	in	r24, 0x13	; 19
		break;
 572:	08 95       	ret
		
		case 'D':
		case 'd':
		return_value=PIND;
 574:	80 b3       	in	r24, 0x10	; 16
		break;
 576:	08 95       	ret
	}
}

unsigned char DIO_Read_PORT(unsigned char portname)
{
	unsigned char return_value=0;
 578:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
		
	}
	return return_value;
}
 57a:	08 95       	ret

0000057c <DIO_vConnectPullup>:

void DIO_vConnectPullup(unsigned char portname,unsigned char pinnumber,unsigned char Connect_PullUp)
{
	switch(portname)
 57c:	84 34       	cpi	r24, 0x44	; 68
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_vConnectPullup+0x6>
 580:	71 c0       	rjmp	.+226    	; 0x664 <DIO_vConnectPullup+0xe8>
 582:	85 34       	cpi	r24, 0x45	; 69
 584:	48 f4       	brcc	.+18     	; 0x598 <DIO_vConnectPullup+0x1c>
 586:	82 34       	cpi	r24, 0x42	; 66
 588:	99 f1       	breq	.+102    	; 0x5f0 <DIO_vConnectPullup+0x74>
 58a:	83 34       	cpi	r24, 0x43	; 67
 58c:	08 f0       	brcs	.+2      	; 0x590 <DIO_vConnectPullup+0x14>
 58e:	4d c0       	rjmp	.+154    	; 0x62a <DIO_vConnectPullup+0xae>
 590:	81 34       	cpi	r24, 0x41	; 65
 592:	09 f0       	breq	.+2      	; 0x596 <DIO_vConnectPullup+0x1a>
 594:	83 c0       	rjmp	.+262    	; 0x69c <DIO_vConnectPullup+0x120>
 596:	0f c0       	rjmp	.+30     	; 0x5b6 <DIO_vConnectPullup+0x3a>
 598:	82 36       	cpi	r24, 0x62	; 98
 59a:	51 f1       	breq	.+84     	; 0x5f0 <DIO_vConnectPullup+0x74>
 59c:	83 36       	cpi	r24, 0x63	; 99
 59e:	20 f4       	brcc	.+8      	; 0x5a8 <DIO_vConnectPullup+0x2c>
 5a0:	81 36       	cpi	r24, 0x61	; 97
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <DIO_vConnectPullup+0x2a>
 5a4:	7b c0       	rjmp	.+246    	; 0x69c <DIO_vConnectPullup+0x120>
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <DIO_vConnectPullup+0x3a>
 5a8:	83 36       	cpi	r24, 0x63	; 99
 5aa:	09 f4       	brne	.+2      	; 0x5ae <DIO_vConnectPullup+0x32>
 5ac:	3e c0       	rjmp	.+124    	; 0x62a <DIO_vConnectPullup+0xae>
 5ae:	84 36       	cpi	r24, 0x64	; 100
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <DIO_vConnectPullup+0x38>
 5b2:	74 c0       	rjmp	.+232    	; 0x69c <DIO_vConnectPullup+0x120>
 5b4:	57 c0       	rjmp	.+174    	; 0x664 <DIO_vConnectPullup+0xe8>
	{
		case 'A':
		case 'a':
		if (Connect_PullUp==1)
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	69 f4       	brne	.+26     	; 0x5d4 <DIO_vConnectPullup+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 5ba:	2b b3       	in	r18, 0x1b	; 27
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	ac 01       	movw	r20, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_vConnectPullup+0x4c>
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_vConnectPullup+0x48>
 5cc:	ba 01       	movw	r22, r20
 5ce:	62 2b       	or	r22, r18
 5d0:	6b bb       	out	0x1b, r22	; 27
 5d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 5d4:	2b b3       	in	r18, 0x1b	; 27
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	ac 01       	movw	r20, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_vConnectPullup+0x66>
 5de:	44 0f       	add	r20, r20
 5e0:	55 1f       	adc	r21, r21
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_vConnectPullup+0x62>
 5e6:	ba 01       	movw	r22, r20
 5e8:	60 95       	com	r22
 5ea:	62 23       	and	r22, r18
 5ec:	6b bb       	out	0x1b, r22	; 27
 5ee:	08 95       	ret
		break;
		
		
		case 'B':
		case 'b':
		if(Connect_PullUp==1)
 5f0:	41 30       	cpi	r20, 0x01	; 1
 5f2:	69 f4       	brne	.+26     	; 0x60e <DIO_vConnectPullup+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 5f4:	28 b3       	in	r18, 0x18	; 24
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	ac 01       	movw	r20, r24
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_vConnectPullup+0x86>
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_vConnectPullup+0x82>
 606:	ba 01       	movw	r22, r20
 608:	62 2b       	or	r22, r18
 60a:	68 bb       	out	0x18, r22	; 24
 60c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 60e:	28 b3       	in	r18, 0x18	; 24
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	ac 01       	movw	r20, r24
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_vConnectPullup+0xa0>
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_vConnectPullup+0x9c>
 620:	ba 01       	movw	r22, r20
 622:	60 95       	com	r22
 624:	62 23       	and	r22, r18
 626:	68 bb       	out	0x18, r22	; 24
 628:	08 95       	ret
		break;
		
		
		case 'C':
		case 'c':
		if(Connect_PullUp==1)
 62a:	41 30       	cpi	r20, 0x01	; 1
 62c:	69 f4       	brne	.+26     	; 0x648 <DIO_vConnectPullup+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 62e:	25 b3       	in	r18, 0x15	; 21
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	ac 01       	movw	r20, r24
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_vConnectPullup+0xc0>
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_vConnectPullup+0xbc>
 640:	ba 01       	movw	r22, r20
 642:	62 2b       	or	r22, r18
 644:	65 bb       	out	0x15, r22	; 21
 646:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 648:	25 b3       	in	r18, 0x15	; 21
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	ac 01       	movw	r20, r24
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_vConnectPullup+0xda>
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_vConnectPullup+0xd6>
 65a:	ba 01       	movw	r22, r20
 65c:	60 95       	com	r22
 65e:	62 23       	and	r22, r18
 660:	65 bb       	out	0x15, r22	; 21
 662:	08 95       	ret
		break;
		
		
		case 'D':
		case 'd':
		if(Connect_PullUp==1)
 664:	41 30       	cpi	r20, 0x01	; 1
 666:	69 f4       	brne	.+26     	; 0x682 <DIO_vConnectPullup+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 668:	22 b3       	in	r18, 0x12	; 18
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	ac 01       	movw	r20, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_vConnectPullup+0xfa>
 672:	44 0f       	add	r20, r20
 674:	55 1f       	adc	r21, r21
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_vConnectPullup+0xf6>
 67a:	ba 01       	movw	r22, r20
 67c:	62 2b       	or	r22, r18
 67e:	62 bb       	out	0x12, r22	; 18
 680:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 682:	22 b3       	in	r18, 0x12	; 18
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	ac 01       	movw	r20, r24
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_vConnectPullup+0x114>
 68c:	44 0f       	add	r20, r20
 68e:	55 1f       	adc	r21, r21
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_vConnectPullup+0x110>
 694:	ba 01       	movw	r22, r20
 696:	60 95       	com	r22
 698:	62 23       	and	r22, r18
 69a:	62 bb       	out	0x12, r22	; 18
 69c:	08 95       	ret

0000069e <DIO_Write_Low_Nibble>:
}


void DIO_Write_Low_Nibble(unsigned char portname,unsigned char value)////EX: ('B',0x08)
{
	value &=0x0F;	//b7me nfse mn 8ba2 el user 3shan law da5l value akbr mn 9
 69e:	6f 70       	andi	r22, 0x0F	; 15
	
	switch(portname)
 6a0:	84 34       	cpi	r24, 0x44	; 68
 6a2:	51 f1       	breq	.+84     	; 0x6f8 <DIO_Write_Low_Nibble+0x5a>
 6a4:	85 34       	cpi	r24, 0x45	; 69
 6a6:	38 f4       	brcc	.+14     	; 0x6b6 <DIO_Write_Low_Nibble+0x18>
 6a8:	82 34       	cpi	r24, 0x42	; 66
 6aa:	c1 f0       	breq	.+48     	; 0x6dc <DIO_Write_Low_Nibble+0x3e>
 6ac:	83 34       	cpi	r24, 0x43	; 67
 6ae:	e8 f4       	brcc	.+58     	; 0x6ea <DIO_Write_Low_Nibble+0x4c>
 6b0:	81 34       	cpi	r24, 0x41	; 65
 6b2:	41 f5       	brne	.+80     	; 0x704 <DIO_Write_Low_Nibble+0x66>
 6b4:	0c c0       	rjmp	.+24     	; 0x6ce <DIO_Write_Low_Nibble+0x30>
 6b6:	82 36       	cpi	r24, 0x62	; 98
 6b8:	89 f0       	breq	.+34     	; 0x6dc <DIO_Write_Low_Nibble+0x3e>
 6ba:	83 36       	cpi	r24, 0x63	; 99
 6bc:	18 f4       	brcc	.+6      	; 0x6c4 <DIO_Write_Low_Nibble+0x26>
 6be:	81 36       	cpi	r24, 0x61	; 97
 6c0:	09 f5       	brne	.+66     	; 0x704 <DIO_Write_Low_Nibble+0x66>
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <DIO_Write_Low_Nibble+0x30>
 6c4:	83 36       	cpi	r24, 0x63	; 99
 6c6:	89 f0       	breq	.+34     	; 0x6ea <DIO_Write_Low_Nibble+0x4c>
 6c8:	84 36       	cpi	r24, 0x64	; 100
 6ca:	e1 f4       	brne	.+56     	; 0x704 <DIO_Write_Low_Nibble+0x66>
 6cc:	15 c0       	rjmp	.+42     	; 0x6f8 <DIO_Write_Low_Nibble+0x5a>
	{
		case 'A':
		case 'a':
		PORTA &=0xF0;	//basfr el low nibble fel port da
 6ce:	8b b3       	in	r24, 0x1b	; 27
 6d0:	80 7f       	andi	r24, 0xF0	; 240
 6d2:	8b bb       	out	0x1b, r24	; 27
		PORTA |=value;	//btl3 el value bt3te
 6d4:	8b b3       	in	r24, 0x1b	; 27
 6d6:	68 2b       	or	r22, r24
 6d8:	6b bb       	out	0x1b, r22	; 27
		break;
 6da:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB &=0xF0;	//bsfr low nibble fel port da
 6dc:	88 b3       	in	r24, 0x18	; 24
 6de:	80 7f       	andi	r24, 0xF0	; 240
 6e0:	88 bb       	out	0x18, r24	; 24
		PORTB |=value;
 6e2:	88 b3       	in	r24, 0x18	; 24
 6e4:	68 2b       	or	r22, r24
 6e6:	68 bb       	out	0x18, r22	; 24
		break;
 6e8:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC &=0xF0;
 6ea:	85 b3       	in	r24, 0x15	; 21
 6ec:	80 7f       	andi	r24, 0xF0	; 240
 6ee:	85 bb       	out	0x15, r24	; 21
		PORTC |=value;
 6f0:	85 b3       	in	r24, 0x15	; 21
 6f2:	68 2b       	or	r22, r24
 6f4:	65 bb       	out	0x15, r22	; 21
		break;
 6f6:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD &=0xF0;
 6f8:	82 b3       	in	r24, 0x12	; 18
 6fa:	80 7f       	andi	r24, 0xF0	; 240
 6fc:	82 bb       	out	0x12, r24	; 18
		PORTD |=value;
 6fe:	82 b3       	in	r24, 0x12	; 18
 700:	68 2b       	or	r22, r24
 702:	62 bb       	out	0x12, r22	; 18
 704:	08 95       	ret

00000706 <DIO_Write_High_Nibble>:
	}
}

void DIO_Write_High_Nibble(unsigned char portname,unsigned char value)  //EX: ('a',0x02)
{
	value<<=4;		//ba7me nafse mn 8ba2 el user
 706:	62 95       	swap	r22
 708:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 70a:	84 34       	cpi	r24, 0x44	; 68
 70c:	51 f1       	breq	.+84     	; 0x762 <DIO_Write_High_Nibble+0x5c>
 70e:	85 34       	cpi	r24, 0x45	; 69
 710:	38 f4       	brcc	.+14     	; 0x720 <DIO_Write_High_Nibble+0x1a>
 712:	82 34       	cpi	r24, 0x42	; 66
 714:	c1 f0       	breq	.+48     	; 0x746 <DIO_Write_High_Nibble+0x40>
 716:	83 34       	cpi	r24, 0x43	; 67
 718:	e8 f4       	brcc	.+58     	; 0x754 <DIO_Write_High_Nibble+0x4e>
 71a:	81 34       	cpi	r24, 0x41	; 65
 71c:	41 f5       	brne	.+80     	; 0x76e <DIO_Write_High_Nibble+0x68>
 71e:	0c c0       	rjmp	.+24     	; 0x738 <DIO_Write_High_Nibble+0x32>
 720:	82 36       	cpi	r24, 0x62	; 98
 722:	89 f0       	breq	.+34     	; 0x746 <DIO_Write_High_Nibble+0x40>
 724:	83 36       	cpi	r24, 0x63	; 99
 726:	18 f4       	brcc	.+6      	; 0x72e <DIO_Write_High_Nibble+0x28>
 728:	81 36       	cpi	r24, 0x61	; 97
 72a:	09 f5       	brne	.+66     	; 0x76e <DIO_Write_High_Nibble+0x68>
 72c:	05 c0       	rjmp	.+10     	; 0x738 <DIO_Write_High_Nibble+0x32>
 72e:	83 36       	cpi	r24, 0x63	; 99
 730:	89 f0       	breq	.+34     	; 0x754 <DIO_Write_High_Nibble+0x4e>
 732:	84 36       	cpi	r24, 0x64	; 100
 734:	e1 f4       	brne	.+56     	; 0x76e <DIO_Write_High_Nibble+0x68>
 736:	15 c0       	rjmp	.+42     	; 0x762 <DIO_Write_High_Nibble+0x5c>
	{
		case 'A':
		case 'a':
		PORTA &=0x0F;	//basfr el high nibble 3shan law fe value adema
 738:	8b b3       	in	r24, 0x1b	; 27
 73a:	8f 70       	andi	r24, 0x0F	; 15
 73c:	8b bb       	out	0x1b, r24	; 27
		PORTA |=value;	//btl3 el value bt3te
 73e:	8b b3       	in	r24, 0x1b	; 27
 740:	68 2b       	or	r22, r24
 742:	6b bb       	out	0x1b, r22	; 27
		break;
 744:	08 95       	ret
		
		case 'B':
		case'b':
		PORTB &=0x0F;	//basfr el high nibble
 746:	88 b3       	in	r24, 0x18	; 24
 748:	8f 70       	andi	r24, 0x0F	; 15
 74a:	88 bb       	out	0x18, r24	; 24
		PORTB |=value;	//btl3 el value bt3te
 74c:	88 b3       	in	r24, 0x18	; 24
 74e:	68 2b       	or	r22, r24
 750:	68 bb       	out	0x18, r22	; 24
		break;
 752:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC &=0x0F;
 754:	85 b3       	in	r24, 0x15	; 21
 756:	8f 70       	andi	r24, 0x0F	; 15
 758:	85 bb       	out	0x15, r24	; 21
		PORTC |=value;
 75a:	85 b3       	in	r24, 0x15	; 21
 75c:	68 2b       	or	r22, r24
 75e:	65 bb       	out	0x15, r22	; 21
		break;
 760:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD &=0x0F;
 762:	82 b3       	in	r24, 0x12	; 18
 764:	8f 70       	andi	r24, 0x0F	; 15
 766:	82 bb       	out	0x12, r24	; 18
		PORTD |=value;
 768:	82 b3       	in	r24, 0x12	; 18
 76a:	68 2b       	or	r22, r24
 76c:	62 bb       	out	0x12, r22	; 18
 76e:	08 95       	ret

00000770 <LED_vInit>:
 */ 
#include "DIO_driver.h"

void LED_vInit(unsigned char portname,unsigned char pinnumber)//EX:  ('A',0)
{
	DIO_set_PINDir(portname,pinnumber,1);
 770:	41 e0       	ldi	r20, 0x01	; 1
 772:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
}
 776:	08 95       	ret

00000778 <LED_vTurnOn>:

void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)//EX:  ('A',7)
{
	DIO_Write(portname,pinnumber,1);
 778:	41 e0       	ldi	r20, 0x01	; 1
 77a:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 77e:	08 95       	ret

00000780 <LED_vTurnOFF>:

void LED_vTurnOFF(unsigned char portname,unsigned char pinnumber)//EX:  ('A',4)
{
	DIO_Write(portname,pinnumber,0);
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 786:	08 95       	ret

00000788 <LED_vToggle>:

char LED_vToggle(unsigned char portname,unsigned char pinnumber)//EX:  ('A',3)
{
	DIO_Toggle(portname,pinnumber);
 788:	0e 94 12 02 	call	0x424	; 0x424 <DIO_Toggle>
}
 78c:	08 95       	ret

0000078e <LED_u8Read>:

void LED_u8Read(unsigned char portname,unsigned char pinnumber)
{
	DIO_u8read(portname,pinnumber);
 78e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_u8read>
 792:	08 95       	ret

00000794 <DC_Motor_vInit>:
 *  Author: 20100
 */ 
#include "MOTORS.h"

void DC_Motor_vInit(char portname,char enable_pin)	//enter the first pin of the motor 
{
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	c8 2f       	mov	r28, r24
 79a:	d6 2f       	mov	r29, r22
	DIO_set_PINDir(portname,enable_pin,1);			//Set the direction of IN1 output
 79c:	41 e0       	ldi	r20, 0x01	; 1
 79e:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	DIO_set_PINDir(portname,(enable_pin+1),1);		//Set the direction of IN2 output
 7a2:	6d 2f       	mov	r22, r29
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	8c 2f       	mov	r24, r28
 7a8:	41 e0       	ldi	r20, 0x01	; 1
 7aa:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	DIO_set_PINDir(portname,(enable_pin+2),1);		//Set the direction of EN output
 7ae:	6d 2f       	mov	r22, r29
 7b0:	6e 5f       	subi	r22, 0xFE	; 254
 7b2:	8c 2f       	mov	r24, r28
 7b4:	41 e0       	ldi	r20, 0x01	; 1
 7b6:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
}
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <DC_Motor_Start>:

void DC_Motor_Start(char portname,char pinnumber,char enable_pin)
{
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	c8 2f       	mov	r28, r24
 7c6:	d4 2f       	mov	r29, r20
	DIO_Write(portname,pinnumber,1);				//start rotation of motor in the direction the user need
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
	DIO_Write(portname,enable_pin,1);				//write 1 to enable bit
 7ce:	8c 2f       	mov	r24, r28
 7d0:	6d 2f       	mov	r22, r29
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <DC_Motor_Stop>:

void DC_Motor_Stop(char portname,char pinnumber,char enable_pin)
{
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	c8 2f       	mov	r28, r24
 7e4:	d4 2f       	mov	r29, r20
	DIO_Write(portname,pinnumber,0);				//stop rotation of motor in the direction the user need
 7e6:	40 e0       	ldi	r20, 0x00	; 0
 7e8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
	DIO_Write(portname,enable_pin,0);				//write 0 to stop enable bit
 7ec:	8c 2f       	mov	r24, r28
 7ee:	6d 2f       	mov	r22, r29
 7f0:	40 e0       	ldi	r20, 0x00	; 0
 7f2:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <DC_Motor_u8Read>:

char DC_Motor_u8Read(char portname,char pinnumber)
{
	DIO_u8read(portname,pinnumber);
 7fc:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_u8read>
 800:	08 95       	ret

00000802 <main>:
volatile char Temp_ADC_READ=0;						//variable take LM35 sensor reading
volatile char LAST_AIR_COND_STATUS=AIR_COND_IS_OFF;		//variable take LM35 sensor reading
int main(void)
{
	/*************INITILIZATION***********/
	ADC_vInit();								//INITIALIZE ADC
 802:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_vInit>
	SPI_SlaveInit();
 806:	0e 94 8d 05 	call	0xb1a	; 0xb1a <SPI_SlaveInit>
	
	DC_Motor_vInit(AIR_COND_PORT,AIR_COND_PIN);//INITIALIZE motor
 80a:	83 e4       	ldi	r24, 0x43	; 67
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	0e 94 ca 03 	call	0x794	; 0x794 <DC_Motor_vInit>
	
	LED_vInit(ROOMS_PORT,ROOM1_PIN);			//INITIALIZE ROOM1
 812:	84 e4       	ldi	r24, 0x44	; 68
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit(ROOMS_PORT,ROOM2_PIN);			//INITIALIZE ROOM2
 81a:	84 e4       	ldi	r24, 0x44	; 68
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit(ROOMS_PORT,ROOM3_PIN);			//INITIALIZE ROOM3
 822:	84 e4       	ldi	r24, 0x44	; 68
 824:	62 e0       	ldi	r22, 0x02	; 2
 826:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit(ROOMS_PORT,ROOM4_PIN);			//INITIALIZE ROOM4
 82a:	84 e4       	ldi	r24, 0x44	; 68
 82c:	63 e0       	ldi	r22, 0x03	; 3
 82e:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	LED_vInit(ROOMS_PORT,TV_PIN);				//INITIALIZE ROOM4
 832:	84 e4       	ldi	r24, 0x44	; 68
 834:	64 e0       	ldi	r22, 0x04	; 4
 836:	0e 94 b8 03 	call	0x770	; 0x770 <LED_vInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	94 e3       	ldi	r25, 0x34	; 52
 83e:	ac e0       	ldi	r26, 0x0C	; 12
 840:	81 50       	subi	r24, 0x01	; 1
 842:	90 40       	sbci	r25, 0x00	; 0
 844:	a0 40       	sbci	r26, 0x00	; 0
 846:	e1 f7       	brne	.-8      	; 0x840 <main+0x3e>
 848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x48>
 84a:	00 00       	nop
	_delay_ms(500);
	/*************************************/
	/****************variables****************/
	unsigned char Send=DUMMY_DATA;
 84c:	cf ef       	ldi	r28, 0xFF	; 255
	

	/*****************************************/
    while(1)
    {
		Receive=SPI_SlaveReceiverchar(DUMMY_DATA);//take order from master
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
		
		switch(Receive)
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	41 97       	sbiw	r24, 0x11	; 17
 858:	80 33       	cpi	r24, 0x30	; 48
 85a:	91 05       	cpc	r25, r1
 85c:	c0 f7       	brcc	.-16     	; 0x84e <main+0x4c>
 85e:	86 5d       	subi	r24, 0xD6	; 214
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	fc 01       	movw	r30, r24
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	05 90       	lpm	r0, Z+
 86a:	f4 91       	lpm	r31, Z
 86c:	e0 2d       	mov	r30, r0
 86e:	09 94       	ijmp
		{
			/****************slave ask for the status of room********************/
			case ROOM1_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM1_PIN)==1)
 870:	84 e4       	ldi	r24, 0x44	; 68
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 878:	81 30       	cpi	r24, 0x01	; 1
 87a:	39 f0       	breq	.+14     	; 0x88a <__stack+0x2b>
				{
					Send=ON_STATUS;
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM1_PIN)==0)
 87c:	84 e4       	ldi	r24, 0x44	; 68
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 884:	88 23       	and	r24, r24
 886:	19 f0       	breq	.+6      	; 0x88e <__stack+0x2f>
 888:	03 c0       	rjmp	.+6      	; 0x890 <__stack+0x31>
		{
			/****************slave ask for the status of room********************/
			case ROOM1_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM1_PIN)==1)
				{
					Send=ON_STATUS;
 88a:	c1 e0       	ldi	r28, 0x01	; 1
 88c:	01 c0       	rjmp	.+2      	; 0x890 <__stack+0x31>
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM1_PIN)==0)
				{
					Send=OFF_STATUS;
 88e:	c0 e0       	ldi	r28, 0x00	; 0
				}
				SPI_SlaveReceiverchar(Send);
 890:	8c 2f       	mov	r24, r28
 892:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
			break;
 896:	db cf       	rjmp	.-74     	; 0x84e <main+0x4c>
			
			case ROOM2_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM2_PIN)==1)
 898:	84 e4       	ldi	r24, 0x44	; 68
 89a:	61 e0       	ldi	r22, 0x01	; 1
 89c:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 8a0:	81 30       	cpi	r24, 0x01	; 1
 8a2:	39 f0       	breq	.+14     	; 0x8b2 <__stack+0x53>
				{
					Send=ON_STATUS;
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM2_PIN)==0)
 8a4:	84 e4       	ldi	r24, 0x44	; 68
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 8ac:	88 23       	and	r24, r24
 8ae:	19 f0       	breq	.+6      	; 0x8b6 <__stack+0x57>
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <__stack+0x59>
			break;
			
			case ROOM2_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM2_PIN)==1)
				{
					Send=ON_STATUS;
 8b2:	c1 e0       	ldi	r28, 0x01	; 1
 8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <__stack+0x59>
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM2_PIN)==0)
				{
					Send=OFF_STATUS;
 8b6:	c0 e0       	ldi	r28, 0x00	; 0
				}
				SPI_SlaveReceiverchar(Send);
 8b8:	8c 2f       	mov	r24, r28
 8ba:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
			break;
 8be:	c7 cf       	rjmp	.-114    	; 0x84e <main+0x4c>
			
			case ROOM3_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM3_PIN)==1)
 8c0:	84 e4       	ldi	r24, 0x44	; 68
 8c2:	62 e0       	ldi	r22, 0x02	; 2
 8c4:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 8c8:	81 30       	cpi	r24, 0x01	; 1
 8ca:	39 f0       	breq	.+14     	; 0x8da <__stack+0x7b>
				{
					Send=ON_STATUS;
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM3_PIN)==0)
 8cc:	84 e4       	ldi	r24, 0x44	; 68
 8ce:	62 e0       	ldi	r22, 0x02	; 2
 8d0:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 8d4:	88 23       	and	r24, r24
 8d6:	19 f0       	breq	.+6      	; 0x8de <__stack+0x7f>
 8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <__stack+0x81>
			break;
			
			case ROOM3_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM3_PIN)==1)
				{
					Send=ON_STATUS;
 8da:	c1 e0       	ldi	r28, 0x01	; 1
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__stack+0x81>
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM3_PIN)==0)
				{
					Send=OFF_STATUS;
 8de:	c0 e0       	ldi	r28, 0x00	; 0
				}
				SPI_SlaveReceiverchar(Send);
 8e0:	8c 2f       	mov	r24, r28
 8e2:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
			break;
 8e6:	b3 cf       	rjmp	.-154    	; 0x84e <main+0x4c>
			
			case ROOM4_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM4_PIN)==1)
 8e8:	84 e4       	ldi	r24, 0x44	; 68
 8ea:	63 e0       	ldi	r22, 0x03	; 3
 8ec:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	39 f0       	breq	.+14     	; 0x902 <__stack+0xa3>
				{
					Send=ON_STATUS;
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM4_PIN)==0)
 8f4:	84 e4       	ldi	r24, 0x44	; 68
 8f6:	63 e0       	ldi	r22, 0x03	; 3
 8f8:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 8fc:	88 23       	and	r24, r24
 8fe:	19 f0       	breq	.+6      	; 0x906 <__stack+0xa7>
 900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0xa9>
			break;
			
			case ROOM4_STATUS:
				if(LED_u8Read(ROOMS_PORT,ROOM4_PIN)==1)
				{
					Send=ON_STATUS;
 902:	c1 e0       	ldi	r28, 0x01	; 1
 904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0xa9>
				}
				else if(LED_u8Read(ROOMS_PORT,ROOM4_PIN)==0)
				{
					Send=OFF_STATUS;
 906:	c0 e0       	ldi	r28, 0x00	; 0
				}
				SPI_SlaveReceiverchar(Send);
 908:	8c 2f       	mov	r24, r28
 90a:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
			break;
 90e:	9f cf       	rjmp	.-194    	; 0x84e <main+0x4c>
			
			case TV_STATUS:
				if(LED_u8Read(ROOMS_PORT,TV_PIN)==1)
 910:	84 e4       	ldi	r24, 0x44	; 68
 912:	64 e0       	ldi	r22, 0x04	; 4
 914:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 918:	81 30       	cpi	r24, 0x01	; 1
 91a:	39 f0       	breq	.+14     	; 0x92a <__stack+0xcb>
				{
					Send=ON_STATUS;
				}
				else if(LED_u8Read(ROOMS_PORT,TV_PIN)==0)
 91c:	84 e4       	ldi	r24, 0x44	; 68
 91e:	64 e0       	ldi	r22, 0x04	; 4
 920:	0e 94 c7 03 	call	0x78e	; 0x78e <LED_u8Read>
 924:	88 23       	and	r24, r24
 926:	19 f0       	breq	.+6      	; 0x92e <__stack+0xcf>
 928:	03 c0       	rjmp	.+6      	; 0x930 <__stack+0xd1>
			break;
			
			case TV_STATUS:
				if(LED_u8Read(ROOMS_PORT,TV_PIN)==1)
				{
					Send=ON_STATUS;
 92a:	c1 e0       	ldi	r28, 0x01	; 1
 92c:	01 c0       	rjmp	.+2      	; 0x930 <__stack+0xd1>
				}
				else if(LED_u8Read(ROOMS_PORT,TV_PIN)==0)
				{
					Send=OFF_STATUS;
 92e:	c0 e0       	ldi	r28, 0x00	; 0
				}
				SPI_SlaveReceiverchar(Send);
 930:	8c 2f       	mov	r24, r28
 932:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
			break;	
 936:	8b cf       	rjmp	.-234    	; 0x84e <main+0x4c>
			
			case AIR_COND_STATUS:
				if(DC_Motor_u8Read(AIR_COND_PORT,AIR_COND_PIN)==1)
 938:	83 e4       	ldi	r24, 0x43	; 67
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <DC_Motor_u8Read>
 940:	81 30       	cpi	r24, 0x01	; 1
 942:	39 f0       	breq	.+14     	; 0x952 <__stack+0xf3>
				{
					Send=ON_STATUS;
				}
				else if(DC_Motor_u8Read(AIR_COND_PORT,AIR_COND_PIN)==0)
 944:	83 e4       	ldi	r24, 0x43	; 67
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	0e 94 fe 03 	call	0x7fc	; 0x7fc <DC_Motor_u8Read>
 94c:	88 23       	and	r24, r24
 94e:	19 f0       	breq	.+6      	; 0x956 <__stack+0xf7>
 950:	03 c0       	rjmp	.+6      	; 0x958 <__stack+0xf9>
			break;	
			
			case AIR_COND_STATUS:
				if(DC_Motor_u8Read(AIR_COND_PORT,AIR_COND_PIN)==1)
				{
					Send=ON_STATUS;
 952:	c1 e0       	ldi	r28, 0x01	; 1
 954:	01 c0       	rjmp	.+2      	; 0x958 <__stack+0xf9>
				}
				else if(DC_Motor_u8Read(AIR_COND_PORT,AIR_COND_PIN)==0)
				{
					Send=OFF_STATUS;
 956:	c0 e0       	ldi	r28, 0x00	; 0
				}
				SPI_SlaveReceiverchar(Send);
 958:	8c 2f       	mov	r24, r28
 95a:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
			break;
 95e:	77 cf       	rjmp	.-274    	; 0x84e <main+0x4c>
			/****************slave ask for the status of room********************/
			
			/****************slave ask to on a room********************/
			case ROOM1_TURN_ON:
				LED_vTurnOn(ROOMS_PORT,ROOM1_PIN);
 960:	84 e4       	ldi	r24, 0x44	; 68
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
			break;
 968:	72 cf       	rjmp	.-284    	; 0x84e <main+0x4c>
			
			case ROOM2_TURN_ON:
				LED_vTurnOn(ROOMS_PORT,ROOM2_PIN);
 96a:	84 e4       	ldi	r24, 0x44	; 68
 96c:	61 e0       	ldi	r22, 0x01	; 1
 96e:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
			break;
 972:	6d cf       	rjmp	.-294    	; 0x84e <main+0x4c>
			
			case ROOM3_TURN_ON:
				LED_vTurnOn(ROOMS_PORT,ROOM3_PIN);
 974:	84 e4       	ldi	r24, 0x44	; 68
 976:	62 e0       	ldi	r22, 0x02	; 2
 978:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
			break;
 97c:	68 cf       	rjmp	.-304    	; 0x84e <main+0x4c>
			
			case ROOM4_TURN_ON:
				LED_vTurnOn(ROOMS_PORT,ROOM4_PIN);
 97e:	84 e4       	ldi	r24, 0x44	; 68
 980:	63 e0       	ldi	r22, 0x03	; 3
 982:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
			break;
 986:	63 cf       	rjmp	.-314    	; 0x84e <main+0x4c>
			
			case TV_TURN_ON:
				LED_vTurnOn(ROOMS_PORT,TV_PIN);
 988:	84 e4       	ldi	r24, 0x44	; 68
 98a:	64 e0       	ldi	r22, 0x04	; 4
 98c:	0e 94 bc 03 	call	0x778	; 0x778 <LED_vTurnOn>
			break;	
 990:	5e cf       	rjmp	.-324    	; 0x84e <main+0x4c>
			
			case AIR_COND_TURN_ON:
				Timer_CTC_Init_interrupt();
 992:	0e 94 b0 05 	call	0xb60	; 0xb60 <Timer_CTC_Init_interrupt>
				DC_Motor_Start(AIR_COND_PORT,AIR_COND_PIN,AIR_COND_EN_PIN);
 996:	83 e4       	ldi	r24, 0x43	; 67
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	42 e0       	ldi	r20, 0x02	; 2
 99c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DC_Motor_Start>
			break;
 9a0:	56 cf       	rjmp	.-340    	; 0x84e <main+0x4c>
			/*********************************************************/
			
			/****************slave ask to off a room********************/
				case ROOM1_TURN_OFF:
					LED_vTurnOFF(ROOMS_PORT,ROOM1_PIN);
 9a2:	84 e4       	ldi	r24, 0x44	; 68
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 9aa:	51 cf       	rjmp	.-350    	; 0x84e <main+0x4c>
				
				case ROOM2_TURN_OFF:
					LED_vTurnOFF(ROOMS_PORT,ROOM2_PIN);
 9ac:	84 e4       	ldi	r24, 0x44	; 68
 9ae:	61 e0       	ldi	r22, 0x01	; 1
 9b0:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 9b4:	4c cf       	rjmp	.-360    	; 0x84e <main+0x4c>
				
				case ROOM3_TURN_OFF:
					LED_vTurnOFF(ROOMS_PORT,ROOM3_PIN);
 9b6:	84 e4       	ldi	r24, 0x44	; 68
 9b8:	62 e0       	ldi	r22, 0x02	; 2
 9ba:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 9be:	47 cf       	rjmp	.-370    	; 0x84e <main+0x4c>
				
				case ROOM4_TURN_OFF:
					LED_vTurnOFF(ROOMS_PORT,ROOM4_PIN);
 9c0:	84 e4       	ldi	r24, 0x44	; 68
 9c2:	63 e0       	ldi	r22, 0x03	; 3
 9c4:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 9c8:	42 cf       	rjmp	.-380    	; 0x84e <main+0x4c>
				
				case TV_TURN_OFF:
					LED_vTurnOFF(ROOMS_PORT,TV_PIN);
 9ca:	84 e4       	ldi	r24, 0x44	; 68
 9cc:	64 e0       	ldi	r22, 0x04	; 4
 9ce:	0e 94 c0 03 	call	0x780	; 0x780 <LED_vTurnOFF>
				break;
 9d2:	3d cf       	rjmp	.-390    	; 0x84e <main+0x4c>
				
				case AIR_COND_TURN_OFF:
					Timer_CTC_Stop();
 9d4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <Timer_CTC_Stop>
					DC_Motor_Stop(AIR_COND_PORT,AIR_COND_PIN,AIR_COND_EN_PIN);
 9d8:	83 e4       	ldi	r24, 0x43	; 67
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	42 e0       	ldi	r20, 0x02	; 2
 9de:	0e 94 ef 03 	call	0x7de	; 0x7de <DC_Motor_Stop>
				break;
 9e2:	35 cf       	rjmp	.-406    	; 0x84e <main+0x4c>
				
				case SET_TEMP:
					Temp_user_set=SPI_SlaveReceiverchar(DUMMY_DATA);
 9e4:	8f ef       	ldi	r24, 0xFF	; 255
 9e6:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_SlaveReceiverchar>
 9ea:	80 93 60 00 	sts	0x0060, r24
				break;
 9ee:	2f cf       	rjmp	.-418    	; 0x84e <main+0x4c>

000009f0 <__vector_10>:
		
    }
}

ISR(TIMER0_COMP_vect)
{
 9f0:	1f 92       	push	r1
 9f2:	0f 92       	push	r0
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	0f 92       	push	r0
 9f8:	11 24       	eor	r1, r1
 9fa:	2f 93       	push	r18
 9fc:	3f 93       	push	r19
 9fe:	4f 93       	push	r20
 a00:	5f 93       	push	r21
 a02:	6f 93       	push	r22
 a04:	7f 93       	push	r23
 a06:	8f 93       	push	r24
 a08:	9f 93       	push	r25
 a0a:	af 93       	push	r26
 a0c:	bf 93       	push	r27
 a0e:	ef 93       	push	r30
 a10:	ff 93       	push	r31
	counter++;
 a12:	80 91 64 00 	lds	r24, 0x0064
 a16:	8f 5f       	subi	r24, 0xFF	; 255
 a18:	80 93 64 00 	sts	0x0064, r24
	if(counter>=10)
 a1c:	80 91 64 00 	lds	r24, 0x0064
 a20:	8a 30       	cpi	r24, 0x0A	; 10
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__vector_10+0x36>
 a24:	51 c0       	rjmp	.+162    	; 0xac8 <__vector_10+0xd8>
	{
		counter=0;
 a26:	10 92 64 00 	sts	0x0064, r1
		Temp_ADC_READ=(0.25*ADC_u16Read());
 a2a:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_u16Read>
 a2e:	bc 01       	movw	r22, r24
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 00 06 	call	0xc00	; 0xc00 <__floatunsisf>
 a38:	20 e0       	ldi	r18, 0x00	; 0
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	40 e8       	ldi	r20, 0x80	; 128
 a3e:	5e e3       	ldi	r21, 0x3E	; 62
 a40:	0e 94 66 06 	call	0xccc	; 0xccc <__mulsf3>
 a44:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixunssfsi>
 a48:	60 93 63 00 	sts	0x0063, r22
		if(Temp_ADC_READ>=(Temp_user_set+1))
 a4c:	20 91 63 00 	lds	r18, 0x0063
 a50:	80 91 60 00 	lds	r24, 0x0060
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	28 17       	cp	r18, r24
 a5c:	39 07       	cpc	r19, r25
 a5e:	4c f0       	brlt	.+18     	; 0xa72 <__vector_10+0x82>
		{
			DC_Motor_Start(AIR_COND_PORT,AIR_COND_PIN,AIR_COND_EN_PIN);
 a60:	83 e4       	ldi	r24, 0x43	; 67
 a62:	60 e0       	ldi	r22, 0x00	; 0
 a64:	42 e0       	ldi	r20, 0x02	; 2
 a66:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DC_Motor_Start>
			LAST_AIR_COND_STATUS=AIR_COND_IS_ON;
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	80 93 62 00 	sts	0x0062, r24
 a70:	2b c0       	rjmp	.+86     	; 0xac8 <__vector_10+0xd8>
		}
		else if(Temp_ADC_READ<=(Temp_user_set-1))
 a72:	20 91 63 00 	lds	r18, 0x0063
 a76:	80 91 60 00 	lds	r24, 0x0060
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	01 97       	sbiw	r24, 0x01	; 1
 a80:	82 17       	cp	r24, r18
 a82:	93 07       	cpc	r25, r19
 a84:	44 f0       	brlt	.+16     	; 0xa96 <__vector_10+0xa6>
		{
			DC_Motor_Stop(AIR_COND_PORT,AIR_COND_PIN,AIR_COND_EN_PIN);
 a86:	83 e4       	ldi	r24, 0x43	; 67
 a88:	60 e0       	ldi	r22, 0x00	; 0
 a8a:	42 e0       	ldi	r20, 0x02	; 2
 a8c:	0e 94 ef 03 	call	0x7de	; 0x7de <DC_Motor_Stop>
			LAST_AIR_COND_STATUS=AIR_COND_IS_OFF;
 a90:	10 92 62 00 	sts	0x0062, r1
 a94:	19 c0       	rjmp	.+50     	; 0xac8 <__vector_10+0xd8>
		}
		else if(Temp_ADC_READ==Temp_user_set)
 a96:	90 91 63 00 	lds	r25, 0x0063
 a9a:	80 91 60 00 	lds	r24, 0x0060
 a9e:	98 17       	cp	r25, r24
 aa0:	99 f4       	brne	.+38     	; 0xac8 <__vector_10+0xd8>
		{
			if(LAST_AIR_COND_STATUS==AIR_COND_IS_ON)
 aa2:	80 91 62 00 	lds	r24, 0x0062
 aa6:	81 30       	cpi	r24, 0x01	; 1
 aa8:	31 f4       	brne	.+12     	; 0xab6 <__vector_10+0xc6>
			{
				DC_Motor_Start(AIR_COND_PORT,AIR_COND_PIN,AIR_COND_EN_PIN);
 aaa:	83 e4       	ldi	r24, 0x43	; 67
 aac:	60 e0       	ldi	r22, 0x00	; 0
 aae:	42 e0       	ldi	r20, 0x02	; 2
 ab0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DC_Motor_Start>
 ab4:	09 c0       	rjmp	.+18     	; 0xac8 <__vector_10+0xd8>
			}
			else if(LAST_AIR_COND_STATUS==AIR_COND_IS_OFF)
 ab6:	80 91 62 00 	lds	r24, 0x0062
 aba:	88 23       	and	r24, r24
 abc:	29 f4       	brne	.+10     	; 0xac8 <__vector_10+0xd8>
			{
				DC_Motor_Stop(AIR_COND_PORT,AIR_COND_PIN,AIR_COND_EN_PIN);
 abe:	83 e4       	ldi	r24, 0x43	; 67
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	42 e0       	ldi	r20, 0x02	; 2
 ac4:	0e 94 ef 03 	call	0x7de	; 0x7de <DC_Motor_Stop>
			}
		}
	}	
 ac8:	ff 91       	pop	r31
 aca:	ef 91       	pop	r30
 acc:	bf 91       	pop	r27
 ace:	af 91       	pop	r26
 ad0:	9f 91       	pop	r25
 ad2:	8f 91       	pop	r24
 ad4:	7f 91       	pop	r23
 ad6:	6f 91       	pop	r22
 ad8:	5f 91       	pop	r21
 ada:	4f 91       	pop	r20
 adc:	3f 91       	pop	r19
 ade:	2f 91       	pop	r18
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <SPI_MasterInit>:
#include "SPI_driver.h"


void SPI_MasterInit(void)
{
	DIO_set_PINDir('B',4,1);		//set direction SS pin o/p
 aea:	82 e4       	ldi	r24, 0x42	; 66
 aec:	64 e0       	ldi	r22, 0x04	; 4
 aee:	41 e0       	ldi	r20, 0x01	; 1
 af0:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	DIO_set_PINDir('B',5,1);		//set direction MOSI pin o/p
 af4:	82 e4       	ldi	r24, 0x42	; 66
 af6:	65 e0       	ldi	r22, 0x05	; 5
 af8:	41 e0       	ldi	r20, 0x01	; 1
 afa:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	DIO_set_PINDir('B',7,1);		//set direction SCK pin o/p
 afe:	82 e4       	ldi	r24, 0x42	; 66
 b00:	67 e0       	ldi	r22, 0x07	; 7
 b02:	41 e0       	ldi	r20, 0x01	; 1
 b04:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
	
	SET_BIT(SPCR,MSTR);				//set direction master bit 
 b08:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPR0);				//set clk: F_CPU/16 fel master bs
 b0a:	68 9a       	sbi	0x0d, 0	; 13
	SET_BIT(SPCR,SPE);				//enable SPI hardware for master
 b0c:	6e 9a       	sbi	0x0d, 6	; 13
	
	DIO_Write('B',4,1);				//write 1 to SS pin to disable transmission 			
 b0e:	82 e4       	ldi	r24, 0x42	; 66
 b10:	64 e0       	ldi	r22, 0x04	; 4
 b12:	41 e0       	ldi	r20, 0x01	; 1
 b14:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
}
 b18:	08 95       	ret

00000b1a <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	SET_BIT(SPCR,SPE);				//enable spi hardware for slave
 b1a:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_set_PINDir('B',6,1);		//set direction MISO pin o/p
 b1c:	82 e4       	ldi	r24, 0x42	; 66
 b1e:	66 e0       	ldi	r22, 0x06	; 6
 b20:	41 e0       	ldi	r20, 0x01	; 1
 b22:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_set_PINDir>
}
 b26:	08 95       	ret

00000b28 <SPI_MasterTransmitchar>:

unsigned char SPI_MasterTransmitchar(unsigned char Data)
{
 b28:	cf 93       	push	r28
 b2a:	c8 2f       	mov	r28, r24
	DIO_Write('B',4,0);				//write 0 to SS pin to start transmission
 b2c:	82 e4       	ldi	r24, 0x42	; 66
 b2e:	64 e0       	ldi	r22, 0x04	; 4
 b30:	40 e0       	ldi	r20, 0x00	; 0
 b32:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_Write>
	SPDR=Data;						//send data to slave
 b36:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);	//wait till interrupt flag be high "serial transmission complete"
 b38:	77 9b       	sbis	0x0e, 7	; 14
 b3a:	fe cf       	rjmp	.-4      	; 0xb38 <SPI_MasterTransmitchar+0x10>
	return SPDR;					//return the exchanged data come from slave
 b3c:	8f b1       	in	r24, 0x0f	; 15
}
 b3e:	cf 91       	pop	r28
 b40:	08 95       	ret

00000b42 <SPI_SlaveReceiverchar>:

unsigned char SPI_SlaveReceiverchar(unsigned char Data)
{
	SPDR=Data;						//send data to master
 b42:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);	//wait till interrupt flag be high "serial transmission complete"
 b44:	77 9b       	sbis	0x0e, 7	; 14
 b46:	fe cf       	rjmp	.-4      	; 0xb44 <SPI_SlaveReceiverchar+0x2>
	return SPDR;					//return the exchanged data come from slave
 b48:	8f b1       	in	r24, 0x0f	; 15
 b4a:	08 95       	ret

00000b4c <Timer_CTC_Stop>:
#include <avr/io.h>
#include <avr/interrupt.h>

void Timer_CTC_Stop(void)
{
	CLR_BIT(TCCR0,CS00);
 b4c:	83 b7       	in	r24, 0x33	; 51
 b4e:	8e 7f       	andi	r24, 0xFE	; 254
 b50:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 b52:	83 b7       	in	r24, 0x33	; 51
 b54:	8d 7f       	andi	r24, 0xFD	; 253
 b56:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
 b58:	83 b7       	in	r24, 0x33	; 51
 b5a:	8b 7f       	andi	r24, 0xFB	; 251
 b5c:	83 bf       	out	0x33, r24	; 51
}
 b5e:	08 95       	ret

00000b60 <Timer_CTC_Init_interrupt>:
void Timer_CTC_Init_interrupt(void)
{
	SET_BIT(TCCR0,WGM01);			//enable CTC mode WGM01=1,WGM00=0
 b60:	83 b7       	in	r24, 0x33	; 51
 b62:	88 60       	ori	r24, 0x08	; 8
 b64:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 b66:	83 b7       	in	r24, 0x33	; 51
 b68:	8f 7b       	andi	r24, 0xBF	; 191
 b6a:	83 bf       	out	0x33, r24	; 51
	
	OCR0=80;						//load 80 in OCR0 80*0.125*(10^-4)-> byro7 lel ISR kol 10msec
 b6c:	80 e5       	ldi	r24, 0x50	; 80
 b6e:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,CS00);			//let the prescaler=1024
 b70:	83 b7       	in	r24, 0x33	; 51
 b72:	81 60       	ori	r24, 0x01	; 1
 b74:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 b76:	83 b7       	in	r24, 0x33	; 51
 b78:	8d 7f       	andi	r24, 0xFD	; 253
 b7a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); 
 b7c:	83 b7       	in	r24, 0x33	; 51
 b7e:	84 60       	ori	r24, 0x04	; 4
 b80:	83 bf       	out	0x33, r24	; 51
	
	sei();							//enable I-bet
 b82:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);			//enable ctc inttterupt bit 
 b84:	89 b7       	in	r24, 0x39	; 57
 b86:	82 60       	ori	r24, 0x02	; 2
 b88:	89 bf       	out	0x39, r24	; 57
}
 b8a:	08 95       	ret

00000b8c <Timer2_OverFlow_Init_interrupt>:

void Timer2_OverFlow_Init_interrupt(void)
{
	SET_BIT(ASSR,AS2);				//3SHAN YA5OD EL CLOCK MN EXTERNAL CRYSTAL 
 b8c:	82 b5       	in	r24, 0x22	; 34
 b8e:	88 60       	ori	r24, 0x08	; 8
 b90:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS22);			//SELECT PRESCALER 128 3shan yro7 el ISR kol sanya bzbt
 b92:	85 b5       	in	r24, 0x25	; 37
 b94:	84 60       	ori	r24, 0x04	; 4
 b96:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
 b98:	85 b5       	in	r24, 0x25	; 37
 b9a:	81 60       	ori	r24, 0x01	; 1
 b9c:	85 bd       	out	0x25, r24	; 37
	
	sei();
 b9e:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);			//enable interrupt
 ba0:	89 b7       	in	r24, 0x39	; 57
 ba2:	80 64       	ori	r24, 0x40	; 64
 ba4:	89 bf       	out	0x39, r24	; 57
 ba6:	08 95       	ret

00000ba8 <__fixunssfsi>:
 ba8:	70 d0       	rcall	.+224    	; 0xc8a <__fp_splitA>
 baa:	88 f0       	brcs	.+34     	; 0xbce <__fixunssfsi+0x26>
 bac:	9f 57       	subi	r25, 0x7F	; 127
 bae:	90 f0       	brcs	.+36     	; 0xbd4 <__fixunssfsi+0x2c>
 bb0:	b9 2f       	mov	r27, r25
 bb2:	99 27       	eor	r25, r25
 bb4:	b7 51       	subi	r27, 0x17	; 23
 bb6:	a0 f0       	brcs	.+40     	; 0xbe0 <__fixunssfsi+0x38>
 bb8:	d1 f0       	breq	.+52     	; 0xbee <__fixunssfsi+0x46>
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	1a f0       	brmi	.+6      	; 0xbca <__fixunssfsi+0x22>
 bc4:	ba 95       	dec	r27
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__fixunssfsi+0x12>
 bc8:	12 c0       	rjmp	.+36     	; 0xbee <__fixunssfsi+0x46>
 bca:	b1 30       	cpi	r27, 0x01	; 1
 bcc:	81 f0       	breq	.+32     	; 0xbee <__fixunssfsi+0x46>
 bce:	77 d0       	rcall	.+238    	; 0xcbe <__fp_zero>
 bd0:	b1 e0       	ldi	r27, 0x01	; 1
 bd2:	08 95       	ret
 bd4:	74 c0       	rjmp	.+232    	; 0xcbe <__fp_zero>
 bd6:	67 2f       	mov	r22, r23
 bd8:	78 2f       	mov	r23, r24
 bda:	88 27       	eor	r24, r24
 bdc:	b8 5f       	subi	r27, 0xF8	; 248
 bde:	39 f0       	breq	.+14     	; 0xbee <__fixunssfsi+0x46>
 be0:	b9 3f       	cpi	r27, 0xF9	; 249
 be2:	cc f3       	brlt	.-14     	; 0xbd6 <__fixunssfsi+0x2e>
 be4:	86 95       	lsr	r24
 be6:	77 95       	ror	r23
 be8:	67 95       	ror	r22
 bea:	b3 95       	inc	r27
 bec:	d9 f7       	brne	.-10     	; 0xbe4 <__fixunssfsi+0x3c>
 bee:	3e f4       	brtc	.+14     	; 0xbfe <__fixunssfsi+0x56>
 bf0:	90 95       	com	r25
 bf2:	80 95       	com	r24
 bf4:	70 95       	com	r23
 bf6:	61 95       	neg	r22
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	08 95       	ret

00000c00 <__floatunsisf>:
 c00:	e8 94       	clt
 c02:	09 c0       	rjmp	.+18     	; 0xc16 <__floatsisf+0x12>

00000c04 <__floatsisf>:
 c04:	97 fb       	bst	r25, 7
 c06:	3e f4       	brtc	.+14     	; 0xc16 <__floatsisf+0x12>
 c08:	90 95       	com	r25
 c0a:	80 95       	com	r24
 c0c:	70 95       	com	r23
 c0e:	61 95       	neg	r22
 c10:	7f 4f       	sbci	r23, 0xFF	; 255
 c12:	8f 4f       	sbci	r24, 0xFF	; 255
 c14:	9f 4f       	sbci	r25, 0xFF	; 255
 c16:	99 23       	and	r25, r25
 c18:	a9 f0       	breq	.+42     	; 0xc44 <__floatsisf+0x40>
 c1a:	f9 2f       	mov	r31, r25
 c1c:	96 e9       	ldi	r25, 0x96	; 150
 c1e:	bb 27       	eor	r27, r27
 c20:	93 95       	inc	r25
 c22:	f6 95       	lsr	r31
 c24:	87 95       	ror	r24
 c26:	77 95       	ror	r23
 c28:	67 95       	ror	r22
 c2a:	b7 95       	ror	r27
 c2c:	f1 11       	cpse	r31, r1
 c2e:	f8 cf       	rjmp	.-16     	; 0xc20 <__floatsisf+0x1c>
 c30:	fa f4       	brpl	.+62     	; 0xc70 <__floatsisf+0x6c>
 c32:	bb 0f       	add	r27, r27
 c34:	11 f4       	brne	.+4      	; 0xc3a <__floatsisf+0x36>
 c36:	60 ff       	sbrs	r22, 0
 c38:	1b c0       	rjmp	.+54     	; 0xc70 <__floatsisf+0x6c>
 c3a:	6f 5f       	subi	r22, 0xFF	; 255
 c3c:	7f 4f       	sbci	r23, 0xFF	; 255
 c3e:	8f 4f       	sbci	r24, 0xFF	; 255
 c40:	9f 4f       	sbci	r25, 0xFF	; 255
 c42:	16 c0       	rjmp	.+44     	; 0xc70 <__floatsisf+0x6c>
 c44:	88 23       	and	r24, r24
 c46:	11 f0       	breq	.+4      	; 0xc4c <__floatsisf+0x48>
 c48:	96 e9       	ldi	r25, 0x96	; 150
 c4a:	11 c0       	rjmp	.+34     	; 0xc6e <__floatsisf+0x6a>
 c4c:	77 23       	and	r23, r23
 c4e:	21 f0       	breq	.+8      	; 0xc58 <__floatsisf+0x54>
 c50:	9e e8       	ldi	r25, 0x8E	; 142
 c52:	87 2f       	mov	r24, r23
 c54:	76 2f       	mov	r23, r22
 c56:	05 c0       	rjmp	.+10     	; 0xc62 <__floatsisf+0x5e>
 c58:	66 23       	and	r22, r22
 c5a:	71 f0       	breq	.+28     	; 0xc78 <__floatsisf+0x74>
 c5c:	96 e8       	ldi	r25, 0x86	; 134
 c5e:	86 2f       	mov	r24, r22
 c60:	70 e0       	ldi	r23, 0x00	; 0
 c62:	60 e0       	ldi	r22, 0x00	; 0
 c64:	2a f0       	brmi	.+10     	; 0xc70 <__floatsisf+0x6c>
 c66:	9a 95       	dec	r25
 c68:	66 0f       	add	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	da f7       	brpl	.-10     	; 0xc66 <__floatsisf+0x62>
 c70:	88 0f       	add	r24, r24
 c72:	96 95       	lsr	r25
 c74:	87 95       	ror	r24
 c76:	97 f9       	bld	r25, 7
 c78:	08 95       	ret

00000c7a <__fp_split3>:
 c7a:	57 fd       	sbrc	r21, 7
 c7c:	90 58       	subi	r25, 0x80	; 128
 c7e:	44 0f       	add	r20, r20
 c80:	55 1f       	adc	r21, r21
 c82:	59 f0       	breq	.+22     	; 0xc9a <__fp_splitA+0x10>
 c84:	5f 3f       	cpi	r21, 0xFF	; 255
 c86:	71 f0       	breq	.+28     	; 0xca4 <__fp_splitA+0x1a>
 c88:	47 95       	ror	r20

00000c8a <__fp_splitA>:
 c8a:	88 0f       	add	r24, r24
 c8c:	97 fb       	bst	r25, 7
 c8e:	99 1f       	adc	r25, r25
 c90:	61 f0       	breq	.+24     	; 0xcaa <__fp_splitA+0x20>
 c92:	9f 3f       	cpi	r25, 0xFF	; 255
 c94:	79 f0       	breq	.+30     	; 0xcb4 <__fp_splitA+0x2a>
 c96:	87 95       	ror	r24
 c98:	08 95       	ret
 c9a:	12 16       	cp	r1, r18
 c9c:	13 06       	cpc	r1, r19
 c9e:	14 06       	cpc	r1, r20
 ca0:	55 1f       	adc	r21, r21
 ca2:	f2 cf       	rjmp	.-28     	; 0xc88 <__fp_split3+0xe>
 ca4:	46 95       	lsr	r20
 ca6:	f1 df       	rcall	.-30     	; 0xc8a <__fp_splitA>
 ca8:	08 c0       	rjmp	.+16     	; 0xcba <__fp_splitA+0x30>
 caa:	16 16       	cp	r1, r22
 cac:	17 06       	cpc	r1, r23
 cae:	18 06       	cpc	r1, r24
 cb0:	99 1f       	adc	r25, r25
 cb2:	f1 cf       	rjmp	.-30     	; 0xc96 <__fp_splitA+0xc>
 cb4:	86 95       	lsr	r24
 cb6:	71 05       	cpc	r23, r1
 cb8:	61 05       	cpc	r22, r1
 cba:	08 94       	sec
 cbc:	08 95       	ret

00000cbe <__fp_zero>:
 cbe:	e8 94       	clt

00000cc0 <__fp_szero>:
 cc0:	bb 27       	eor	r27, r27
 cc2:	66 27       	eor	r22, r22
 cc4:	77 27       	eor	r23, r23
 cc6:	cb 01       	movw	r24, r22
 cc8:	97 f9       	bld	r25, 7
 cca:	08 95       	ret

00000ccc <__mulsf3>:
 ccc:	0b d0       	rcall	.+22     	; 0xce4 <__mulsf3x>
 cce:	78 c0       	rjmp	.+240    	; 0xdc0 <__fp_round>
 cd0:	69 d0       	rcall	.+210    	; 0xda4 <__fp_pscA>
 cd2:	28 f0       	brcs	.+10     	; 0xcde <__mulsf3+0x12>
 cd4:	6e d0       	rcall	.+220    	; 0xdb2 <__fp_pscB>
 cd6:	18 f0       	brcs	.+6      	; 0xcde <__mulsf3+0x12>
 cd8:	95 23       	and	r25, r21
 cda:	09 f0       	breq	.+2      	; 0xcde <__mulsf3+0x12>
 cdc:	5a c0       	rjmp	.+180    	; 0xd92 <__fp_inf>
 cde:	5f c0       	rjmp	.+190    	; 0xd9e <__fp_nan>
 ce0:	11 24       	eor	r1, r1
 ce2:	ee cf       	rjmp	.-36     	; 0xcc0 <__fp_szero>

00000ce4 <__mulsf3x>:
 ce4:	ca df       	rcall	.-108    	; 0xc7a <__fp_split3>
 ce6:	a0 f3       	brcs	.-24     	; 0xcd0 <__mulsf3+0x4>

00000ce8 <__mulsf3_pse>:
 ce8:	95 9f       	mul	r25, r21
 cea:	d1 f3       	breq	.-12     	; 0xce0 <__mulsf3+0x14>
 cec:	95 0f       	add	r25, r21
 cee:	50 e0       	ldi	r21, 0x00	; 0
 cf0:	55 1f       	adc	r21, r21
 cf2:	62 9f       	mul	r22, r18
 cf4:	f0 01       	movw	r30, r0
 cf6:	72 9f       	mul	r23, r18
 cf8:	bb 27       	eor	r27, r27
 cfa:	f0 0d       	add	r31, r0
 cfc:	b1 1d       	adc	r27, r1
 cfe:	63 9f       	mul	r22, r19
 d00:	aa 27       	eor	r26, r26
 d02:	f0 0d       	add	r31, r0
 d04:	b1 1d       	adc	r27, r1
 d06:	aa 1f       	adc	r26, r26
 d08:	64 9f       	mul	r22, r20
 d0a:	66 27       	eor	r22, r22
 d0c:	b0 0d       	add	r27, r0
 d0e:	a1 1d       	adc	r26, r1
 d10:	66 1f       	adc	r22, r22
 d12:	82 9f       	mul	r24, r18
 d14:	22 27       	eor	r18, r18
 d16:	b0 0d       	add	r27, r0
 d18:	a1 1d       	adc	r26, r1
 d1a:	62 1f       	adc	r22, r18
 d1c:	73 9f       	mul	r23, r19
 d1e:	b0 0d       	add	r27, r0
 d20:	a1 1d       	adc	r26, r1
 d22:	62 1f       	adc	r22, r18
 d24:	83 9f       	mul	r24, r19
 d26:	a0 0d       	add	r26, r0
 d28:	61 1d       	adc	r22, r1
 d2a:	22 1f       	adc	r18, r18
 d2c:	74 9f       	mul	r23, r20
 d2e:	33 27       	eor	r19, r19
 d30:	a0 0d       	add	r26, r0
 d32:	61 1d       	adc	r22, r1
 d34:	23 1f       	adc	r18, r19
 d36:	84 9f       	mul	r24, r20
 d38:	60 0d       	add	r22, r0
 d3a:	21 1d       	adc	r18, r1
 d3c:	82 2f       	mov	r24, r18
 d3e:	76 2f       	mov	r23, r22
 d40:	6a 2f       	mov	r22, r26
 d42:	11 24       	eor	r1, r1
 d44:	9f 57       	subi	r25, 0x7F	; 127
 d46:	50 40       	sbci	r21, 0x00	; 0
 d48:	8a f0       	brmi	.+34     	; 0xd6c <__mulsf3_pse+0x84>
 d4a:	e1 f0       	breq	.+56     	; 0xd84 <__mulsf3_pse+0x9c>
 d4c:	88 23       	and	r24, r24
 d4e:	4a f0       	brmi	.+18     	; 0xd62 <__mulsf3_pse+0x7a>
 d50:	ee 0f       	add	r30, r30
 d52:	ff 1f       	adc	r31, r31
 d54:	bb 1f       	adc	r27, r27
 d56:	66 1f       	adc	r22, r22
 d58:	77 1f       	adc	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	91 50       	subi	r25, 0x01	; 1
 d5e:	50 40       	sbci	r21, 0x00	; 0
 d60:	a9 f7       	brne	.-22     	; 0xd4c <__mulsf3_pse+0x64>
 d62:	9e 3f       	cpi	r25, 0xFE	; 254
 d64:	51 05       	cpc	r21, r1
 d66:	70 f0       	brcs	.+28     	; 0xd84 <__mulsf3_pse+0x9c>
 d68:	14 c0       	rjmp	.+40     	; 0xd92 <__fp_inf>
 d6a:	aa cf       	rjmp	.-172    	; 0xcc0 <__fp_szero>
 d6c:	5f 3f       	cpi	r21, 0xFF	; 255
 d6e:	ec f3       	brlt	.-6      	; 0xd6a <__mulsf3_pse+0x82>
 d70:	98 3e       	cpi	r25, 0xE8	; 232
 d72:	dc f3       	brlt	.-10     	; 0xd6a <__mulsf3_pse+0x82>
 d74:	86 95       	lsr	r24
 d76:	77 95       	ror	r23
 d78:	67 95       	ror	r22
 d7a:	b7 95       	ror	r27
 d7c:	f7 95       	ror	r31
 d7e:	e7 95       	ror	r30
 d80:	9f 5f       	subi	r25, 0xFF	; 255
 d82:	c1 f7       	brne	.-16     	; 0xd74 <__mulsf3_pse+0x8c>
 d84:	fe 2b       	or	r31, r30
 d86:	88 0f       	add	r24, r24
 d88:	91 1d       	adc	r25, r1
 d8a:	96 95       	lsr	r25
 d8c:	87 95       	ror	r24
 d8e:	97 f9       	bld	r25, 7
 d90:	08 95       	ret

00000d92 <__fp_inf>:
 d92:	97 f9       	bld	r25, 7
 d94:	9f 67       	ori	r25, 0x7F	; 127
 d96:	80 e8       	ldi	r24, 0x80	; 128
 d98:	70 e0       	ldi	r23, 0x00	; 0
 d9a:	60 e0       	ldi	r22, 0x00	; 0
 d9c:	08 95       	ret

00000d9e <__fp_nan>:
 d9e:	9f ef       	ldi	r25, 0xFF	; 255
 da0:	80 ec       	ldi	r24, 0xC0	; 192
 da2:	08 95       	ret

00000da4 <__fp_pscA>:
 da4:	00 24       	eor	r0, r0
 da6:	0a 94       	dec	r0
 da8:	16 16       	cp	r1, r22
 daa:	17 06       	cpc	r1, r23
 dac:	18 06       	cpc	r1, r24
 dae:	09 06       	cpc	r0, r25
 db0:	08 95       	ret

00000db2 <__fp_pscB>:
 db2:	00 24       	eor	r0, r0
 db4:	0a 94       	dec	r0
 db6:	12 16       	cp	r1, r18
 db8:	13 06       	cpc	r1, r19
 dba:	14 06       	cpc	r1, r20
 dbc:	05 06       	cpc	r0, r21
 dbe:	08 95       	ret

00000dc0 <__fp_round>:
 dc0:	09 2e       	mov	r0, r25
 dc2:	03 94       	inc	r0
 dc4:	00 0c       	add	r0, r0
 dc6:	11 f4       	brne	.+4      	; 0xdcc <__fp_round+0xc>
 dc8:	88 23       	and	r24, r24
 dca:	52 f0       	brmi	.+20     	; 0xde0 <__fp_round+0x20>
 dcc:	bb 0f       	add	r27, r27
 dce:	40 f4       	brcc	.+16     	; 0xde0 <__fp_round+0x20>
 dd0:	bf 2b       	or	r27, r31
 dd2:	11 f4       	brne	.+4      	; 0xdd8 <__fp_round+0x18>
 dd4:	60 ff       	sbrs	r22, 0
 dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__fp_round+0x20>
 dd8:	6f 5f       	subi	r22, 0xFF	; 255
 dda:	7f 4f       	sbci	r23, 0xFF	; 255
 ddc:	8f 4f       	sbci	r24, 0xFF	; 255
 dde:	9f 4f       	sbci	r25, 0xFF	; 255
 de0:	08 95       	ret

00000de2 <_exit>:
 de2:	f8 94       	cli

00000de4 <__stop_program>:
 de4:	ff cf       	rjmp	.-2      	; 0xde4 <__stop_program>
