
Master_B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000224  00800060  00001c9e  00001d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800284  00800284  00001f56  2**0
                  ALLOC
  3 .stab         00001890  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00003d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db3  00000000  00000000  00003ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  00005c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ca  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  000077e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00007cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a90  00000000  00000000  000082b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_1>
       8:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 04 	call	0x94c	; 0x94c <main>
      8a:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_set_PINDir>:
#include "DIO_driver.h"
#include "MACROS.h"

void DIO_set_PINDir(unsigned char portname,unsigned char pinnumber,unsigned char Direction) //EX: ('A',0,1)
{
	switch(portname)
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <DIO_set_PINDir+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_set_PINDir+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <DIO_set_PINDir+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <DIO_set_PINDir+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_set_PINDir+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_set_PINDir+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <DIO_set_PINDir+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_set_PINDir+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_set_PINDir+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <DIO_set_PINDir+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_set_PINDir+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <DIO_set_PINDir+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_set_PINDir+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_set_PINDir+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_set_PINDir+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_set_PINDir+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <DIO_set_PINDir+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_set_PINDir+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_set_PINDir+0xe8>
	{
		case 'A':
		case 'a':
		if(Direction==1)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <DIO_set_PINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_set_PINDir+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_set_PINDir+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,pinnumber);
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_set_PINDir+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_set_PINDir+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(Direction==1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DIO_set_PINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_set_PINDir+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_set_PINDir+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_set_PINDir+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_set_PINDir+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(Direction==1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <DIO_set_PINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_set_PINDir+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_set_PINDir+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_set_PINDir+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_set_PINDir+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(Direction==1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <DIO_set_PINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_set_PINDir+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_set_PINDir+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_set_PINDir+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_set_PINDir+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <DIO_Write>:
	}
}

void DIO_Write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)//EX: ('A',0,1)
{
	switch(portname)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_Write+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_Write+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_Write+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_Write+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_Write+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_Write+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_Write+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_Write+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_Write+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_Write+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_Write+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <DIO_Write+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_Write+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_Write+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_Write+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_Write+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_Write+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_Write+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_Write+0xe8>
	{
		case 'A':
		case 'a':
		if(outputvalue==1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_Write+0x58>
		{
			SET_BIT(PORTA,pinnumber);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_Write+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_Write+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTA,pinnumber);
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_Write+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_Write+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(outputvalue==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <DIO_Write+0x92>
		{
			SET_BIT(PORTB,pinnumber);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_Write+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_Write+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_Write+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_Write+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(outputvalue==1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <DIO_Write+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_Write+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_Write+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTC,pinnumber);
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_Write+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_Write+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(outputvalue==1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_Write+0x106>
		{
			SET_BIT(PORTD,pinnumber);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_Write+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_Write+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_Write+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_Write+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <DIO_u8read>:
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	unsigned char return_value=0;
	switch(portname)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_u8read+0x6>
     2da:	4e c0       	rjmp	.+156    	; 0x378 <DIO_u8read+0xa2>
     2dc:	85 34       	cpi	r24, 0x45	; 69
     2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_u8read+0x1a>
     2e0:	82 34       	cpi	r24, 0x42	; 66
     2e2:	31 f1       	breq	.+76     	; 0x330 <DIO_u8read+0x5a>
     2e4:	83 34       	cpi	r24, 0x43	; 67
     2e6:	b0 f5       	brcc	.+108    	; 0x354 <DIO_u8read+0x7e>
     2e8:	81 34       	cpi	r24, 0x41	; 65
     2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_u8read+0x18>
     2ec:	57 c0       	rjmp	.+174    	; 0x39c <DIO_u8read+0xc6>
     2ee:	0e c0       	rjmp	.+28     	; 0x30c <DIO_u8read+0x36>
     2f0:	82 36       	cpi	r24, 0x62	; 98
     2f2:	f1 f0       	breq	.+60     	; 0x330 <DIO_u8read+0x5a>
     2f4:	83 36       	cpi	r24, 0x63	; 99
     2f6:	20 f4       	brcc	.+8      	; 0x300 <DIO_u8read+0x2a>
     2f8:	81 36       	cpi	r24, 0x61	; 97
     2fa:	09 f0       	breq	.+2      	; 0x2fe <DIO_u8read+0x28>
     2fc:	4f c0       	rjmp	.+158    	; 0x39c <DIO_u8read+0xc6>
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <DIO_u8read+0x36>
     300:	83 36       	cpi	r24, 0x63	; 99
     302:	41 f1       	breq	.+80     	; 0x354 <DIO_u8read+0x7e>
     304:	84 36       	cpi	r24, 0x64	; 100
     306:	09 f0       	breq	.+2      	; 0x30a <DIO_u8read+0x34>
     308:	49 c0       	rjmp	.+146    	; 0x39c <DIO_u8read+0xc6>
     30a:	36 c0       	rjmp	.+108    	; 0x378 <DIO_u8read+0xa2>
	{
		case 'A':
		case 'a':
		return_value=READ_BIT(PINA,pinnumber);
     30c:	29 b3       	in	r18, 0x19	; 25
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	06 2e       	mov	r0, r22
     314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8read+0x44>
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8read+0x40>
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	82 23       	and	r24, r18
     322:	93 23       	and	r25, r19
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8read+0x54>
     326:	95 95       	asr	r25
     328:	87 95       	ror	r24
     32a:	6a 95       	dec	r22
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8read+0x50>
		break;
     32e:	08 95       	ret
		
		case 'B':
		case 'b':
		return_value=READ_BIT(PINB,pinnumber);
     330:	26 b3       	in	r18, 0x16	; 22
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	06 2e       	mov	r0, r22
     338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8read+0x68>
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	0a 94       	dec	r0
     340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8read+0x64>
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	82 23       	and	r24, r18
     346:	93 23       	and	r25, r19
     348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8read+0x78>
     34a:	95 95       	asr	r25
     34c:	87 95       	ror	r24
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8read+0x74>
		break;
     352:	08 95       	ret
		
		case 'C':
		case 'c':
		return_value=READ_BIT(PINC,pinnumber);
     354:	23 b3       	in	r18, 0x13	; 19
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	06 2e       	mov	r0, r22
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_u8read+0x8c>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_u8read+0x88>
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	82 23       	and	r24, r18
     36a:	93 23       	and	r25, r19
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_u8read+0x9c>
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	6a 95       	dec	r22
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_u8read+0x98>
		break;
     376:	08 95       	ret
		
		case 'D':
		case 'd':
		return_value=READ_BIT(PIND,pinnumber);
     378:	20 b3       	in	r18, 0x10	; 16
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	06 2e       	mov	r0, r22
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_u8read+0xb0>
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_u8read+0xac>
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	82 23       	and	r24, r18
     38e:	93 23       	and	r25, r19
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8read+0xc0>
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	6a 95       	dec	r22
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8read+0xbc>
		break;
     39a:	08 95       	ret
	}
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	unsigned char return_value=0;
     39c:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	return return_value;
}
     39e:	08 95       	ret

000003a0 <DIO_Toggle>:

void DIO_Toggle(unsigned char portname,unsigned char pinnumber)//EX: ('A',0)
{
	switch(portname)
     3a0:	84 34       	cpi	r24, 0x44	; 68
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <DIO_Toggle+0x6>
     3a4:	3d c0       	rjmp	.+122    	; 0x420 <DIO_Toggle+0x80>
     3a6:	85 34       	cpi	r24, 0x45	; 69
     3a8:	40 f4       	brcc	.+16     	; 0x3ba <DIO_Toggle+0x1a>
     3aa:	82 34       	cpi	r24, 0x42	; 66
     3ac:	f9 f0       	breq	.+62     	; 0x3ec <DIO_Toggle+0x4c>
     3ae:	83 34       	cpi	r24, 0x43	; 67
     3b0:	50 f5       	brcc	.+84     	; 0x406 <DIO_Toggle+0x66>
     3b2:	81 34       	cpi	r24, 0x41	; 65
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <DIO_Toggle+0x18>
     3b6:	40 c0       	rjmp	.+128    	; 0x438 <DIO_Toggle+0x98>
     3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <DIO_Toggle+0x32>
     3ba:	82 36       	cpi	r24, 0x62	; 98
     3bc:	b9 f0       	breq	.+46     	; 0x3ec <DIO_Toggle+0x4c>
     3be:	83 36       	cpi	r24, 0x63	; 99
     3c0:	18 f4       	brcc	.+6      	; 0x3c8 <DIO_Toggle+0x28>
     3c2:	81 36       	cpi	r24, 0x61	; 97
     3c4:	c9 f5       	brne	.+114    	; 0x438 <DIO_Toggle+0x98>
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <DIO_Toggle+0x32>
     3c8:	83 36       	cpi	r24, 0x63	; 99
     3ca:	e9 f0       	breq	.+58     	; 0x406 <DIO_Toggle+0x66>
     3cc:	84 36       	cpi	r24, 0x64	; 100
     3ce:	a1 f5       	brne	.+104    	; 0x438 <DIO_Toggle+0x98>
     3d0:	27 c0       	rjmp	.+78     	; 0x420 <DIO_Toggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
     3d2:	2b b3       	in	r18, 0x1b	; 27
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	ac 01       	movw	r20, r24
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_Toggle+0x40>
     3dc:	44 0f       	add	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	6a 95       	dec	r22
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_Toggle+0x3c>
     3e4:	ba 01       	movw	r22, r20
     3e6:	62 27       	eor	r22, r18
     3e8:	6b bb       	out	0x1b, r22	; 27
		break;
     3ea:	08 95       	ret
		
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
     3ec:	28 b3       	in	r18, 0x18	; 24
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	ac 01       	movw	r20, r24
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_Toggle+0x5a>
     3f6:	44 0f       	add	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	6a 95       	dec	r22
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_Toggle+0x56>
     3fe:	ba 01       	movw	r22, r20
     400:	62 27       	eor	r22, r18
     402:	68 bb       	out	0x18, r22	; 24
		break;
     404:	08 95       	ret
		
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
     406:	25 b3       	in	r18, 0x15	; 21
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	ac 01       	movw	r20, r24
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_Toggle+0x74>
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	6a 95       	dec	r22
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_Toggle+0x70>
     418:	ba 01       	movw	r22, r20
     41a:	62 27       	eor	r22, r18
     41c:	65 bb       	out	0x15, r22	; 21
		break;
     41e:	08 95       	ret
		
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
     420:	22 b3       	in	r18, 0x12	; 18
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	ac 01       	movw	r20, r24
     428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_Toggle+0x8e>
     42a:	44 0f       	add	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_Toggle+0x8a>
     432:	ba 01       	movw	r22, r20
     434:	62 27       	eor	r22, r18
     436:	62 bb       	out	0x12, r22	; 18
     438:	08 95       	ret

0000043a <DIO_SET_Port_Direction>:
	}
}

void DIO_SET_Port_Direction(unsigned char portname,unsigned char direction)//EX: ('A',0xFF)
{
	switch(portname)
     43a:	84 34       	cpi	r24, 0x44	; 68
     43c:	d9 f0       	breq	.+54     	; 0x474 <DIO_SET_Port_Direction+0x3a>
     43e:	85 34       	cpi	r24, 0x45	; 69
     440:	38 f4       	brcc	.+14     	; 0x450 <DIO_SET_Port_Direction+0x16>
     442:	82 34       	cpi	r24, 0x42	; 66
     444:	99 f0       	breq	.+38     	; 0x46c <DIO_SET_Port_Direction+0x32>
     446:	83 34       	cpi	r24, 0x43	; 67
     448:	98 f4       	brcc	.+38     	; 0x470 <DIO_SET_Port_Direction+0x36>
     44a:	81 34       	cpi	r24, 0x41	; 65
     44c:	a1 f4       	brne	.+40     	; 0x476 <DIO_SET_Port_Direction+0x3c>
     44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_SET_Port_Direction+0x2e>
     450:	82 36       	cpi	r24, 0x62	; 98
     452:	61 f0       	breq	.+24     	; 0x46c <DIO_SET_Port_Direction+0x32>
     454:	83 36       	cpi	r24, 0x63	; 99
     456:	18 f4       	brcc	.+6      	; 0x45e <DIO_SET_Port_Direction+0x24>
     458:	81 36       	cpi	r24, 0x61	; 97
     45a:	69 f4       	brne	.+26     	; 0x476 <DIO_SET_Port_Direction+0x3c>
     45c:	05 c0       	rjmp	.+10     	; 0x468 <DIO_SET_Port_Direction+0x2e>
     45e:	83 36       	cpi	r24, 0x63	; 99
     460:	39 f0       	breq	.+14     	; 0x470 <DIO_SET_Port_Direction+0x36>
     462:	84 36       	cpi	r24, 0x64	; 100
     464:	41 f4       	brne	.+16     	; 0x476 <DIO_SET_Port_Direction+0x3c>
     466:	06 c0       	rjmp	.+12     	; 0x474 <DIO_SET_Port_Direction+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
     468:	6a bb       	out	0x1a, r22	; 26
		break;
     46a:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB=direction;
     46c:	67 bb       	out	0x17, r22	; 23
		break;
     46e:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=direction;
     470:	64 bb       	out	0x14, r22	; 20
		break;
     472:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=direction;
     474:	61 bb       	out	0x11, r22	; 17
     476:	08 95       	ret

00000478 <DIO_WRITE_PORT>:
	}
}

void DIO_WRITE_PORT(unsigned char portname, unsigned char outputvalue)//EX: ('A',0xFF)
{
	switch(portname)
     478:	84 34       	cpi	r24, 0x44	; 68
     47a:	d9 f0       	breq	.+54     	; 0x4b2 <DIO_WRITE_PORT+0x3a>
     47c:	85 34       	cpi	r24, 0x45	; 69
     47e:	38 f4       	brcc	.+14     	; 0x48e <DIO_WRITE_PORT+0x16>
     480:	82 34       	cpi	r24, 0x42	; 66
     482:	99 f0       	breq	.+38     	; 0x4aa <DIO_WRITE_PORT+0x32>
     484:	83 34       	cpi	r24, 0x43	; 67
     486:	98 f4       	brcc	.+38     	; 0x4ae <DIO_WRITE_PORT+0x36>
     488:	81 34       	cpi	r24, 0x41	; 65
     48a:	a1 f4       	brne	.+40     	; 0x4b4 <DIO_WRITE_PORT+0x3c>
     48c:	0c c0       	rjmp	.+24     	; 0x4a6 <DIO_WRITE_PORT+0x2e>
     48e:	82 36       	cpi	r24, 0x62	; 98
     490:	61 f0       	breq	.+24     	; 0x4aa <DIO_WRITE_PORT+0x32>
     492:	83 36       	cpi	r24, 0x63	; 99
     494:	18 f4       	brcc	.+6      	; 0x49c <DIO_WRITE_PORT+0x24>
     496:	81 36       	cpi	r24, 0x61	; 97
     498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_WRITE_PORT+0x3c>
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_WRITE_PORT+0x2e>
     49c:	83 36       	cpi	r24, 0x63	; 99
     49e:	39 f0       	breq	.+14     	; 0x4ae <DIO_WRITE_PORT+0x36>
     4a0:	84 36       	cpi	r24, 0x64	; 100
     4a2:	41 f4       	brne	.+16     	; 0x4b4 <DIO_WRITE_PORT+0x3c>
     4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <DIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=outputvalue;
     4a6:	6b bb       	out	0x1b, r22	; 27
		break;
     4a8:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=outputvalue;
     4aa:	68 bb       	out	0x18, r22	; 24
		break;
     4ac:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=outputvalue;
     4ae:	65 bb       	out	0x15, r22	; 21
		break;
     4b0:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=outputvalue;
     4b2:	62 bb       	out	0x12, r22	; 18
     4b4:	08 95       	ret

000004b6 <DIO_Read_PORT>:
}

unsigned char DIO_Read_PORT(unsigned char portname)
{
	unsigned char return_value=0;
	switch(portname)
     4b6:	84 34       	cpi	r24, 0x44	; 68
     4b8:	d9 f0       	breq	.+54     	; 0x4f0 <DIO_Read_PORT+0x3a>
     4ba:	85 34       	cpi	r24, 0x45	; 69
     4bc:	38 f4       	brcc	.+14     	; 0x4cc <DIO_Read_PORT+0x16>
     4be:	82 34       	cpi	r24, 0x42	; 66
     4c0:	99 f0       	breq	.+38     	; 0x4e8 <DIO_Read_PORT+0x32>
     4c2:	83 34       	cpi	r24, 0x43	; 67
     4c4:	98 f4       	brcc	.+38     	; 0x4ec <DIO_Read_PORT+0x36>
     4c6:	81 34       	cpi	r24, 0x41	; 65
     4c8:	a9 f4       	brne	.+42     	; 0x4f4 <DIO_Read_PORT+0x3e>
     4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <DIO_Read_PORT+0x2e>
     4cc:	82 36       	cpi	r24, 0x62	; 98
     4ce:	61 f0       	breq	.+24     	; 0x4e8 <DIO_Read_PORT+0x32>
     4d0:	83 36       	cpi	r24, 0x63	; 99
     4d2:	18 f4       	brcc	.+6      	; 0x4da <DIO_Read_PORT+0x24>
     4d4:	81 36       	cpi	r24, 0x61	; 97
     4d6:	71 f4       	brne	.+28     	; 0x4f4 <DIO_Read_PORT+0x3e>
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <DIO_Read_PORT+0x2e>
     4da:	83 36       	cpi	r24, 0x63	; 99
     4dc:	39 f0       	breq	.+14     	; 0x4ec <DIO_Read_PORT+0x36>
     4de:	84 36       	cpi	r24, 0x64	; 100
     4e0:	49 f4       	brne	.+18     	; 0x4f4 <DIO_Read_PORT+0x3e>
     4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <DIO_Read_PORT+0x3a>
	{
		case 'A':
		case 'a':
		return_value=PINA;
     4e4:	89 b3       	in	r24, 0x19	; 25
		break;
     4e6:	08 95       	ret
		
		case 'B':
		case 'b':
		return_value=PINB;
     4e8:	86 b3       	in	r24, 0x16	; 22
		break;
     4ea:	08 95       	ret
		
		case 'C':
		case 'c':
		return_value=PINC;
     4ec:	83 b3       	in	r24, 0x13	; 19
		break;
     4ee:	08 95       	ret
		
		case 'D':
		case 'd':
		return_value=PIND;
     4f0:	80 b3       	in	r24, 0x10	; 16
		break;
     4f2:	08 95       	ret
	}
}

unsigned char DIO_Read_PORT(unsigned char portname)
{
	unsigned char return_value=0;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
		
	}
	return return_value;
}
     4f6:	08 95       	ret

000004f8 <DIO_vConnectPullup>:

void DIO_vConnectPullup(unsigned char portname,unsigned char pinnumber,unsigned char Connect_PullUp)
{
	switch(portname)
     4f8:	84 34       	cpi	r24, 0x44	; 68
     4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_vConnectPullup+0x6>
     4fc:	71 c0       	rjmp	.+226    	; 0x5e0 <DIO_vConnectPullup+0xe8>
     4fe:	85 34       	cpi	r24, 0x45	; 69
     500:	48 f4       	brcc	.+18     	; 0x514 <DIO_vConnectPullup+0x1c>
     502:	82 34       	cpi	r24, 0x42	; 66
     504:	99 f1       	breq	.+102    	; 0x56c <DIO_vConnectPullup+0x74>
     506:	83 34       	cpi	r24, 0x43	; 67
     508:	08 f0       	brcs	.+2      	; 0x50c <DIO_vConnectPullup+0x14>
     50a:	4d c0       	rjmp	.+154    	; 0x5a6 <DIO_vConnectPullup+0xae>
     50c:	81 34       	cpi	r24, 0x41	; 65
     50e:	09 f0       	breq	.+2      	; 0x512 <DIO_vConnectPullup+0x1a>
     510:	83 c0       	rjmp	.+262    	; 0x618 <DIO_vConnectPullup+0x120>
     512:	0f c0       	rjmp	.+30     	; 0x532 <DIO_vConnectPullup+0x3a>
     514:	82 36       	cpi	r24, 0x62	; 98
     516:	51 f1       	breq	.+84     	; 0x56c <DIO_vConnectPullup+0x74>
     518:	83 36       	cpi	r24, 0x63	; 99
     51a:	20 f4       	brcc	.+8      	; 0x524 <DIO_vConnectPullup+0x2c>
     51c:	81 36       	cpi	r24, 0x61	; 97
     51e:	09 f0       	breq	.+2      	; 0x522 <DIO_vConnectPullup+0x2a>
     520:	7b c0       	rjmp	.+246    	; 0x618 <DIO_vConnectPullup+0x120>
     522:	07 c0       	rjmp	.+14     	; 0x532 <DIO_vConnectPullup+0x3a>
     524:	83 36       	cpi	r24, 0x63	; 99
     526:	09 f4       	brne	.+2      	; 0x52a <DIO_vConnectPullup+0x32>
     528:	3e c0       	rjmp	.+124    	; 0x5a6 <DIO_vConnectPullup+0xae>
     52a:	84 36       	cpi	r24, 0x64	; 100
     52c:	09 f0       	breq	.+2      	; 0x530 <DIO_vConnectPullup+0x38>
     52e:	74 c0       	rjmp	.+232    	; 0x618 <DIO_vConnectPullup+0x120>
     530:	57 c0       	rjmp	.+174    	; 0x5e0 <DIO_vConnectPullup+0xe8>
	{
		case 'A':
		case 'a':
		if (Connect_PullUp==1)
     532:	41 30       	cpi	r20, 0x01	; 1
     534:	69 f4       	brne	.+26     	; 0x550 <DIO_vConnectPullup+0x58>
		{
			SET_BIT(PORTA,pinnumber);
     536:	2b b3       	in	r18, 0x1b	; 27
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	ac 01       	movw	r20, r24
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_vConnectPullup+0x4c>
     540:	44 0f       	add	r20, r20
     542:	55 1f       	adc	r21, r21
     544:	6a 95       	dec	r22
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_vConnectPullup+0x48>
     548:	ba 01       	movw	r22, r20
     54a:	62 2b       	or	r22, r18
     54c:	6b bb       	out	0x1b, r22	; 27
     54e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     550:	2b b3       	in	r18, 0x1b	; 27
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	ac 01       	movw	r20, r24
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_vConnectPullup+0x66>
     55a:	44 0f       	add	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	6a 95       	dec	r22
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_vConnectPullup+0x62>
     562:	ba 01       	movw	r22, r20
     564:	60 95       	com	r22
     566:	62 23       	and	r22, r18
     568:	6b bb       	out	0x1b, r22	; 27
     56a:	08 95       	ret
		break;
		
		
		case 'B':
		case 'b':
		if(Connect_PullUp==1)
     56c:	41 30       	cpi	r20, 0x01	; 1
     56e:	69 f4       	brne	.+26     	; 0x58a <DIO_vConnectPullup+0x92>
		{
			SET_BIT(PORTB,pinnumber);
     570:	28 b3       	in	r18, 0x18	; 24
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	ac 01       	movw	r20, r24
     578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_vConnectPullup+0x86>
     57a:	44 0f       	add	r20, r20
     57c:	55 1f       	adc	r21, r21
     57e:	6a 95       	dec	r22
     580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_vConnectPullup+0x82>
     582:	ba 01       	movw	r22, r20
     584:	62 2b       	or	r22, r18
     586:	68 bb       	out	0x18, r22	; 24
     588:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     58a:	28 b3       	in	r18, 0x18	; 24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	ac 01       	movw	r20, r24
     592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_vConnectPullup+0xa0>
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_vConnectPullup+0x9c>
     59c:	ba 01       	movw	r22, r20
     59e:	60 95       	com	r22
     5a0:	62 23       	and	r22, r18
     5a2:	68 bb       	out	0x18, r22	; 24
     5a4:	08 95       	ret
		break;
		
		
		case 'C':
		case 'c':
		if(Connect_PullUp==1)
     5a6:	41 30       	cpi	r20, 0x01	; 1
     5a8:	69 f4       	brne	.+26     	; 0x5c4 <DIO_vConnectPullup+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
     5aa:	25 b3       	in	r18, 0x15	; 21
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	ac 01       	movw	r20, r24
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_vConnectPullup+0xc0>
     5b4:	44 0f       	add	r20, r20
     5b6:	55 1f       	adc	r21, r21
     5b8:	6a 95       	dec	r22
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_vConnectPullup+0xbc>
     5bc:	ba 01       	movw	r22, r20
     5be:	62 2b       	or	r22, r18
     5c0:	65 bb       	out	0x15, r22	; 21
     5c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     5c4:	25 b3       	in	r18, 0x15	; 21
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	ac 01       	movw	r20, r24
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vConnectPullup+0xda>
     5ce:	44 0f       	add	r20, r20
     5d0:	55 1f       	adc	r21, r21
     5d2:	6a 95       	dec	r22
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vConnectPullup+0xd6>
     5d6:	ba 01       	movw	r22, r20
     5d8:	60 95       	com	r22
     5da:	62 23       	and	r22, r18
     5dc:	65 bb       	out	0x15, r22	; 21
     5de:	08 95       	ret
		break;
		
		
		case 'D':
		case 'd':
		if(Connect_PullUp==1)
     5e0:	41 30       	cpi	r20, 0x01	; 1
     5e2:	69 f4       	brne	.+26     	; 0x5fe <DIO_vConnectPullup+0x106>
		{
			SET_BIT(PORTD,pinnumber);
     5e4:	22 b3       	in	r18, 0x12	; 18
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	ac 01       	movw	r20, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_vConnectPullup+0xfa>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	6a 95       	dec	r22
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_vConnectPullup+0xf6>
     5f6:	ba 01       	movw	r22, r20
     5f8:	62 2b       	or	r22, r18
     5fa:	62 bb       	out	0x12, r22	; 18
     5fc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     5fe:	22 b3       	in	r18, 0x12	; 18
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	ac 01       	movw	r20, r24
     606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_vConnectPullup+0x114>
     608:	44 0f       	add	r20, r20
     60a:	55 1f       	adc	r21, r21
     60c:	6a 95       	dec	r22
     60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_vConnectPullup+0x110>
     610:	ba 01       	movw	r22, r20
     612:	60 95       	com	r22
     614:	62 23       	and	r22, r18
     616:	62 bb       	out	0x12, r22	; 18
     618:	08 95       	ret

0000061a <DIO_Write_Low_Nibble>:
}


void DIO_Write_Low_Nibble(unsigned char portname,unsigned char value)////EX: ('B',0x08)
{
	value &=0x0F;	//b7me nfse mn 8ba2 el user 3shan law da5l value akbr mn 9
     61a:	6f 70       	andi	r22, 0x0F	; 15
	
	switch(portname)
     61c:	84 34       	cpi	r24, 0x44	; 68
     61e:	51 f1       	breq	.+84     	; 0x674 <DIO_Write_Low_Nibble+0x5a>
     620:	85 34       	cpi	r24, 0x45	; 69
     622:	38 f4       	brcc	.+14     	; 0x632 <DIO_Write_Low_Nibble+0x18>
     624:	82 34       	cpi	r24, 0x42	; 66
     626:	c1 f0       	breq	.+48     	; 0x658 <DIO_Write_Low_Nibble+0x3e>
     628:	83 34       	cpi	r24, 0x43	; 67
     62a:	e8 f4       	brcc	.+58     	; 0x666 <DIO_Write_Low_Nibble+0x4c>
     62c:	81 34       	cpi	r24, 0x41	; 65
     62e:	41 f5       	brne	.+80     	; 0x680 <DIO_Write_Low_Nibble+0x66>
     630:	0c c0       	rjmp	.+24     	; 0x64a <DIO_Write_Low_Nibble+0x30>
     632:	82 36       	cpi	r24, 0x62	; 98
     634:	89 f0       	breq	.+34     	; 0x658 <DIO_Write_Low_Nibble+0x3e>
     636:	83 36       	cpi	r24, 0x63	; 99
     638:	18 f4       	brcc	.+6      	; 0x640 <DIO_Write_Low_Nibble+0x26>
     63a:	81 36       	cpi	r24, 0x61	; 97
     63c:	09 f5       	brne	.+66     	; 0x680 <DIO_Write_Low_Nibble+0x66>
     63e:	05 c0       	rjmp	.+10     	; 0x64a <DIO_Write_Low_Nibble+0x30>
     640:	83 36       	cpi	r24, 0x63	; 99
     642:	89 f0       	breq	.+34     	; 0x666 <DIO_Write_Low_Nibble+0x4c>
     644:	84 36       	cpi	r24, 0x64	; 100
     646:	e1 f4       	brne	.+56     	; 0x680 <DIO_Write_Low_Nibble+0x66>
     648:	15 c0       	rjmp	.+42     	; 0x674 <DIO_Write_Low_Nibble+0x5a>
	{
		case 'A':
		case 'a':
		PORTA &=0xF0;	//basfr el low nibble fel port da
     64a:	8b b3       	in	r24, 0x1b	; 27
     64c:	80 7f       	andi	r24, 0xF0	; 240
     64e:	8b bb       	out	0x1b, r24	; 27
		PORTA |=value;	//btl3 el value bt3te
     650:	8b b3       	in	r24, 0x1b	; 27
     652:	68 2b       	or	r22, r24
     654:	6b bb       	out	0x1b, r22	; 27
		break;
     656:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB &=0xF0;	//bsfr low nibble fel port da
     658:	88 b3       	in	r24, 0x18	; 24
     65a:	80 7f       	andi	r24, 0xF0	; 240
     65c:	88 bb       	out	0x18, r24	; 24
		PORTB |=value;
     65e:	88 b3       	in	r24, 0x18	; 24
     660:	68 2b       	or	r22, r24
     662:	68 bb       	out	0x18, r22	; 24
		break;
     664:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC &=0xF0;
     666:	85 b3       	in	r24, 0x15	; 21
     668:	80 7f       	andi	r24, 0xF0	; 240
     66a:	85 bb       	out	0x15, r24	; 21
		PORTC |=value;
     66c:	85 b3       	in	r24, 0x15	; 21
     66e:	68 2b       	or	r22, r24
     670:	65 bb       	out	0x15, r22	; 21
		break;
     672:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD &=0xF0;
     674:	82 b3       	in	r24, 0x12	; 18
     676:	80 7f       	andi	r24, 0xF0	; 240
     678:	82 bb       	out	0x12, r24	; 18
		PORTD |=value;
     67a:	82 b3       	in	r24, 0x12	; 18
     67c:	68 2b       	or	r22, r24
     67e:	62 bb       	out	0x12, r22	; 18
     680:	08 95       	ret

00000682 <DIO_Write_High_Nibble>:
	}
}

void DIO_Write_High_Nibble(unsigned char portname,unsigned char value)  //EX: ('a',0x02)
{
	value<<=4;		//ba7me nafse mn 8ba2 el user
     682:	62 95       	swap	r22
     684:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
     686:	84 34       	cpi	r24, 0x44	; 68
     688:	51 f1       	breq	.+84     	; 0x6de <DIO_Write_High_Nibble+0x5c>
     68a:	85 34       	cpi	r24, 0x45	; 69
     68c:	38 f4       	brcc	.+14     	; 0x69c <DIO_Write_High_Nibble+0x1a>
     68e:	82 34       	cpi	r24, 0x42	; 66
     690:	c1 f0       	breq	.+48     	; 0x6c2 <DIO_Write_High_Nibble+0x40>
     692:	83 34       	cpi	r24, 0x43	; 67
     694:	e8 f4       	brcc	.+58     	; 0x6d0 <DIO_Write_High_Nibble+0x4e>
     696:	81 34       	cpi	r24, 0x41	; 65
     698:	41 f5       	brne	.+80     	; 0x6ea <DIO_Write_High_Nibble+0x68>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <DIO_Write_High_Nibble+0x32>
     69c:	82 36       	cpi	r24, 0x62	; 98
     69e:	89 f0       	breq	.+34     	; 0x6c2 <DIO_Write_High_Nibble+0x40>
     6a0:	83 36       	cpi	r24, 0x63	; 99
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <DIO_Write_High_Nibble+0x28>
     6a4:	81 36       	cpi	r24, 0x61	; 97
     6a6:	09 f5       	brne	.+66     	; 0x6ea <DIO_Write_High_Nibble+0x68>
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <DIO_Write_High_Nibble+0x32>
     6aa:	83 36       	cpi	r24, 0x63	; 99
     6ac:	89 f0       	breq	.+34     	; 0x6d0 <DIO_Write_High_Nibble+0x4e>
     6ae:	84 36       	cpi	r24, 0x64	; 100
     6b0:	e1 f4       	brne	.+56     	; 0x6ea <DIO_Write_High_Nibble+0x68>
     6b2:	15 c0       	rjmp	.+42     	; 0x6de <DIO_Write_High_Nibble+0x5c>
	{
		case 'A':
		case 'a':
		PORTA &=0x0F;	//basfr el high nibble 3shan law fe value adema
     6b4:	8b b3       	in	r24, 0x1b	; 27
     6b6:	8f 70       	andi	r24, 0x0F	; 15
     6b8:	8b bb       	out	0x1b, r24	; 27
		PORTA |=value;	//btl3 el value bt3te
     6ba:	8b b3       	in	r24, 0x1b	; 27
     6bc:	68 2b       	or	r22, r24
     6be:	6b bb       	out	0x1b, r22	; 27
		break;
     6c0:	08 95       	ret
		
		case 'B':
		case'b':
		PORTB &=0x0F;	//basfr el high nibble
     6c2:	88 b3       	in	r24, 0x18	; 24
     6c4:	8f 70       	andi	r24, 0x0F	; 15
     6c6:	88 bb       	out	0x18, r24	; 24
		PORTB |=value;	//btl3 el value bt3te
     6c8:	88 b3       	in	r24, 0x18	; 24
     6ca:	68 2b       	or	r22, r24
     6cc:	68 bb       	out	0x18, r22	; 24
		break;
     6ce:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC &=0x0F;
     6d0:	85 b3       	in	r24, 0x15	; 21
     6d2:	8f 70       	andi	r24, 0x0F	; 15
     6d4:	85 bb       	out	0x15, r24	; 21
		PORTC |=value;
     6d6:	85 b3       	in	r24, 0x15	; 21
     6d8:	68 2b       	or	r22, r24
     6da:	65 bb       	out	0x15, r22	; 21
		break;
     6dc:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD &=0x0F;
     6de:	82 b3       	in	r24, 0x12	; 18
     6e0:	8f 70       	andi	r24, 0x0F	; 15
     6e2:	82 bb       	out	0x12, r24	; 18
		PORTD |=value;
     6e4:	82 b3       	in	r24, 0x12	; 18
     6e6:	68 2b       	or	r22, r24
     6e8:	62 bb       	out	0x12, r22	; 18
     6ea:	08 95       	ret

000006ec <EEPROM_Write>:
 */ 
#include <avr/io.h>
#include "MACROS.h"
void EEPROM_Write(unsigned short address,unsigned char data)	//dayman el write ykon bara el while 1
{
	EEARL=(char)address;	//awl 8-bit mn el address
     6ec:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);	//tany 8-bit mn el address
     6ee:	9f bb       	out	0x1f, r25	; 31
	
	EEDR=data;		//save data that you entered in data register
     6f0:	6d bb       	out	0x1d, r22	; 29
	
	SET_BIT(EECR,EEMWE);	//set master enable 3shan yebd2 ye3ml write
     6f2:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);		//set write enable to start writing 
     6f4:	e1 9a       	sbi	0x1c, 1	; 28
	
	while(READ_BIT(EECR,EEMWE));	//loop yfdl feha tol mahowa lsa by3ml writing 
     6f6:	e2 99       	sbic	0x1c, 2	; 28
     6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <EEPROM_Write+0xa>
}
     6fa:	08 95       	ret

000006fc <EEPROM_Read>:


unsigned char EEPROM_Read(unsigned short address)
{
	EEARL=(char)address;
     6fc:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     6fe:	9f bb       	out	0x1f, r25	; 31
	
	SET_BIT(EECR,EERE);
     700:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     702:	8d b3       	in	r24, 0x1d	; 29
     704:	08 95       	ret

00000706 <INT0_vInit>:
 */ 
#include "EXT._Interrupt.h"

void INT0_vInit(void)
{	
	sei();	//enable I-bit
     706:	78 94       	sei
	
	DIO_set_PINDir(INT_0_1_PORT,INT0_PIN,0);//set int0 pin input
     708:	84 e4       	ldi	r24, 0x44	; 68
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	
	SET_BIT(MCUCR,ISC00);		//go to ISR when sensing rising edge on int0 pin
     712:	85 b7       	in	r24, 0x35	; 53
     714:	81 60       	ori	r24, 0x01	; 1
     716:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
     718:	85 b7       	in	r24, 0x35	; 53
     71a:	82 60       	ori	r24, 0x02	; 2
     71c:	85 bf       	out	0x35, r24	; 53
	
	SET_BIT(GICR,INT0);
     71e:	8b b7       	in	r24, 0x3b	; 59
     720:	80 64       	ori	r24, 0x40	; 64
     722:	8b bf       	out	0x3b, r24	; 59
}
     724:	08 95       	ret

00000726 <INT1_vInit>:

void INT1_vInit(void)
{
	sei();
     726:	78 94       	sei
	
	DIO_set_PINDir(INT_0_1_PORT,INT1_PIN,0);
     728:	84 e4       	ldi	r24, 0x44	; 68
     72a:	63 e0       	ldi	r22, 0x03	; 3
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	
	SET_BIT(MCUCR,ISC00);		//go to ISR when sensing rising edge on int1 pin
     732:	85 b7       	in	r24, 0x35	; 53
     734:	81 60       	ori	r24, 0x01	; 1
     736:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
     738:	85 b7       	in	r24, 0x35	; 53
     73a:	82 60       	ori	r24, 0x02	; 2
     73c:	85 bf       	out	0x35, r24	; 53
	
	SET_BIT(GICR,INT1);
     73e:	8b b7       	in	r24, 0x3b	; 59
     740:	80 68       	ori	r24, 0x80	; 128
     742:	8b bf       	out	0x3b, r24	; 59
     744:	08 95       	ret

00000746 <send_falling_edge>:
#define F_CPU 8000000UL
#include <util/delay.h>

static void send_falling_edge(void)
{
	DIO_Write(CONTROLPORT,EN,1);				//write 1 to enable pin
     746:	82 e4       	ldi	r24, 0x42	; 66
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     750:	8f e9       	ldi	r24, 0x9F	; 159
     752:	9f e0       	ldi	r25, 0x0F	; 15
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <send_falling_edge+0xe>
     758:	00 c0       	rjmp	.+0      	; 0x75a <send_falling_edge+0x14>
     75a:	00 00       	nop
	_delay_ms(2);
	DIO_Write(CONTROLPORT,EN,0);
     75c:	82 e4       	ldi	r24, 0x42	; 66
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
     766:	8f e9       	ldi	r24, 0x9F	; 159
     768:	9f e0       	ldi	r25, 0x0F	; 15
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <send_falling_edge+0x24>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <send_falling_edge+0x2a>
     770:	00 00       	nop
	_delay_ms(2);
}
     772:	08 95       	ret

00000774 <LCD_vSend_Cmd>:

void LCD_vSend_Cmd(char cmd)					//take the commands
{
     774:	cf 93       	push	r28
     776:	c8 2f       	mov	r28, r24
	DIO_Write(CONTROLPORT,RS,0);				//write 0 to Rs 3shan da command
	send_falling_edge();
	_delay_ms(1);
	
	#elif defined four_bit_mode
	DIO_Write_High_Nibble(PORTNAME,cmd>>4);		//bab3t el hight 4 bit bto3 el cmd 3shan ana bb3t el command 3la marten
     778:	68 2f       	mov	r22, r24
     77a:	62 95       	swap	r22
     77c:	6f 70       	andi	r22, 0x0F	; 15
     77e:	81 e4       	ldi	r24, 0x41	; 65
     780:	0e 94 41 03 	call	0x682	; 0x682 <DIO_Write_High_Nibble>
	DIO_Write(CONTROLPORT,RS,0);				//3shan da command 
     784:	82 e4       	ldi	r24, 0x42	; 66
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
	send_falling_edge();
     78e:	0e 94 a3 03 	call	0x746	; 0x746 <send_falling_edge>
	DIO_Write_High_Nibble(PORTNAME,cmd);		//send least 4 bit of command
     792:	81 e4       	ldi	r24, 0x41	; 65
     794:	6c 2f       	mov	r22, r28
     796:	0e 94 41 03 	call	0x682	; 0x682 <DIO_Write_High_Nibble>
	DIO_Write(CONTROLPORT,RS,0);				//3shan da command
     79a:	82 e4       	ldi	r24, 0x42	; 66
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
	send_falling_edge();
     7a4:	0e 94 a3 03 	call	0x746	; 0x746 <send_falling_edge>
     7a8:	8f ec       	ldi	r24, 0xCF	; 207
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <LCD_vSend_Cmd+0x38>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <LCD_vSend_Cmd+0x3e>
     7b2:	00 00       	nop
	_delay_ms(1);
	
	#endif
}
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <LCD_vInit>:
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	91 ee       	ldi	r25, 0xE1	; 225
     7bc:	a4 e0       	ldi	r26, 0x04	; 4
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	a0 40       	sbci	r26, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <LCD_vInit+0x6>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <LCD_vInit+0x10>
     7c8:	00 00       	nop
	_delay_ms(1);
	
	////////four bits mode/////////
	
	#elif defined four_bit_mode
	DIO_set_PINDir(PORTNAME,4,1);				//set direction of data port
     7ca:	81 e4       	ldi	r24, 0x41	; 65
     7cc:	64 e0       	ldi	r22, 0x04	; 4
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	DIO_set_PINDir(PORTNAME,5,1);
     7d4:	81 e4       	ldi	r24, 0x41	; 65
     7d6:	65 e0       	ldi	r22, 0x05	; 5
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	DIO_set_PINDir(PORTNAME,6,1);
     7de:	81 e4       	ldi	r24, 0x41	; 65
     7e0:	66 e0       	ldi	r22, 0x06	; 6
     7e2:	41 e0       	ldi	r20, 0x01	; 1
     7e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	DIO_set_PINDir(PORTNAME,7,1);
     7e8:	81 e4       	ldi	r24, 0x41	; 65
     7ea:	67 e0       	ldi	r22, 0x07	; 7
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	
	DIO_set_PINDir(CONTROLPORT,EN,1);			//set direction of command port
     7f2:	82 e4       	ldi	r24, 0x42	; 66
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	DIO_set_PINDir(CONTROLPORT,RW,1);
     7fc:	82 e4       	ldi	r24, 0x42	; 66
     7fe:	62 e0       	ldi	r22, 0x02	; 2
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	DIO_set_PINDir(CONTROLPORT,RS,1);
     806:	82 e4       	ldi	r24, 0x42	; 66
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	
	DIO_Write(CONTROLPORT,RW,0);				//write 0 to RW pin as it data not command
     810:	82 e4       	ldi	r24, 0x42	; 66
     812:	62 e0       	ldi	r22, 0x02	; 2
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
	
	LCD_vSend_Cmd(RETURN_HOME);					//by7ot el cursor 3nd awl 5ana
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_vSend_Cmd>
     820:	af e1       	ldi	r26, 0x1F	; 31
     822:	be e4       	ldi	r27, 0x4E	; 78
     824:	11 97       	sbiw	r26, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <LCD_vInit+0x6c>
     828:	00 c0       	rjmp	.+0      	; 0x82a <LCD_vInit+0x72>
     82a:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_Cmd(FOUR_BIT);
     82c:	88 e2       	ldi	r24, 0x28	; 40
     82e:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_vSend_Cmd>
     832:	8f ec       	ldi	r24, 0xCF	; 207
     834:	97 e0       	ldi	r25, 0x07	; 7
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <LCD_vInit+0x7e>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_vInit+0x84>
     83c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_Cmd(CURSOR_ON);
     83e:	8e e0       	ldi	r24, 0x0E	; 14
     840:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_vSend_Cmd>
     844:	af ec       	ldi	r26, 0xCF	; 207
     846:	b7 e0       	ldi	r27, 0x07	; 7
     848:	11 97       	sbiw	r26, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_vInit+0x90>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_vInit+0x96>
     84e:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_Cmd(CLR_SCREEN);
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_vSend_Cmd>
     856:	8f e1       	ldi	r24, 0x1F	; 31
     858:	9e e4       	ldi	r25, 0x4E	; 78
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_vInit+0xa2>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_Cmd(ENTRY_MODE);
     862:	86 e0       	ldi	r24, 0x06	; 6
     864:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_vSend_Cmd>
     868:	af ec       	ldi	r26, 0xCF	; 207
     86a:	b7 e0       	ldi	r27, 0x07	; 7
     86c:	11 97       	sbiw	r26, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
	_delay_ms(1);
	
	#endif
}
     874:	08 95       	ret

00000876 <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
     876:	cf 93       	push	r28
     878:	c8 2f       	mov	r28, r24
	DIO_Write(CONTROLPORT,RS,1);				//write 1 3la RS 3shan de data
	send_falling_edge();					//lazm da 3shan el enable
	_delay_ms(1);
	
	#elif defined four_bit_mode
	DIO_Write_High_Nibble(PORTNAME,data>>4);			//bab3t el 4 highest bits 3shan bb3t el data 3la marten
     87a:	68 2f       	mov	r22, r24
     87c:	62 95       	swap	r22
     87e:	6f 70       	andi	r22, 0x0F	; 15
     880:	81 e4       	ldi	r24, 0x41	; 65
     882:	0e 94 41 03 	call	0x682	; 0x682 <DIO_Write_High_Nibble>
	DIO_Write(CONTROLPORT,RS,1);
     886:	82 e4       	ldi	r24, 0x42	; 66
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
	send_falling_edge();
     890:	0e 94 a3 03 	call	0x746	; 0x746 <send_falling_edge>
	DIO_Write_High_Nibble(PORTNAME,data);
     894:	81 e4       	ldi	r24, 0x41	; 65
     896:	6c 2f       	mov	r22, r28
     898:	0e 94 41 03 	call	0x682	; 0x682 <DIO_Write_High_Nibble>
	DIO_Write(CONTROLPORT,RS,1);
     89c:	82 e4       	ldi	r24, 0x42	; 66
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
	send_falling_edge();
     8a6:	0e 94 a3 03 	call	0x746	; 0x746 <send_falling_edge>
     8aa:	8f ec       	ldi	r24, 0xCF	; 207
     8ac:	97 e0       	ldi	r25, 0x07	; 7
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <LCD_vSend_char+0x38>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <LCD_vSend_char+0x3e>
     8b4:	00 00       	nop
	_delay_ms(1);
	
	#endif
}
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <LCD_vSend_String>:

void LCD_vSend_String(char *data)
{
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	ec 01       	movw	r28, r24
	while((*data)!='\0')								//tol ma howa mwslsh lel NULL
     8c0:	88 81       	ld	r24, Y
     8c2:	88 23       	and	r24, r24
     8c4:	31 f0       	breq	.+12     	; 0x8d2 <LCD_vSend_String+0x18>
	_delay_ms(1);
	
	#endif
}

void LCD_vSend_String(char *data)
     8c6:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')								//tol ma howa mwslsh lel NULL
	{
		LCD_vSend_char(*data);							//eb3t 7arf 7arf
     8c8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
	#endif
}

void LCD_vSend_String(char *data)
{
	while((*data)!='\0')								//tol ma howa mwslsh lel NULL
     8cc:	89 91       	ld	r24, Y+
     8ce:	88 23       	and	r24, r24
     8d0:	d9 f7       	brne	.-10     	; 0x8c8 <LCD_vSend_String+0xe>
	{
		LCD_vSend_char(*data);							//eb3t 7arf 7arf
		data++;
	}
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
	LCD_vSend_Cmd(CLR_SCREEN);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_vSend_Cmd>
     8de:	8f e1       	ldi	r24, 0x1F	; 31
     8e0:	9e e4       	ldi	r25, 0x4E	; 78
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <LCD_Clear_Screen+0xa>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <LCD_Clear_Screen+0x10>
     8e8:	00 00       	nop
	_delay_ms(10);
}
     8ea:	08 95       	ret

000008ec <LCD_Move_Cursor>:

void LCD_Move_Cursor(char row,char coloumn)
{
	char Cursor;
	if((row<1) || (row>2) ||(coloumn>16) || (coloumn<1))
     8ec:	28 2f       	mov	r18, r24
     8ee:	21 50       	subi	r18, 0x01	; 1
     8f0:	22 30       	cpi	r18, 0x02	; 2
     8f2:	70 f4       	brcc	.+28     	; 0x910 <LCD_Move_Cursor+0x24>
     8f4:	61 31       	cpi	r22, 0x11	; 17
     8f6:	70 f4       	brcc	.+28     	; 0x914 <LCD_Move_Cursor+0x28>
     8f8:	66 23       	and	r22, r22
     8fa:	71 f0       	breq	.+28     	; 0x918 <LCD_Move_Cursor+0x2c>
	{
		Cursor=0x80;									//b7me nfse mn el 8ba2 fa brg3o 3and awl 5ana
	}
	else if(row==1)
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	19 f4       	brne	.+6      	; 0x906 <LCD_Move_Cursor+0x1a>
	{
		Cursor=0x80+(coloumn-1);						//byw2f el cursor mkan mana 3awz fe row 1
     900:	96 2f       	mov	r25, r22
     902:	91 58       	subi	r25, 0x81	; 129
     904:	0a c0       	rjmp	.+20     	; 0x91a <LCD_Move_Cursor+0x2e>
	}
	else if(row==2)
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	41 f4       	brne	.+16     	; 0x91a <LCD_Move_Cursor+0x2e>
	{
		Cursor=0xC0+(coloumn-1);						//byw2f el cursor mkan mana 3awz fe row 2
     90a:	96 2f       	mov	r25, r22
     90c:	91 54       	subi	r25, 0x41	; 65
     90e:	05 c0       	rjmp	.+10     	; 0x91a <LCD_Move_Cursor+0x2e>
void LCD_Move_Cursor(char row,char coloumn)
{
	char Cursor;
	if((row<1) || (row>2) ||(coloumn>16) || (coloumn<1))
	{
		Cursor=0x80;									//b7me nfse mn el 8ba2 fa brg3o 3and awl 5ana
     910:	90 e8       	ldi	r25, 0x80	; 128
     912:	03 c0       	rjmp	.+6      	; 0x91a <LCD_Move_Cursor+0x2e>
     914:	90 e8       	ldi	r25, 0x80	; 128
     916:	01 c0       	rjmp	.+2      	; 0x91a <LCD_Move_Cursor+0x2e>
     918:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row==2)
	{
		Cursor=0xC0+(coloumn-1);						//byw2f el cursor mkan mana 3awz fe row 2
	}
	LCD_vSend_Cmd(Cursor);
     91a:	89 2f       	mov	r24, r25
     91c:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_vSend_Cmd>
     920:	8f ec       	ldi	r24, 0xCF	; 207
     922:	97 e0       	ldi	r25, 0x07	; 7
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <LCD_Move_Cursor+0x38>
     928:	00 c0       	rjmp	.+0      	; 0x92a <LCD_Move_Cursor+0x3e>
     92a:	00 00       	nop
	_delay_ms(1);
     92c:	08 95       	ret

0000092e <LED_vInit>:
 */ 
#include "DIO_driver.h"

void LED_vInit(unsigned char portname,unsigned char pinnumber)//EX:  ('A',0)
{
	DIO_set_PINDir(portname,pinnumber,1);
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
}
     934:	08 95       	ret

00000936 <LED_vTurnOn>:

void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)//EX:  ('A',7)
{
	DIO_Write(portname,pinnumber,1);
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
}
     93c:	08 95       	ret

0000093e <LED_vTurnOFF>:

void LED_vTurnOFF(unsigned char portname,unsigned char pinnumber)//EX:  ('A',4)
{
	DIO_Write(portname,pinnumber,0);
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
}
     944:	08 95       	ret

00000946 <LED_vToggle>:

void LED_vToggle(unsigned char portname,unsigned char pinnumber)//EX:  ('A',3)
{
	DIO_Toggle(portname,pinnumber);
     946:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_Toggle>
}
     94a:	08 95       	ret

0000094c <main>:
char show_menu=MAIN_MENU;							//variable used to know which menu we select
char TIME_OUT_FLAG=FALSE;							//Flag to know if the session time out or not
volatile char secondes_counter=0;
/*****************************************/
int main(void)
{
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	2b 97       	sbiw	r28, 0x0b	; 11
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
	/*************INITILIZATION***********/
	LCD_vInit();
     960:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_vInit>
	SPI_MasterInit();
     964:	0e 94 0f 0c 	call	0x181e	; 0x181e <SPI_MasterInit>
	UART_vInit(BAUD_RATE);
     968:	60 e8       	ldi	r22, 0x80	; 128
     96a:	75 e2       	ldi	r23, 0x25	; 37
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 a2 0c 	call	0x1944	; 0x1944 <UART_vInit>
	INT0_vInit();
     974:	0e 94 83 03 	call	0x706	; 0x706 <INT0_vInit>
	INT1_vInit();
     978:	0e 94 93 03 	call	0x726	; 0x726 <INT1_vInit>
	Timer1_wave_fastPWM_servo_postive(0);
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	cb 01       	movw	r24, r22
     982:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Timer1_wave_fastPWM_servo_postive>
	
	LED_vInit(MODES_LED_PORTS,BLOCK_MODE_LED_PIN);		//initialize BLOCK_MODE LED
     986:	83 e4       	ldi	r24, 0x43	; 67
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	0e 94 97 04 	call	0x92e	; 0x92e <LED_vInit>
	LED_vInit(MODES_LED_PORTS,ADMIN_MODE_LED_PIN);		//initialize ADMIN_MODE LED
     98e:	83 e4       	ldi	r24, 0x43	; 67
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	0e 94 97 04 	call	0x92e	; 0x92e <LED_vInit>
	LED_vInit(MODES_LED_PORTS,GUEST_MODE_LED_PIN);		//initialize GUEST_MODE LED
     996:	83 e4       	ldi	r24, 0x43	; 67
     998:	62 e0       	ldi	r22, 0x02	; 2
     99a:	0e 94 97 04 	call	0x92e	; 0x92e <LED_vInit>
	LED_vInit(MODES_LED_PORTS,LIVING_ROOM_LED1);
     99e:	83 e4       	ldi	r24, 0x43	; 67
     9a0:	63 e0       	ldi	r22, 0x03	; 3
     9a2:	0e 94 97 04 	call	0x92e	; 0x92e <LED_vInit>
	LED_vInit(MODES_LED_PORTS,LIVING_ROOM_LED2);
     9a6:	83 e4       	ldi	r24, 0x43	; 67
     9a8:	64 e0       	ldi	r22, 0x04	; 4
     9aa:	0e 94 97 04 	call	0x92e	; 0x92e <LED_vInit>
	char i;												//counter used for loops
	
	char login_mode=NO_MODE;							//variable used to know which mode the user select
	char BLOCKED_MODE_FLAG=FALSE;						//FLAG to know if the session expired or not
	
	char pass[4]={NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED};	//array to save the password and check it	
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	8a 83       	std	Y+2, r24	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	8c 83       	std	Y+4, r24	; 0x04
	char Temp_Units=NOTPRESSED;							//variable take the units value from user
	char Temp_Tens=NOTPRESSED;							//variable take the Tens value from user
	char Tempreature=0;
	/*************************************/
	
	LCD_vSend_String("Welcome To Smart");
     9b8:	80 e6       	ldi	r24, 0x60	; 96
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
	LCD_Move_Cursor(2,1);
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
	LCD_vSend_String("Home System");
     9c8:	81 e7       	ldi	r24, 0x71	; 113
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	94 e3       	ldi	r25, 0x34	; 52
     9d4:	ac e0       	ldi	r26, 0x0C	; 12
     9d6:	81 50       	subi	r24, 0x01	; 1
     9d8:	90 40       	sbci	r25, 0x00	; 0
     9da:	a0 40       	sbci	r26, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <main+0x8a>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <main+0x94>
     9e0:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
     9e2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
	
	if((EEPROM_Read(EEPROM_ADMIN_STATUS_LOCATION)==0xFF) && (EEPROM_Read(EEPROM_GUEST_STATUS_LOCATION)==0xFF))//if the password didn't saved befor
     9e6:	80 e2       	ldi	r24, 0x20	; 32
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     9ee:	8f 3f       	cpi	r24, 0xFF	; 255
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <main+0xa8>
     9f2:	bb c0       	rjmp	.+374    	; 0xb6a <main+0x21e>
     9f4:	80 e3       	ldi	r24, 0x30	; 48
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     9fc:	8f 3f       	cpi	r24, 0xFF	; 255
     9fe:	09 f0       	breq	.+2      	; 0xa02 <main+0xb6>
     a00:	b4 c0       	rjmp	.+360    	; 0xb6a <main+0x21e>
	{	
		LCD_vSend_String("Login For");
     a02:	8d e7       	ldi	r24, 0x7D	; 125
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
		LCD_Move_Cursor(2,1);
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
		LCD_vSend_String("First Time");
     a12:	87 e8       	ldi	r24, 0x87	; 135
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	94 e3       	ldi	r25, 0x34	; 52
     a1e:	ac e0       	ldi	r26, 0x0C	; 12
     a20:	81 50       	subi	r24, 0x01	; 1
     a22:	90 40       	sbci	r25, 0x00	; 0
     a24:	a0 40       	sbci	r26, 0x00	; 0
     a26:	e1 f7       	brne	.-8      	; 0xa20 <main+0xd4>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <main+0xde>
     a2a:	00 00       	nop
		_delay_ms(500);
		LCD_Clear_Screen();
     a2c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
		/*********** Save Guest passowrd for the first time ***********/
		LCD_vSend_String("Set Admin Pass");
     a30:	82 e9       	ldi	r24, 0x92	; 146
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
		LCD_Move_Cursor(2,1);
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
		LCD_vSend_String("Admin pass:");
     a40:	81 ea       	ldi	r24, 0xA1	; 161
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     a48:	01 e2       	ldi	r16, 0x21	; 33
     a4a:	10 e0       	ldi	r17, 0x00	; 0
		
		for(i=I_COUNTER;i<PASS_SIZE;i++)												//FOR loop to enter the password of the admin_mode
		{
			Key_Pressed=NOTPRESSED;												//remove the last value saved in it 
     a4c:	ff 24       	eor	r15, r15
     a4e:	fa 94       	dec	r15
     a50:	f0 92 26 02 	sts	0x0226, r15
			do 
			{
				Key_Pressed=UART_u8ReceiveData();
     a54:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
     a58:	80 93 26 02 	sts	0x0226, r24
			} while (Key_Pressed==NOTPRESSED);
     a5c:	8f 3f       	cpi	r24, 0xFF	; 255
     a5e:	d1 f3       	breq	.-12     	; 0xa54 <main+0x108>
			
			LCD_vSend_char(Key_Pressed);										//print the value of the password that the user enter
     a60:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     a64:	8f e7       	ldi	r24, 0x7F	; 127
     a66:	98 e3       	ldi	r25, 0x38	; 56
     a68:	a1 e0       	ldi	r26, 0x01	; 1
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	90 40       	sbci	r25, 0x00	; 0
     a6e:	a0 40       	sbci	r26, 0x00	; 0
     a70:	e1 f7       	brne	.-8      	; 0xa6a <main+0x11e>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <main+0x128>
     a74:	00 00       	nop
volatile unsigned short Session_Counter=0;					//Timer counter (in ISR)
char show_menu=MAIN_MENU;							//variable used to know which menu we select
char TIME_OUT_FLAG=FALSE;							//Flag to know if the session time out or not
volatile char secondes_counter=0;
/*****************************************/
int main(void)
     a76:	60 2f       	mov	r22, r16
     a78:	65 51       	subi	r22, 0x15	; 21
				Key_Pressed=UART_u8ReceiveData();
			} while (Key_Pressed==NOTPRESSED);
			
			LCD_vSend_char(Key_Pressed);										//print the value of the password that the user enter
			_delay_ms(50);
			LCD_Move_Cursor(2,12+i);
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
			LCD_vSend_char(PASS_SYMBOL);										//print the password symbol
     a80:	8a e2       	ldi	r24, 0x2A	; 42
     a82:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
			EEPROM_Write((EEPROM_ADMIN_PASS1_LOCATION+i),Key_Pressed);	//save the  admin password in EEPROM
     a86:	c8 01       	movw	r24, r16
     a88:	60 91 26 02 	lds	r22, 0x0226
     a8c:	0e 94 76 03 	call	0x6ec	; 0x6ec <EEPROM_Write>
     a90:	af e5       	ldi	r26, 0x5F	; 95
     a92:	ba ee       	ldi	r27, 0xEA	; 234
     a94:	11 97       	sbiw	r26, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <main+0x148>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <main+0x14e>
     a9a:	00 00       	nop
     a9c:	0f 5f       	subi	r16, 0xFF	; 255
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
		/*********** Save Guest passowrd for the first time ***********/
		LCD_vSend_String("Set Admin Pass");
		LCD_Move_Cursor(2,1);
		LCD_vSend_String("Admin pass:");
		
		for(i=I_COUNTER;i<PASS_SIZE;i++)												//FOR loop to enter the password of the admin_mode
     aa0:	05 32       	cpi	r16, 0x25	; 37
     aa2:	11 05       	cpc	r17, r1
     aa4:	a9 f6       	brne	.-86     	; 0xa50 <main+0x104>
			LCD_vSend_char(PASS_SYMBOL);										//print the password symbol
			EEPROM_Write((EEPROM_ADMIN_PASS1_LOCATION+i),Key_Pressed);	//save the  admin password in EEPROM
			_delay_ms(30);
		}
		i=I_COUNTER;															//remove the last value saved in it 
		EEPROM_Write(EEPROM_ADMIN_STATUS_LOCATION,0x00);						//write 0 in admin status location to know that the password already saved
     aa6:	80 e2       	ldi	r24, 0x20	; 32
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	0e 94 76 03 	call	0x6ec	; 0x6ec <EEPROM_Write>
     ab0:	ef e5       	ldi	r30, 0x5F	; 95
     ab2:	fa ee       	ldi	r31, 0xEA	; 234
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <main+0x168>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <main+0x16e>
     aba:	00 00       	nop
		_delay_ms(30);
		/**************************************************************/
		
		/*********** Save Guest passowrd for the first time ***********/
		LCD_Clear_Screen();
     abc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
		LCD_vSend_String("Set Guest Pass");
     ac0:	8d ea       	ldi	r24, 0xAD	; 173
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
		LCD_Move_Cursor(2,1);
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
		LCD_vSend_String("Guest Pass:");
     ad0:	8c eb       	ldi	r24, 0xBC	; 188
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     ad8:	01 e3       	ldi	r16, 0x31	; 49
     ada:	10 e0       	ldi	r17, 0x00	; 0
		
		for(i=I_COUNTER;i<PASS_SIZE;i++)												//FOR loop to enter the password of the admin_mode
		{
			Key_Pressed=NOTPRESSED;												//remove the last value saved in it
     adc:	ff 24       	eor	r15, r15
     ade:	fa 94       	dec	r15
     ae0:	f0 92 26 02 	sts	0x0226, r15
			do
			{
				Key_Pressed=UART_u8ReceiveData();
     ae4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
     ae8:	80 93 26 02 	sts	0x0226, r24
			} while (Key_Pressed==NOTPRESSED);
     aec:	8f 3f       	cpi	r24, 0xFF	; 255
     aee:	d1 f3       	breq	.-12     	; 0xae4 <main+0x198>
			LCD_vSend_char(Key_Pressed);										//print the value of the password that the user enter
     af0:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     af4:	8f e7       	ldi	r24, 0x7F	; 127
     af6:	98 e3       	ldi	r25, 0x38	; 56
     af8:	a1 e0       	ldi	r26, 0x01	; 1
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	90 40       	sbci	r25, 0x00	; 0
     afe:	a0 40       	sbci	r26, 0x00	; 0
     b00:	e1 f7       	brne	.-8      	; 0xafa <main+0x1ae>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <main+0x1b8>
     b04:	00 00       	nop
volatile unsigned short Session_Counter=0;					//Timer counter (in ISR)
char show_menu=MAIN_MENU;							//variable used to know which menu we select
char TIME_OUT_FLAG=FALSE;							//Flag to know if the session time out or not
volatile char secondes_counter=0;
/*****************************************/
int main(void)
     b06:	60 2f       	mov	r22, r16
     b08:	65 52       	subi	r22, 0x25	; 37
			{
				Key_Pressed=UART_u8ReceiveData();
			} while (Key_Pressed==NOTPRESSED);
			LCD_vSend_char(Key_Pressed);										//print the value of the password that the user enter
			_delay_ms(50);
			LCD_Move_Cursor(2,12+i);
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
			LCD_vSend_char(PASS_SYMBOL);										//print the password symbol
     b10:	8a e2       	ldi	r24, 0x2A	; 42
     b12:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
			EEPROM_Write((EEPROM_GUEST_PASS1_LOCATION+i),Key_Pressed);	//save the  Guest password in EEPROM
     b16:	c8 01       	movw	r24, r16
     b18:	60 91 26 02 	lds	r22, 0x0226
     b1c:	0e 94 76 03 	call	0x6ec	; 0x6ec <EEPROM_Write>
     b20:	af e5       	ldi	r26, 0x5F	; 95
     b22:	ba ee       	ldi	r27, 0xEA	; 234
     b24:	11 97       	sbiw	r26, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <main+0x1d8>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <main+0x1de>
     b2a:	00 00       	nop
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
		LCD_Clear_Screen();
		LCD_vSend_String("Set Guest Pass");
		LCD_Move_Cursor(2,1);
		LCD_vSend_String("Guest Pass:");
		
		for(i=I_COUNTER;i<PASS_SIZE;i++)												//FOR loop to enter the password of the admin_mode
     b30:	05 33       	cpi	r16, 0x35	; 53
     b32:	11 05       	cpc	r17, r1
     b34:	a9 f6       	brne	.-86     	; 0xae0 <main+0x194>
			LCD_vSend_char(PASS_SYMBOL);										//print the password symbol
			EEPROM_Write((EEPROM_GUEST_PASS1_LOCATION+i),Key_Pressed);	//save the  Guest password in EEPROM
			_delay_ms(30);
		}
		i=I_COUNTER;															//remove the last value saved in it 
		EEPROM_Write(EEPROM_GUEST_STATUS_LOCATION,0x00);						//write 0 in Guest status location to know that the password already saved
     b36:	80 e3       	ldi	r24, 0x30	; 48
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	0e 94 76 03 	call	0x6ec	; 0x6ec <EEPROM_Write>
     b40:	ef e5       	ldi	r30, 0x5F	; 95
     b42:	fa ee       	ldi	r31, 0xEA	; 234
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <main+0x1f8>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <main+0x1fe>
     b4a:	00 00       	nop
		_delay_ms(30);
		/**************************************************************/
		LCD_Clear_Screen();
     b4c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
		LCD_vSend_String("Password saved");
     b50:	88 ec       	ldi	r24, 0xC8	; 200
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	94 e3       	ldi	r25, 0x34	; 52
     b5c:	ac e0       	ldi	r26, 0x0C	; 12
     b5e:	81 50       	subi	r24, 0x01	; 1
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	a0 40       	sbci	r26, 0x00	; 0
     b64:	e1 f7       	brne	.-8      	; 0xb5e <main+0x212>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <main+0x21c>
     b68:	00 00       	nop
		
		/*********** Save Guest passowrd for the first time ***********/
		LCD_Clear_Screen();
		LCD_vSend_String("Set Guest Pass");
		LCD_Move_Cursor(2,1);
		LCD_vSend_String("Guest Pass:");
     b6a:	19 86       	std	Y+9, r1	; 0x09
     b6c:	9f ef       	ldi	r25, 0xFF	; 255
     b6e:	9b 87       	std	Y+11, r25	; 0x0b
     b70:	af ef       	ldi	r26, 0xFF	; 255
     b72:	aa 87       	std	Y+10, r26	; 0x0a
     b74:	ee 24       	eor	r14, r14
     b76:	0f 2e       	mov	r0, r31
     b78:	f3 e0       	ldi	r31, 0x03	; 3
     b7a:	df 2e       	mov	r13, r31
     b7c:	f0 2d       	mov	r31, r0
     b7e:	18 86       	std	Y+8, r1	; 0x08
     b80:	1f 82       	std	Y+7, r1	; 0x07
			{
				case CHECK_ADMIN_MODE:								//check the ascii code that user enter 
					while(login_mode!=ADMIN_MODE)
					{
						LCD_Clear_Screen();
						LCD_vSend_String("Admin Mode");
     b82:	eb e2       	ldi	r30, 0x2B	; 43
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	ed 83       	std	Y+5, r30	; 0x05
     b88:	fe 83       	std	Y+6, r31	; 0x06
						LCD_Move_Cursor(2,1);
						LCD_vSend_String("Admin Pass:");
     b8a:	0f 2e       	mov	r0, r31
     b8c:	f6 e3       	ldi	r31, 0x36	; 54
     b8e:	2f 2e       	mov	r2, r31
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	3f 2e       	mov	r3, r31
     b94:	f0 2d       	mov	r31, r0
							pass_tries--;
							tries_allowed_counter++;
							//login_mode=NO_MODE;
								
							LCD_Clear_Screen();
							LCD_vSend_String("Wrong password");
     b96:	0f 2e       	mov	r0, r31
     b98:	f1 e5       	ldi	r31, 0x51	; 81
     b9a:	8f 2e       	mov	r8, r31
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	9f 2e       	mov	r9, r31
     ba0:	f0 2d       	mov	r31, r0
							LCD_Move_Cursor(2,1);
							LCD_vSend_String("Tries Allowed ");
     ba2:	0f 2e       	mov	r0, r31
     ba4:	f0 e6       	ldi	r31, 0x60	; 96
     ba6:	6f 2e       	mov	r6, r31
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	7f 2e       	mov	r7, r31
     bac:	f0 2d       	mov	r31, r0
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <main+0x268>
     bb0:	ed 2c       	mov	r14, r13
     bb2:	dc 2c       	mov	r13, r12
		LCD_vSend_String("Password saved");
		_delay_ms(500);
	}
	while(1)
    {
		Key_Pressed=NOTPRESSED;
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	80 93 26 02 	sts	0x0226, r24
		
		while(TIME_OUT_FLAG==TRUE)
     bba:	80 91 85 02 	lds	r24, 0x0285
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	41 f5       	brne	.+80     	; 0xc12 <main+0x2c6>
		{
			Timer_Stop_CTC();
			
			Key_Pressed==NOTPRESSED;
			login_mode=NO_MODE;
			show_menu=MAIN_MENU;
     bc2:	01 e0       	ldi	r16, 0x01	; 1
    {
		Key_Pressed=NOTPRESSED;
		
		while(TIME_OUT_FLAG==TRUE)
		{
			Timer_Stop_CTC();
     bc4:	0e 94 40 0c 	call	0x1880	; 0x1880 <Timer_Stop_CTC>
			
			Key_Pressed==NOTPRESSED;
			login_mode=NO_MODE;
			show_menu=MAIN_MENU;
     bc8:	00 93 25 02 	sts	0x0225, r16
			TIME_OUT_FLAG=FALSE;
     bcc:	10 92 85 02 	sts	0x0285, r1
			
			Session_Counter=0;
     bd0:	10 92 87 02 	sts	0x0287, r1
     bd4:	10 92 86 02 	sts	0x0286, r1
			
			LED_vTurnOFF(MODES_LED_PORTS,ADMIN_MODE_LED_PIN);
     bd8:	83 e4       	ldi	r24, 0x43	; 67
     bda:	60 2f       	mov	r22, r16
     bdc:	0e 94 9f 04 	call	0x93e	; 0x93e <LED_vTurnOFF>
			LED_vTurnOFF(MODES_LED_PORTS,GUEST_MODE_LED_PIN);
     be0:	83 e4       	ldi	r24, 0x43	; 67
     be2:	62 e0       	ldi	r22, 0x02	; 2
     be4:	0e 94 9f 04 	call	0x93e	; 0x93e <LED_vTurnOFF>
			
			LCD_Clear_Screen();
     be8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
			LCD_vSend_String("Session TimeOut");
     bec:	87 ed       	ldi	r24, 0xD7	; 215
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	94 e3       	ldi	r25, 0x34	; 52
     bf8:	ac e0       	ldi	r26, 0x0C	; 12
     bfa:	81 50       	subi	r24, 0x01	; 1
     bfc:	90 40       	sbci	r25, 0x00	; 0
     bfe:	a0 40       	sbci	r26, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <main+0x2ae>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <main+0x2b8>
     c04:	00 00       	nop
	}
	while(1)
    {
		Key_Pressed=NOTPRESSED;
		
		while(TIME_OUT_FLAG==TRUE)
     c06:	80 91 85 02 	lds	r24, 0x0285
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	d9 f2       	breq	.-74     	; 0xbc4 <main+0x278>
		{
			Timer_Stop_CTC();
			
			Key_Pressed==NOTPRESSED;
			login_mode=NO_MODE;
     c0e:	1f 82       	std	Y+7, r1	; 0x07
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <main+0x2ce>
			LCD_Clear_Screen();
			LCD_vSend_String("Session TimeOut");
			_delay_ms(500);
		}
		
		while(login_mode==NO_MODE)
     c12:	9f 81       	ldd	r25, Y+7	; 0x07
     c14:	99 23       	and	r25, r25
     c16:	09 f0       	breq	.+2      	; 0xc1a <main+0x2ce>
     c18:	51 c4       	rjmp	.+2210   	; 0x14bc <main+0xb70>
				
				case CHECK_GUEST_MODE:
					while(login_mode!=GUEST_MODE)
					{
						LCD_Clear_Screen();
						LCD_vSend_String("Guest Mode");
     c1a:	0f 2e       	mov	r0, r31
     c1c:	fd e8       	ldi	r31, 0x8D	; 141
     c1e:	af 2e       	mov	r10, r31
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	bf 2e       	mov	r11, r31
     c24:	f0 2d       	mov	r31, r0
						LCD_Move_Cursor(2,1);
						LCD_vSend_String("Guest Pass:");
     c26:	0f 2e       	mov	r0, r31
     c28:	fc eb       	ldi	r31, 0xBC	; 188
     c2a:	4f 2e       	mov	r4, r31
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	5f 2e       	mov	r5, r31
     c30:	f0 2d       	mov	r31, r0
			_delay_ms(500);
		}
		
		while(login_mode==NO_MODE)
		{
			if(BLOCKED_MODE_FLAG==TRUE)
     c32:	a8 85       	ldd	r26, Y+8	; 0x08
     c34:	a1 30       	cpi	r26, 0x01	; 1
     c36:	31 f5       	brne	.+76     	; 0xc84 <main+0x338>
				pass_tries=MAX_PASS_TRIES;
				tries_allowed_counter=I_COUNTER;
				login_mode=NO_MODE;
				BLOCKED_MODE_FLAG=FALSE;
			
				LCD_Clear_Screen();
     c38:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Login Blocked");
     c3c:	87 ee       	ldi	r24, 0xE7	; 231
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
				LCD_Move_Cursor(2,1);
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
				LCD_vSend_String("Wait 5 Sec");
     c4c:	85 ef       	ldi	r24, 0xF5	; 245
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
				LED_vTurnOn(MODES_LED_PORTS,BLOCK_MODE_LED_PIN);	//turn on block mode led
     c54:	83 e4       	ldi	r24, 0x43	; 67
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	0e 94 9b 04 	call	0x936	; 0x936 <LED_vTurnOn>
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	91 e1       	ldi	r25, 0x11	; 17
     c60:	aa e7       	ldi	r26, 0x7A	; 122
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	90 40       	sbci	r25, 0x00	; 0
     c66:	a0 40       	sbci	r26, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <main+0x316>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <main+0x320>
     c6c:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);							//wait 5sec
				LED_vTurnOFF(MODES_LED_PORTS,BLOCK_MODE_LED_PIN);	//turn off block mode led
     c6e:	83 e4       	ldi	r24, 0x43	; 67
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	0e 94 9f 04 	call	0x93e	; 0x93e <LED_vTurnOFF>
		while(login_mode==NO_MODE)
		{
			if(BLOCKED_MODE_FLAG==TRUE)
			{
				pass_tries=MAX_PASS_TRIES;
				tries_allowed_counter=I_COUNTER;
     c76:	ee 24       	eor	r14, r14
		
		while(login_mode==NO_MODE)
		{
			if(BLOCKED_MODE_FLAG==TRUE)
			{
				pass_tries=MAX_PASS_TRIES;
     c78:	0f 2e       	mov	r0, r31
     c7a:	f3 e0       	ldi	r31, 0x03	; 3
     c7c:	df 2e       	mov	r13, r31
     c7e:	f0 2d       	mov	r31, r0
				tries_allowed_counter=I_COUNTER;
				login_mode=NO_MODE;
				BLOCKED_MODE_FLAG=FALSE;
     c80:	18 86       	std	Y+8, r1	; 0x08
		{
			if(BLOCKED_MODE_FLAG==TRUE)
			{
				pass_tries=MAX_PASS_TRIES;
				tries_allowed_counter=I_COUNTER;
				login_mode=NO_MODE;
     c82:	1f 82       	std	Y+7, r1	; 0x07
				LED_vTurnOn(MODES_LED_PORTS,BLOCK_MODE_LED_PIN);	//turn on block mode led
				_delay_ms(BLOCK_MODE_TIME);							//wait 5sec
				LED_vTurnOFF(MODES_LED_PORTS,BLOCK_MODE_LED_PIN);	//turn off block mode led
			}
			
			Key_Pressed=NOTPRESSED;									//remove the last value saved in it 
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	80 93 26 02 	sts	0x0226, r24
			LCD_Clear_Screen();
     c8a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
			LCD_vSend_String("Select Mode:");
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			LCD_Move_Cursor(2,1);
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
			LCD_vSend_String("1-Admin  2-Guest");
     c9e:	8d e0       	ldi	r24, 0x0D	; 13
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			
			do														//take the read from the user
			{
				Key_Pressed=UART_u8ReceiveData();
     ca6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
     caa:	80 93 26 02 	sts	0x0226, r24
			} while (Key_Pressed==NOTPRESSED);
     cae:	8f 3f       	cpi	r24, 0xFF	; 255
     cb0:	d1 f3       	breq	.-12     	; 0xca6 <main+0x35a>
			
			if((Key_Pressed != CHECK_ADMIN_MODE) && (Key_Pressed != CHECK_GUEST_MODE))//if the user press another button not 1 or 2
     cb2:	98 2f       	mov	r25, r24
     cb4:	91 53       	subi	r25, 0x31	; 49
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	98 f0       	brcs	.+38     	; 0xce0 <main+0x394>
			{
				LCD_Clear_Screen();
     cba:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Wrong Input!");
     cbe:	8e e1       	ldi	r24, 0x1E	; 30
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	94 e3       	ldi	r25, 0x34	; 52
     cca:	ac e0       	ldi	r26, 0x0C	; 12
     ccc:	81 50       	subi	r24, 0x01	; 1
     cce:	90 40       	sbci	r25, 0x00	; 0
     cd0:	a0 40       	sbci	r26, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <main+0x380>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <main+0x38a>
     cd6:	00 00       	nop
				_delay_ms(500);
				Key_Pressed=NOTPRESSED;								//remove the last value saved in it 
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	80 93 26 02 	sts	0x0226, r24
				continue;
     cde:	60 c1       	rjmp	.+704    	; 0xfa0 <main+0x654>
			}
			
			switch(Key_Pressed)
     ce0:	81 33       	cpi	r24, 0x31	; 49
     ce2:	41 f0       	breq	.+16     	; 0xcf4 <main+0x3a8>
     ce4:	82 33       	cpi	r24, 0x32	; 50
     ce6:	09 f0       	breq	.+2      	; 0xcea <main+0x39e>
     ce8:	5b c1       	rjmp	.+694    	; 0xfa0 <main+0x654>
						}												
					}//end of while loop											
				break;
				
				case CHECK_GUEST_MODE:
					while(login_mode!=GUEST_MODE)
     cea:	9f 81       	ldd	r25, Y+7	; 0x07
     cec:	92 30       	cpi	r25, 0x02	; 2
     cee:	09 f0       	breq	.+2      	; 0xcf2 <main+0x3a6>
     cf0:	af c0       	rjmp	.+350    	; 0xe50 <main+0x504>
     cf2:	e4 c3       	rjmp	.+1992   	; 0x14bc <main+0xb70>
			}
			
			switch(Key_Pressed)
			{
				case CHECK_ADMIN_MODE:								//check the ascii code that user enter 
					while(login_mode!=ADMIN_MODE)
     cf4:	af 81       	ldd	r26, Y+7	; 0x07
     cf6:	a1 30       	cpi	r26, 0x01	; 1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <main+0x3b0>
     cfa:	e0 c3       	rjmp	.+1984   	; 0x14bc <main+0xb70>
					{
						LCD_Clear_Screen();
						LCD_vSend_String("Admin Mode");
						LCD_Move_Cursor(2,1);
						LCD_vSend_String("Admin Pass:");
     cfc:	0f 2e       	mov	r0, r31
     cfe:	fc e0       	ldi	r31, 0x0C	; 12
     d00:	cf 2e       	mov	r12, r31
     d02:	f0 2d       	mov	r31, r0
			switch(Key_Pressed)
			{
				case CHECK_ADMIN_MODE:								//check the ascii code that user enter 
					while(login_mode!=ADMIN_MODE)
					{
						LCD_Clear_Screen();
     d04:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						LCD_vSend_String("Admin Mode");
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
						LCD_Move_Cursor(2,1);
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
						LCD_vSend_String("Admin Pass:");
     d18:	c1 01       	movw	r24, r2
     d1a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     d1e:	8e 01       	movw	r16, r28
     d20:	0f 5f       	subi	r16, 0xFF	; 255
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	fc 2c       	mov	r15, r12
						/*************check admin password**************/
						for(i=I_COUNTER;i<PASS_SIZE;i++)				//for loop to take the password from the user
						{
							do 
							{
								pass[i]=UART_u8ReceiveData();			//save the numbers that the user enter in array
     d26:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
     d2a:	f8 01       	movw	r30, r16
     d2c:	80 83       	st	Z, r24
							} while (pass[i]==NOTPRESSED);
     d2e:	8f 3f       	cpi	r24, 0xFF	; 255
     d30:	d1 f3       	breq	.-12     	; 0xd26 <main+0x3da>
							LCD_vSend_char(pass[i]);
     d32:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     d36:	8f e7       	ldi	r24, 0x7F	; 127
     d38:	98 e3       	ldi	r25, 0x38	; 56
     d3a:	a1 e0       	ldi	r26, 0x01	; 1
     d3c:	81 50       	subi	r24, 0x01	; 1
     d3e:	90 40       	sbci	r25, 0x00	; 0
     d40:	a0 40       	sbci	r26, 0x00	; 0
     d42:	e1 f7       	brne	.-8      	; 0xd3c <main+0x3f0>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <main+0x3fa>
     d46:	00 00       	nop
							_delay_ms(50);
							LCD_Move_Cursor(2,12+i);
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	6f 2d       	mov	r22, r15
     d4c:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
							LCD_vSend_char(PASS_SYMBOL);				//print password symbol *
     d50:	8a e2       	ldi	r24, 0x2A	; 42
     d52:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     d56:	f3 94       	inc	r15
     d58:	0f 5f       	subi	r16, 0xFF	; 255
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
						LCD_Clear_Screen();
						LCD_vSend_String("Admin Mode");
						LCD_Move_Cursor(2,1);
						LCD_vSend_String("Admin Pass:");
						/*************check admin password**************/
						for(i=I_COUNTER;i<PASS_SIZE;i++)				//for loop to take the password from the user
     d5c:	90 e1       	ldi	r25, 0x10	; 16
     d5e:	f9 16       	cp	r15, r25
     d60:	11 f7       	brne	.-60     	; 0xd26 <main+0x3da>
							_delay_ms(50);
							LCD_Move_Cursor(2,12+i);
							LCD_vSend_char(PASS_SYMBOL);				//print password symbol *
						}
					
						if((EEPROM_Read(EEPROM_ADMIN_PASS1_LOCATION)==pass[0]) && (EEPROM_Read(EEPROM_ADMIN_PASS2_LOCATION)==pass[1]) && (EEPROM_Read(EEPROM_ADMIN_PASS3_LOCATION)==pass[2]) && (EEPROM_Read(EEPROM_ADMIN_PASS4_LOCATION)==pass[3]))
     d62:	81 e2       	ldi	r24, 0x21	; 33
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     d6a:	99 81       	ldd	r25, Y+1	; 0x01
     d6c:	89 17       	cp	r24, r25
     d6e:	b9 f5       	brne	.+110    	; 0xdde <main+0x492>
     d70:	82 e2       	ldi	r24, 0x22	; 34
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	89 17       	cp	r24, r25
     d7c:	81 f5       	brne	.+96     	; 0xdde <main+0x492>
     d7e:	83 e2       	ldi	r24, 0x23	; 35
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	89 17       	cp	r24, r25
     d8a:	49 f5       	brne	.+82     	; 0xdde <main+0x492>
     d8c:	84 e2       	ldi	r24, 0x24	; 36
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	89 17       	cp	r24, r25
     d98:	11 f5       	brne	.+68     	; 0xdde <main+0x492>
						{//if the password that the user enter is true
							LCD_Clear_Screen();
     d9a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Right password");
     d9e:	82 e4       	ldi	r24, 0x42	; 66
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							LCD_Move_Cursor(2,1);
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
							LCD_vSend_String("Admin Mode");
     dae:	8b e2       	ldi	r24, 0x2B	; 43
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							login_mode=ADMIN_MODE;								//save that user enter admin mode
							LED_vTurnOn(MODES_LED_PORTS,ADMIN_MODE_LED_PIN);	//turn on admin mode led
     db6:	83 e4       	ldi	r24, 0x43	; 67
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	0e 94 9b 04 	call	0x936	; 0x936 <LED_vTurnOn>
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	94 e3       	ldi	r25, 0x34	; 52
     dc2:	ac e0       	ldi	r26, 0x0C	; 12
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	90 40       	sbci	r25, 0x00	; 0
     dc8:	a0 40       	sbci	r26, 0x00	; 0
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <main+0x478>
     dcc:	00 c0       	rjmp	.+0      	; 0xdce <main+0x482>
     dce:	00 00       	nop
							_delay_ms(500);
							Timer_CTC_Init_interrupt();							//start the session counter 
     dd0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <Timer_CTC_Init_interrupt>
							LCD_Clear_Screen();
     dd4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						{//if the password that the user enter is true
							LCD_Clear_Screen();
							LCD_vSend_String("Right password");
							LCD_Move_Cursor(2,1);
							LCD_vSend_String("Admin Mode");
							login_mode=ADMIN_MODE;								//save that user enter admin mode
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	9f 83       	std	Y+7, r25	; 0x07
     ddc:	6f c3       	rjmp	.+1758   	; 0x14bc <main+0xb70>
							LCD_Clear_Screen();
						}
						/*************************************************************/
						else
						{
							pass_tries--;
     dde:	da 94       	dec	r13
							tries_allowed_counter++;
     de0:	e3 94       	inc	r14
							//login_mode=NO_MODE;
								
							LCD_Clear_Screen();
     de2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Wrong password");
     de6:	c4 01       	movw	r24, r8
     de8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							LCD_Move_Cursor(2,1);
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
							LCD_vSend_String("Tries Allowed ");
     df4:	c3 01       	movw	r24, r6
     df6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							LCD_vSend_char(pass_tries+48);			//send asci code of allowed tries
     dfa:	8d 2d       	mov	r24, r13
     dfc:	80 5d       	subi	r24, 0xD0	; 208
     dfe:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	94 e3       	ldi	r25, 0x34	; 52
     e06:	ac e0       	ldi	r26, 0x0C	; 12
     e08:	81 50       	subi	r24, 0x01	; 1
     e0a:	90 40       	sbci	r25, 0x00	; 0
     e0c:	a0 40       	sbci	r26, 0x00	; 0
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <main+0x4bc>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <main+0x4c6>
     e12:	00 00       	nop
							_delay_ms(500);
							
							if(tries_allowed_counter>2)
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	9e 15       	cp	r25, r14
     e18:	08 f0       	brcs	.+2      	; 0xe1c <main+0x4d0>
     e1a:	74 cf       	rjmp	.-280    	; 0xd04 <main+0x3b8>
							{
								LCD_Clear_Screen();
     e1c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
								LCD_vSend_String("No Tries Allowed");
     e20:	8f e6       	ldi	r24, 0x6F	; 111
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
								LCD_Move_Cursor(2,1);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
								LCD_vSend_String("  BLOCK MODE");
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	94 e3       	ldi	r25, 0x34	; 52
     e3c:	ac e0       	ldi	r26, 0x0C	; 12
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	90 40       	sbci	r25, 0x00	; 0
     e42:	a0 40       	sbci	r26, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <main+0x4f2>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <main+0x4fc>
     e48:	00 00       	nop
								BLOCKED_MODE_FLAG=TRUE;
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	98 87       	std	Y+8, r25	; 0x08
     e4e:	a8 c0       	rjmp	.+336    	; 0xfa0 <main+0x654>
					while(login_mode!=GUEST_MODE)
					{
						LCD_Clear_Screen();
						LCD_vSend_String("Guest Mode");
						LCD_Move_Cursor(2,1);
						LCD_vSend_String("Guest Pass:");
     e50:	0f 2e       	mov	r0, r31
     e52:	fc e0       	ldi	r31, 0x0C	; 12
     e54:	cf 2e       	mov	r12, r31
     e56:	f0 2d       	mov	r31, r0
				break;
				
				case CHECK_GUEST_MODE:
					while(login_mode!=GUEST_MODE)
					{
						LCD_Clear_Screen();
     e58:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						LCD_vSend_String("Guest Mode");
     e5c:	c5 01       	movw	r24, r10
     e5e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
						LCD_Move_Cursor(2,1);
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
						LCD_vSend_String("Guest Pass:");
     e6a:	c2 01       	movw	r24, r4
     e6c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     e70:	8e 01       	movw	r16, r28
     e72:	0f 5f       	subi	r16, 0xFF	; 255
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	fc 2c       	mov	r15, r12
						/*************check admin password**************/
						for(i=I_COUNTER;i<PASS_SIZE;i++)				//for loop to take the password from the user
						{
							do
							{
								pass[i]=UART_u8ReceiveData();			//save the numbers that the user enter in array
     e78:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
     e7c:	d8 01       	movw	r26, r16
     e7e:	8c 93       	st	X, r24
							}while (pass[i]==NOTPRESSED);
     e80:	8f 3f       	cpi	r24, 0xFF	; 255
     e82:	d1 f3       	breq	.-12     	; 0xe78 <main+0x52c>
							
							LCD_vSend_char(pass[i]);
     e84:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     e88:	8f e7       	ldi	r24, 0x7F	; 127
     e8a:	98 e3       	ldi	r25, 0x38	; 56
     e8c:	a1 e0       	ldi	r26, 0x01	; 1
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	90 40       	sbci	r25, 0x00	; 0
     e92:	a0 40       	sbci	r26, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <main+0x542>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <main+0x54c>
     e98:	00 00       	nop
							_delay_ms(50);
							LCD_Move_Cursor(2,12+i);
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	6f 2d       	mov	r22, r15
     e9e:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
							LCD_vSend_char(PASS_SYMBOL);				//print password symbol *
     ea2:	8a e2       	ldi	r24, 0x2A	; 42
     ea4:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     ea8:	f3 94       	inc	r15
     eaa:	0f 5f       	subi	r16, 0xFF	; 255
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
						LCD_Clear_Screen();
						LCD_vSend_String("Guest Mode");
						LCD_Move_Cursor(2,1);
						LCD_vSend_String("Guest Pass:");
						/*************check admin password**************/
						for(i=I_COUNTER;i<PASS_SIZE;i++)				//for loop to take the password from the user
     eae:	90 e1       	ldi	r25, 0x10	; 16
     eb0:	f9 16       	cp	r15, r25
     eb2:	11 f7       	brne	.-60     	; 0xe78 <main+0x52c>
							_delay_ms(50);
							LCD_Move_Cursor(2,12+i);
							LCD_vSend_char(PASS_SYMBOL);				//print password symbol *
						}
					
						if((EEPROM_Read(EEPROM_GUEST_PASS1_LOCATION)==pass[0]) && (EEPROM_Read(EEPROM_GUEST_PASS2_LOCATION)==pass[1]) && (EEPROM_Read(EEPROM_GUEST_PASS3_LOCATION)==pass[2]) && (EEPROM_Read(EEPROM_GUEST_PASS4_LOCATION)==pass[3]))
     eb4:	81 e3       	ldi	r24, 0x31	; 49
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     ebc:	99 81       	ldd	r25, Y+1	; 0x01
     ebe:	89 17       	cp	r24, r25
     ec0:	b9 f5       	brne	.+110    	; 0xf30 <main+0x5e4>
     ec2:	82 e3       	ldi	r24, 0x32	; 50
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	89 17       	cp	r24, r25
     ece:	81 f5       	brne	.+96     	; 0xf30 <main+0x5e4>
     ed0:	83 e3       	ldi	r24, 0x33	; 51
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	89 17       	cp	r24, r25
     edc:	49 f5       	brne	.+82     	; 0xf30 <main+0x5e4>
     ede:	84 e3       	ldi	r24, 0x34	; 52
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_Read>
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	89 17       	cp	r24, r25
     eea:	11 f5       	brne	.+68     	; 0xf30 <main+0x5e4>
						{//if the password that the user enter is true
							LCD_Clear_Screen();
     eec:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Right password");
     ef0:	82 e4       	ldi	r24, 0x42	; 66
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							LCD_Move_Cursor(2,1);
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
							LCD_vSend_String("Guest Mode");
     f00:	8d e8       	ldi	r24, 0x8D	; 141
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							login_mode=GUEST_MODE;								//save that user enter admin mode
							LED_vTurnOn(MODES_LED_PORTS,GUEST_MODE_LED_PIN);	//turn on admin mode led
     f08:	83 e4       	ldi	r24, 0x43	; 67
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	0e 94 9b 04 	call	0x936	; 0x936 <LED_vTurnOn>
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	94 e3       	ldi	r25, 0x34	; 52
     f14:	ac e0       	ldi	r26, 0x0C	; 12
     f16:	81 50       	subi	r24, 0x01	; 1
     f18:	90 40       	sbci	r25, 0x00	; 0
     f1a:	a0 40       	sbci	r26, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <main+0x5ca>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <main+0x5d4>
     f20:	00 00       	nop
							_delay_ms(500);
							Timer_CTC_Init_interrupt();							//start the session counter
     f22:	0e 94 4a 0c 	call	0x1894	; 0x1894 <Timer_CTC_Init_interrupt>
							LCD_Clear_Screen();
     f26:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						{//if the password that the user enter is true
							LCD_Clear_Screen();
							LCD_vSend_String("Right password");
							LCD_Move_Cursor(2,1);
							LCD_vSend_String("Guest Mode");
							login_mode=GUEST_MODE;								//save that user enter admin mode
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	9f 83       	std	Y+7, r25	; 0x07
     f2e:	c6 c2       	rjmp	.+1420   	; 0x14bc <main+0xb70>
							LCD_Clear_Screen();
						}
						/*************************************************************/
						else
						{
							pass_tries--;
     f30:	da 94       	dec	r13
							tries_allowed_counter++;
     f32:	e3 94       	inc	r14
						
							LCD_Clear_Screen();
     f34:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Wrong password");
     f38:	c4 01       	movw	r24, r8
     f3a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							LCD_Move_Cursor(2,1);
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
							LCD_vSend_String("Tries Allowed ");
     f46:	c3 01       	movw	r24, r6
     f48:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
							LCD_vSend_char(pass_tries+48);			//send asci code of allowed tries
     f4c:	8d 2d       	mov	r24, r13
     f4e:	80 5d       	subi	r24, 0xD0	; 208
     f50:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	94 e3       	ldi	r25, 0x34	; 52
     f58:	ac e0       	ldi	r26, 0x0C	; 12
     f5a:	81 50       	subi	r24, 0x01	; 1
     f5c:	90 40       	sbci	r25, 0x00	; 0
     f5e:	a0 40       	sbci	r26, 0x00	; 0
     f60:	e1 f7       	brne	.-8      	; 0xf5a <main+0x60e>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <main+0x618>
     f64:	00 00       	nop
							_delay_ms(500);
						
							if(tries_allowed_counter>=3)
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	9e 15       	cp	r25, r14
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <main+0x622>
     f6c:	75 cf       	rjmp	.-278    	; 0xe58 <main+0x50c>
							{
								LCD_Clear_Screen();
     f6e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
								LCD_vSend_String("No Tries Allowed");
     f72:	8f e6       	ldi	r24, 0x6F	; 111
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
								LCD_Move_Cursor(2,1);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
								LCD_vSend_String("  BLOCK MODE");
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	94 e3       	ldi	r25, 0x34	; 52
     f8e:	ac e0       	ldi	r26, 0x0C	; 12
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	90 40       	sbci	r25, 0x00	; 0
     f94:	a0 40       	sbci	r26, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <main+0x644>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <main+0x64e>
     f9a:	00 00       	nop
								BLOCKED_MODE_FLAG=TRUE;
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	98 87       	std	Y+8, r25	; 0x08
			LCD_Clear_Screen();
			LCD_vSend_String("Session TimeOut");
			_delay_ms(500);
		}
		
		while(login_mode==NO_MODE)
     fa0:	af 81       	ldd	r26, Y+7	; 0x07
     fa2:	aa 23       	and	r26, r26
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <main+0x65c>
     fa6:	45 ce       	rjmp	.-886    	; 0xc32 <main+0x2e6>
     fa8:	89 c2       	rjmp	.+1298   	; 0x14bc <main+0xb70>
		/***********************************************/
		while(TIME_OUT_FLAG!=TRUE)	//LOOP while session time_out didn't finished
		{
			Key_Pressed=NOTPRESSED;
			
			switch(show_menu)
     faa:	85 30       	cpi	r24, 0x05	; 5
     fac:	09 f4       	brne	.+2      	; 0xfb0 <main+0x664>
     fae:	8f c1       	rjmp	.+798    	; 0x12ce <main+0x982>
     fb0:	86 30       	cpi	r24, 0x06	; 6
     fb2:	70 f4       	brcc	.+28     	; 0xfd0 <main+0x684>
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f4       	brne	.+2      	; 0xfba <main+0x66e>
     fb8:	af c0       	rjmp	.+350    	; 0x1118 <main+0x7cc>
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <main+0x678>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	a1 f7       	brne	.-24     	; 0xfaa <main+0x65e>
     fc2:	20 c0       	rjmp	.+64     	; 0x1004 <main+0x6b8>
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	09 f4       	brne	.+2      	; 0xfca <main+0x67e>
     fc8:	6c c1       	rjmp	.+728    	; 0x12a2 <main+0x956>
     fca:	84 30       	cpi	r24, 0x04	; 4
     fcc:	71 f7       	brne	.-36     	; 0xfaa <main+0x65e>
     fce:	74 c1       	rjmp	.+744    	; 0x12b8 <main+0x96c>
     fd0:	88 30       	cpi	r24, 0x08	; 8
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <main+0x68a>
     fd4:	15 c1       	rjmp	.+554    	; 0x1200 <main+0x8b4>
     fd6:	89 30       	cpi	r24, 0x09	; 9
     fd8:	30 f4       	brcc	.+12     	; 0xfe6 <main+0x69a>
     fda:	86 30       	cpi	r24, 0x06	; 6
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <main+0x694>
     fde:	82 c1       	rjmp	.+772    	; 0x12e4 <main+0x998>
     fe0:	87 30       	cpi	r24, 0x07	; 7
     fe2:	19 f7       	brne	.-58     	; 0xfaa <main+0x65e>
     fe4:	8a c1       	rjmp	.+788    	; 0x12fa <main+0x9ae>
     fe6:	89 30       	cpi	r24, 0x09	; 9
     fe8:	09 f4       	brne	.+2      	; 0xfec <main+0x6a0>
     fea:	92 c1       	rjmp	.+804    	; 0x1310 <main+0x9c4>
     fec:	8a 30       	cpi	r24, 0x0A	; 10
     fee:	e9 f6       	brne	.-70     	; 0xfaa <main+0x65e>
					Menu_Options(AIR_COND_CTRL_MENU,login_mode);
					show_menu=AIR_COND_MENU;
			   break;
			   
			   case TEMPREATURE_MENU:
					while(Tempreature==0 && TIME_OUT_FLAG==FALSE)
     ff0:	b9 85       	ldd	r27, Y+9	; 0x09
     ff2:	bb 23       	and	r27, r27
     ff4:	09 f0       	breq	.+2      	; 0xff8 <main+0x6ac>
     ff6:	5e c2       	rjmp	.+1212   	; 0x14b4 <main+0xb68>
     ff8:	80 91 85 02 	lds	r24, 0x0285
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <main+0x6b6>
    1000:	92 c1       	rjmp	.+804    	; 0x1326 <main+0x9da>
    1002:	58 c2       	rjmp	.+1200   	; 0x14b4 <main+0xb68>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	80 93 26 02 	sts	0x0226, r24
						LCD_Clear_Screen();
						LCD_vSend_String("1-Room1 2-Room2");
						LCD_Move_Cursor(2,1);
						if(login_mode==ADMIN_MODE)				//if user select admin mode choose this option
						{
							LCD_vSend_String("3-Room3 4-More");
    100a:	0f 2e       	mov	r0, r31
    100c:	f8 ea       	ldi	r31, 0xA8	; 168
    100e:	ef 2e       	mov	r14, r31
    1010:	f1 e0       	ldi	r31, 0x01	; 1
    1012:	ff 2e       	mov	r15, r31
    1014:	f0 2d       	mov	r31, r0
							show_menu=MORE_MENU;
						}
						else if(Key_Pressed != NOTPRESSED)
						{
							LCD_Clear_Screen();
							LCD_vSend_String("Wrong Input!");
    1016:	0f 2e       	mov	r0, r31
    1018:	fe e1       	ldi	r31, 0x1E	; 30
    101a:	af 2e       	mov	r10, r31
    101c:	f1 e0       	ldi	r31, 0x01	; 1
    101e:	bf 2e       	mov	r11, r31
    1020:	f0 2d       	mov	r31, r0
						{
							show_menu=ROOM3_MENU;
						}
						else if((Key_Pressed==ROOM4_SELECT) && (login_mode==GUEST_MODE))
						{
							show_menu=ROOM4_MENU;
    1022:	16 e0       	ldi	r17, 0x06	; 6
			switch(show_menu)
			{
				case MAIN_MENU:
					do 
					{
						LCD_Clear_Screen();
    1024:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						LCD_vSend_String("1-Room1 2-Room2");
    1028:	88 e9       	ldi	r24, 0x98	; 152
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
						LCD_Move_Cursor(2,1);
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
						if(login_mode==ADMIN_MODE)				//if user select admin mode choose this option
    1038:	01 30       	cpi	r16, 0x01	; 1
    103a:	21 f4       	brne	.+8      	; 0x1044 <main+0x6f8>
						{
							LCD_vSend_String("3-Room3 4-More");
    103c:	c7 01       	movw	r24, r14
    103e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <main+0x704>
						}
						else if(login_mode==GUEST_MODE)  		//if user select guest mode choose this option
    1044:	02 30       	cpi	r16, 0x02	; 2
    1046:	21 f4       	brne	.+8      	; 0x1050 <main+0x704>
						{
							LCD_vSend_String("3-Room3 4-Room4");	
    1048:	87 eb       	ldi	r24, 0xB7	; 183
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
						}
						
						do 
						{
							if((Session_Counter>=ADMIN_TIME_OUT && login_mode==ADMIN_MODE) || (Session_Counter>=GUEST_TIME_OUT && login_mode==GUEST_MODE))	//if session time expired
    1050:	80 91 86 02 	lds	r24, 0x0286
    1054:	90 91 87 02 	lds	r25, 0x0287
    1058:	e3 e0       	ldi	r30, 0x03	; 3
    105a:	88 3e       	cpi	r24, 0xE8	; 232
    105c:	9e 07       	cpc	r25, r30
    105e:	10 f0       	brcs	.+4      	; 0x1064 <main+0x718>
    1060:	01 30       	cpi	r16, 0x01	; 1
    1062:	51 f0       	breq	.+20     	; 0x1078 <main+0x72c>
    1064:	80 91 86 02 	lds	r24, 0x0286
    1068:	90 91 87 02 	lds	r25, 0x0287
    106c:	f3 e0       	ldi	r31, 0x03	; 3
    106e:	88 3e       	cpi	r24, 0xE8	; 232
    1070:	9f 07       	cpc	r25, r31
    1072:	30 f0       	brcs	.+12     	; 0x1080 <main+0x734>
    1074:	02 30       	cpi	r16, 0x02	; 2
    1076:	21 f4       	brne	.+8      	; 0x1080 <main+0x734>
							{
								TIME_OUT_FLAG=TRUE;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 85 02 	sts	0x0285, r24
								break;
    107e:	06 c0       	rjmp	.+12     	; 0x108c <main+0x740>
							}
							Key_Pressed=UART_u8ReceiveData();
    1080:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
    1084:	80 93 26 02 	sts	0x0226, r24
						} while (Key_Pressed==NOTPRESSED);
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	11 f3       	breq	.-60     	; 0x1050 <main+0x704>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	90 e7       	ldi	r25, 0x70	; 112
    1090:	a2 e0       	ldi	r26, 0x02	; 2
    1092:	81 50       	subi	r24, 0x01	; 1
    1094:	90 40       	sbci	r25, 0x00	; 0
    1096:	a0 40       	sbci	r26, 0x00	; 0
    1098:	e1 f7       	brne	.-8      	; 0x1092 <main+0x746>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <main+0x750>
    109c:	00 00       	nop
						_delay_ms(100);
						
						if(Key_Pressed==ROOM1_SELECT)
    109e:	80 91 26 02 	lds	r24, 0x0226
    10a2:	81 33       	cpi	r24, 0x31	; 49
    10a4:	21 f4       	brne	.+8      	; 0x10ae <main+0x762>
						{
							show_menu=ROOM1_MENU;
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	90 93 25 02 	sts	0x0225, r25
    10ac:	29 c0       	rjmp	.+82     	; 0x1100 <main+0x7b4>
						}
						else if(Key_Pressed==ROOM2_SELECT)
    10ae:	82 33       	cpi	r24, 0x32	; 50
    10b0:	21 f4       	brne	.+8      	; 0x10ba <main+0x76e>
						{
							show_menu=ROOM2_MENU;
    10b2:	a4 e0       	ldi	r26, 0x04	; 4
    10b4:	a0 93 25 02 	sts	0x0225, r26
    10b8:	23 c0       	rjmp	.+70     	; 0x1100 <main+0x7b4>
						}
						else if(Key_Pressed==ROOM3_SELECT)
    10ba:	83 33       	cpi	r24, 0x33	; 51
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <main+0x77a>
						{
							show_menu=ROOM3_MENU;
    10be:	b5 e0       	ldi	r27, 0x05	; 5
    10c0:	b0 93 25 02 	sts	0x0225, r27
    10c4:	1d c0       	rjmp	.+58     	; 0x1100 <main+0x7b4>
						}
						else if((Key_Pressed==ROOM4_SELECT) && (login_mode==GUEST_MODE))
    10c6:	84 33       	cpi	r24, 0x34	; 52
    10c8:	59 f4       	brne	.+22     	; 0x10e0 <main+0x794>
    10ca:	02 30       	cpi	r16, 0x02	; 2
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <main+0x788>
						{
							show_menu=ROOM4_MENU;
    10ce:	10 93 25 02 	sts	0x0225, r17
    10d2:	16 c0       	rjmp	.+44     	; 0x1100 <main+0x7b4>
						}
						else if((Key_Pressed==ADMIN_MORE_SELECT) && (login_mode==ADMIN_MODE))
    10d4:	01 30       	cpi	r16, 0x01	; 1
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <main+0x794>
						{
							show_menu=MORE_MENU;
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	80 93 25 02 	sts	0x0225, r24
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <main+0x7b4>
						}
						else if(Key_Pressed != NOTPRESSED)
    10e0:	8f 3f       	cpi	r24, 0xFF	; 255
    10e2:	a1 f0       	breq	.+40     	; 0x110c <main+0x7c0>
						{
							LCD_Clear_Screen();
    10e4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Wrong Input!");
    10e8:	c5 01       	movw	r24, r10
    10ea:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	94 e3       	ldi	r25, 0x34	; 52
    10f2:	ac e0       	ldi	r26, 0x0C	; 12
    10f4:	81 50       	subi	r24, 0x01	; 1
    10f6:	90 40       	sbci	r25, 0x00	; 0
    10f8:	a0 40       	sbci	r26, 0x00	; 0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <main+0x7a8>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <main+0x7b2>
    10fe:	00 00       	nop
							_delay_ms(500);
						}
					} while (((Key_Pressed<'1') || (Key_Pressed>'4') )&& TIME_OUT_FLAG==FALSE);	
    1100:	80 91 26 02 	lds	r24, 0x0226
    1104:	81 53       	subi	r24, 0x31	; 49
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	08 f4       	brcc	.+2      	; 0x110c <main+0x7c0>
    110a:	e1 c1       	rjmp	.+962    	; 0x14ce <main+0xb82>
    110c:	80 91 85 02 	lds	r24, 0x0285
    1110:	88 23       	and	r24, r24
    1112:	09 f4       	brne	.+2      	; 0x1116 <main+0x7ca>
    1114:	87 cf       	rjmp	.-242    	; 0x1024 <main+0x6d8>
    1116:	db c1       	rjmp	.+950    	; 0x14ce <main+0xb82>
				break;//end of MAIN menu
				
				case MORE_MENU:
					do 
					{
						Key_Pressed=NOTPRESSED;
    1118:	1f ef       	ldi	r17, 0xFF	; 255
							show_menu=MAIN_MENU;
						}
						else
						{
							LCD_Clear_Screen();
							LCD_vSend_String("Wrong Input!");
    111a:	0f 2e       	mov	r0, r31
    111c:	fe e1       	ldi	r31, 0x1E	; 30
    111e:	ef 2e       	mov	r14, r31
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	ff 2e       	mov	r15, r31
    1124:	f0 2d       	mov	r31, r0
						{
							show_menu=TV_MENU;
						}
						else if (Key_Pressed==AIR_COND_SELECT)
						{
							show_menu=AIR_COND_MENU;
    1126:	aa 24       	eor	r10, r10
    1128:	68 94       	set
    112a:	a3 f8       	bld	r10, 3
				break;//end of MAIN menu
				
				case MORE_MENU:
					do 
					{
						Key_Pressed=NOTPRESSED;
    112c:	10 93 26 02 	sts	0x0226, r17
						LCD_Clear_Screen();
    1130:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						LCD_vSend_String("1-Room4 2-TV");
    1134:	87 ec       	ldi	r24, 0xC7	; 199
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
						LCD_Move_Cursor(2,1);
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
						LCD_vSend_String("3-Air Cond. 4-Ret");
    1144:	84 ed       	ldi	r24, 0xD4	; 212
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
						do 
						{
							if((Session_Counter>=ADMIN_TIME_OUT && login_mode==ADMIN_MODE) || (Session_Counter>=GUEST_TIME_OUT && login_mode==GUEST_MODE) )	//if session time expired
    114c:	80 91 86 02 	lds	r24, 0x0286
    1150:	90 91 87 02 	lds	r25, 0x0287
    1154:	a3 e0       	ldi	r26, 0x03	; 3
    1156:	88 3e       	cpi	r24, 0xE8	; 232
    1158:	9a 07       	cpc	r25, r26
    115a:	10 f0       	brcs	.+4      	; 0x1160 <main+0x814>
    115c:	01 30       	cpi	r16, 0x01	; 1
    115e:	51 f0       	breq	.+20     	; 0x1174 <main+0x828>
    1160:	80 91 86 02 	lds	r24, 0x0286
    1164:	90 91 87 02 	lds	r25, 0x0287
    1168:	b3 e0       	ldi	r27, 0x03	; 3
    116a:	88 3e       	cpi	r24, 0xE8	; 232
    116c:	9b 07       	cpc	r25, r27
    116e:	30 f0       	brcs	.+12     	; 0x117c <main+0x830>
    1170:	02 30       	cpi	r16, 0x02	; 2
    1172:	21 f4       	brne	.+8      	; 0x117c <main+0x830>
								{
									TIME_OUT_FLAG=TRUE;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	80 93 85 02 	sts	0x0285, r24
									break;
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <main+0x83c>
								}
							
							Key_Pressed=UART_u8ReceiveData();
    117c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
    1180:	80 93 26 02 	sts	0x0226, r24
						} while (Key_Pressed==NOTPRESSED);
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	11 f3       	breq	.-60     	; 0x114c <main+0x800>
    1188:	8f e7       	ldi	r24, 0x7F	; 127
    118a:	9a e1       	ldi	r25, 0x1A	; 26
    118c:	a6 e0       	ldi	r26, 0x06	; 6
    118e:	81 50       	subi	r24, 0x01	; 1
    1190:	90 40       	sbci	r25, 0x00	; 0
    1192:	a0 40       	sbci	r26, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <main+0x842>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <main+0x84c>
    1198:	00 00       	nop
						_delay_ms(250);
						
						if (Key_Pressed==ROOM4_ADMIN_SELECT)
    119a:	80 91 26 02 	lds	r24, 0x0226
    119e:	81 33       	cpi	r24, 0x31	; 49
    11a0:	21 f4       	brne	.+8      	; 0x11aa <main+0x85e>
						{
							show_menu=ROOM4_MENU;
    11a2:	96 e0       	ldi	r25, 0x06	; 6
    11a4:	90 93 25 02 	sts	0x0225, r25
    11a8:	1f c0       	rjmp	.+62     	; 0x11e8 <main+0x89c>
						}
						else if (Key_Pressed==TV_SELECT)
    11aa:	82 33       	cpi	r24, 0x32	; 50
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <main+0x86a>
						{
							show_menu=TV_MENU;
    11ae:	a7 e0       	ldi	r26, 0x07	; 7
    11b0:	a0 93 25 02 	sts	0x0225, r26
    11b4:	19 c0       	rjmp	.+50     	; 0x11e8 <main+0x89c>
						}
						else if (Key_Pressed==AIR_COND_SELECT)
    11b6:	83 33       	cpi	r24, 0x33	; 51
    11b8:	19 f4       	brne	.+6      	; 0x11c0 <main+0x874>
						{
							show_menu=AIR_COND_MENU;
    11ba:	a0 92 25 02 	sts	0x0225, r10
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <main+0x89c>
						}
						else if (Key_Pressed==ADMIN_RET_OPT)
    11c0:	84 33       	cpi	r24, 0x34	; 52
    11c2:	21 f4       	brne	.+8      	; 0x11cc <main+0x880>
						{
							show_menu=MAIN_MENU;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 25 02 	sts	0x0225, r24
    11ca:	0e c0       	rjmp	.+28     	; 0x11e8 <main+0x89c>
						}
						else
						{
							LCD_Clear_Screen();
    11cc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Wrong Input!");
    11d0:	c7 01       	movw	r24, r14
    11d2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	94 e3       	ldi	r25, 0x34	; 52
    11da:	ac e0       	ldi	r26, 0x0C	; 12
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	90 40       	sbci	r25, 0x00	; 0
    11e0:	a0 40       	sbci	r26, 0x00	; 0
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <main+0x890>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <main+0x89a>
    11e6:	00 00       	nop
							_delay_ms(500);
						}
					} while (((Key_Pressed<'1') || (Key_Pressed>'4')) && TIME_OUT_FLAG==FALSE);
    11e8:	80 91 26 02 	lds	r24, 0x0226
    11ec:	81 53       	subi	r24, 0x31	; 49
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <main+0x8a8>
    11f2:	6d c1       	rjmp	.+730    	; 0x14ce <main+0xb82>
    11f4:	80 91 85 02 	lds	r24, 0x0285
    11f8:	88 23       	and	r24, r24
    11fa:	09 f4       	brne	.+2      	; 0x11fe <main+0x8b2>
    11fc:	97 cf       	rjmp	.-210    	; 0x112c <main+0x7e0>
    11fe:	67 c1       	rjmp	.+718    	; 0x14ce <main+0xb82>
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	80 93 26 02 	sts	0x0226, r24
			 
			 case AIR_COND_MENU:
				Key_Pressed=NOTPRESSED;
				do 
				{
					LCD_Clear_Screen();
    1206:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
					LCD_vSend_String("1-Set Tempreature");
    120a:	c2 01       	movw	r24, r4
    120c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
					LCD_Move_Cursor(2,1);
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
					LCD_vSend_String("2-Control 3-Ret");
    1218:	88 ef       	ldi	r24, 0xF8	; 248
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
					do 
					{
						if((Session_Counter>=ADMIN_TIME_OUT) && (login_mode==ADMIN_MODE))	//if session time expired
    1220:	80 91 86 02 	lds	r24, 0x0286
    1224:	90 91 87 02 	lds	r25, 0x0287
    1228:	a3 e0       	ldi	r26, 0x03	; 3
    122a:	88 3e       	cpi	r24, 0xE8	; 232
    122c:	9a 07       	cpc	r25, r26
    122e:	30 f0       	brcs	.+12     	; 0x123c <main+0x8f0>
    1230:	01 30       	cpi	r16, 0x01	; 1
    1232:	21 f4       	brne	.+8      	; 0x123c <main+0x8f0>
						{
							TIME_OUT_FLAG=TRUE;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	80 93 85 02 	sts	0x0285, r24
							break;
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <main+0x8fc>
						}
						Key_Pressed=UART_u8ReceiveData();
    123c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
    1240:	80 93 26 02 	sts	0x0226, r24
					} while (Key_Pressed==NOTPRESSED);
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	61 f3       	breq	.-40     	; 0x1220 <main+0x8d4>
    1248:	8f e7       	ldi	r24, 0x7F	; 127
    124a:	9a e1       	ldi	r25, 0x1A	; 26
    124c:	a6 e0       	ldi	r26, 0x06	; 6
    124e:	81 50       	subi	r24, 0x01	; 1
    1250:	90 40       	sbci	r25, 0x00	; 0
    1252:	a0 40       	sbci	r26, 0x00	; 0
    1254:	e1 f7       	brne	.-8      	; 0x124e <main+0x902>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <main+0x90c>
    1258:	00 00       	nop
					_delay_ms(250);
					if(Key_Pressed==SELECT_SET_TEMP)
    125a:	80 91 26 02 	lds	r24, 0x0226
    125e:	81 33       	cpi	r24, 0x31	; 49
    1260:	21 f4       	brne	.+8      	; 0x126a <main+0x91e>
					{
						show_menu=TEMPREATURE_MENU;
    1262:	8a e0       	ldi	r24, 0x0A	; 10
    1264:	80 93 25 02 	sts	0x0225, r24
    1268:	32 c1       	rjmp	.+612    	; 0x14ce <main+0xb82>
					}
					else if(Key_Pressed==SELECT_AIR_COND_CTRL)	
    126a:	82 33       	cpi	r24, 0x32	; 50
    126c:	21 f4       	brne	.+8      	; 0x1276 <main+0x92a>
					{
						show_menu=AIR_COND_CTRL_MENU;
    126e:	89 e0       	ldi	r24, 0x09	; 9
    1270:	80 93 25 02 	sts	0x0225, r24
    1274:	2c c1       	rjmp	.+600    	; 0x14ce <main+0xb82>
					}
					else if(Key_Pressed==SELECT_AIR_COND_RET)
    1276:	83 33       	cpi	r24, 0x33	; 51
    1278:	21 f4       	brne	.+8      	; 0x1282 <main+0x936>
					{
						show_menu=MORE_MENU;
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	80 93 25 02 	sts	0x0225, r24
    1280:	26 c1       	rjmp	.+588    	; 0x14ce <main+0xb82>
					}		
					else
					{
						LCD_Clear_Screen();
    1282:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						LCD_vSend_String("Wrong Input!");
    1286:	8e e1       	ldi	r24, 0x1E	; 30
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	94 e3       	ldi	r25, 0x34	; 52
    1292:	ac e0       	ldi	r26, 0x0C	; 12
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	90 40       	sbci	r25, 0x00	; 0
    1298:	a0 40       	sbci	r26, 0x00	; 0
    129a:	e1 f7       	brne	.-8      	; 0x1294 <main+0x948>
    129c:	00 c0       	rjmp	.+0      	; 0x129e <main+0x952>
    129e:	00 00       	nop
    12a0:	16 c1       	rjmp	.+556    	; 0x14ce <main+0xb82>
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	80 93 26 02 	sts	0x0226, r24
					
				} while (((Key_Pressed<'1') && (Key_Pressed>'3')) && (TIME_OUT_FLAG==FALSE));												
			 break;
			 
			 case ROOM1_MENU:
				Menu_Options(ROOM1_MENU,login_mode);
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	60 2f       	mov	r22, r16
    12ac:	0e 94 18 0b 	call	0x1630	; 0x1630 <Menu_Options>
				show_menu=MAIN_MENU;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 25 02 	sts	0x0225, r24
			 break;
    12b6:	0b c1       	rjmp	.+534    	; 0x14ce <main+0xb82>
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	80 93 26 02 	sts	0x0226, r24
			 
			 case ROOM2_MENU:
				  Menu_Options(ROOM2_MENU,login_mode);
    12be:	84 e0       	ldi	r24, 0x04	; 4
    12c0:	60 2f       	mov	r22, r16
    12c2:	0e 94 18 0b 	call	0x1630	; 0x1630 <Menu_Options>
				  show_menu=MAIN_MENU;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 25 02 	sts	0x0225, r24
			  break;
    12cc:	00 c1       	rjmp	.+512    	; 0x14ce <main+0xb82>
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	80 93 26 02 	sts	0x0226, r24
			  
			  case ROOM3_MENU:
				   Menu_Options(ROOM3_MENU,login_mode);
    12d4:	85 e0       	ldi	r24, 0x05	; 5
    12d6:	60 2f       	mov	r22, r16
    12d8:	0e 94 18 0b 	call	0x1630	; 0x1630 <Menu_Options>
				   show_menu=MAIN_MENU;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 25 02 	sts	0x0225, r24
			   break;
    12e2:	f5 c0       	rjmp	.+490    	; 0x14ce <main+0xb82>
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	80 93 26 02 	sts	0x0226, r24
			   
			   case ROOM4_MENU:
					Menu_Options(ROOM4_MENU,login_mode);
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	60 2f       	mov	r22, r16
    12ee:	0e 94 18 0b 	call	0x1630	; 0x1630 <Menu_Options>
					show_menu=MAIN_MENU;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 93 25 02 	sts	0x0225, r24
			   break;
    12f8:	ea c0       	rjmp	.+468    	; 0x14ce <main+0xb82>
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	80 93 26 02 	sts	0x0226, r24
			   
			   case TV_MENU:
					 Menu_Options(TV_MENU,login_mode);
    1300:	87 e0       	ldi	r24, 0x07	; 7
    1302:	60 2f       	mov	r22, r16
    1304:	0e 94 18 0b 	call	0x1630	; 0x1630 <Menu_Options>
					 show_menu=MORE_MENU;
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	80 93 25 02 	sts	0x0225, r24
			   break;
    130e:	df c0       	rjmp	.+446    	; 0x14ce <main+0xb82>
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	80 93 26 02 	sts	0x0226, r24
			   
			   case AIR_COND_CTRL_MENU:
					Menu_Options(AIR_COND_CTRL_MENU,login_mode);
    1316:	89 e0       	ldi	r24, 0x09	; 9
    1318:	60 2f       	mov	r22, r16
    131a:	0e 94 18 0b 	call	0x1630	; 0x1630 <Menu_Options>
					show_menu=AIR_COND_MENU;
    131e:	88 e0       	ldi	r24, 0x08	; 8
    1320:	80 93 25 02 	sts	0x0225, r24
			   break;
    1324:	d4 c0       	rjmp	.+424    	; 0x14ce <main+0xb82>
			   
			   case TEMPREATURE_MENU:
					while(Tempreature==0 && TIME_OUT_FLAG==FALSE)
					{
						Key_Pressed=NOTPRESSED;
    1326:	1f ef       	ldi	r17, 0xFF	; 255
						}
						
						if((Key_Pressed<'0') || (Key_Pressed>'9'))
						{
							LCD_Clear_Screen();
							LCD_vSend_String("Wrong Input!");
    1328:	0f 2e       	mov	r0, r31
    132a:	fe e1       	ldi	r31, 0x1E	; 30
    132c:	ef 2e       	mov	r14, r31
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	ff 2e       	mov	r15, r31
    1332:	f0 2d       	mov	r31, r0
			   break;
			   
			   case TEMPREATURE_MENU:
					while(Tempreature==0 && TIME_OUT_FLAG==FALSE)
					{
						Key_Pressed=NOTPRESSED;
    1334:	10 93 26 02 	sts	0x0226, r17
						LCD_Clear_Screen();
    1338:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						LCD_vSend_String("Set Temp.=__");
    133c:	88 e0       	ldi	r24, 0x08	; 8
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
						LCD_vSend_char(DEGREE_SYMBOL);
    1344:	8f ed       	ldi	r24, 0xDF	; 223
    1346:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
						LCD_vSend_char('C');
    134a:	83 e4       	ldi	r24, 0x43	; 67
    134c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
						LCD_Move_Cursor(1,11);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	6b e0       	ldi	r22, 0x0B	; 11
    1354:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
						/**********TO GET TENS NUMBER OF TEMP**************/
						do
						{
							if((Session_Counter>=ADMIN_TIME_OUT) && (login_mode==ADMIN_MODE))
    1358:	80 91 86 02 	lds	r24, 0x0286
    135c:	90 91 87 02 	lds	r25, 0x0287
    1360:	a3 e0       	ldi	r26, 0x03	; 3
    1362:	88 3e       	cpi	r24, 0xE8	; 232
    1364:	9a 07       	cpc	r25, r26
    1366:	30 f0       	brcs	.+12     	; 0x1374 <main+0xa28>
    1368:	01 30       	cpi	r16, 0x01	; 1
    136a:	21 f4       	brne	.+8      	; 0x1374 <main+0xa28>
							{
								TIME_OUT_FLAG=TRUE;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 85 02 	sts	0x0285, r24
								break;
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <main+0xa34>
							}
							Key_Pressed=UART_u8ReceiveData();
    1374:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
    1378:	80 93 26 02 	sts	0x0226, r24
						} while (Key_Pressed==NOTPRESSED);
    137c:	8f 3f       	cpi	r24, 0xFF	; 255
    137e:	61 f3       	breq	.-40     	; 0x1358 <main+0xa0c>
    1380:	8f e7       	ldi	r24, 0x7F	; 127
    1382:	9a e1       	ldi	r25, 0x1A	; 26
    1384:	a6 e0       	ldi	r26, 0x06	; 6
    1386:	81 50       	subi	r24, 0x01	; 1
    1388:	90 40       	sbci	r25, 0x00	; 0
    138a:	a0 40       	sbci	r26, 0x00	; 0
    138c:	e1 f7       	brne	.-8      	; 0x1386 <main+0xa3a>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <main+0xa44>
    1390:	00 00       	nop
						_delay_ms(250);
						
						if(TIME_OUT_FLAG==TRUE)
    1392:	80 91 85 02 	lds	r24, 0x0285
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	09 f4       	brne	.+2      	; 0x139c <main+0xa50>
    139a:	8c c0       	rjmp	.+280    	; 0x14b4 <main+0xb68>
						{
							break;
						}
						
						if((Key_Pressed<'0') || (Key_Pressed>'9'))
    139c:	80 91 26 02 	lds	r24, 0x0226
    13a0:	98 2f       	mov	r25, r24
    13a2:	90 53       	subi	r25, 0x30	; 48
    13a4:	9a 30       	cpi	r25, 0x0A	; 10
    13a6:	78 f0       	brcs	.+30     	; 0x13c6 <main+0xa7a>
						{
							LCD_Clear_Screen();
    13a8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Wrong Input!");
    13ac:	c7 01       	movw	r24, r14
    13ae:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	94 e3       	ldi	r25, 0x34	; 52
    13b6:	ac e0       	ldi	r26, 0x0C	; 12
    13b8:	81 50       	subi	r24, 0x01	; 1
    13ba:	90 40       	sbci	r25, 0x00	; 0
    13bc:	a0 40       	sbci	r26, 0x00	; 0
    13be:	e1 f7       	brne	.-8      	; 0x13b8 <main+0xa6c>
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <main+0xa76>
    13c2:	00 00       	nop
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <main+0xa8a>
							_delay_ms(500);
						}
						else
						{
							LCD_vSend_char(Key_Pressed);
    13c6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
							Temp_Tens=(Key_Pressed-VARIABLE_TO_GET_ASCII);
    13ca:	80 91 26 02 	lds	r24, 0x0226
    13ce:	80 53       	subi	r24, 0x30	; 48
    13d0:	8b 87       	std	Y+11, r24	; 0x0b
							Key_Pressed=NOTPRESSED;
    13d2:	10 93 26 02 	sts	0x0226, r17
						}
						/***************************************************/
						/**********TO GET UNITS NUMBER OF TEMP**************/
						do
						{
							if((Session_Counter>=ADMIN_TIME_OUT) && (login_mode==ADMIN_MODE))
    13d6:	80 91 86 02 	lds	r24, 0x0286
    13da:	90 91 87 02 	lds	r25, 0x0287
    13de:	a3 e0       	ldi	r26, 0x03	; 3
    13e0:	88 3e       	cpi	r24, 0xE8	; 232
    13e2:	9a 07       	cpc	r25, r26
    13e4:	30 f0       	brcs	.+12     	; 0x13f2 <main+0xaa6>
    13e6:	01 30       	cpi	r16, 0x01	; 1
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <main+0xaa6>
							{
								TIME_OUT_FLAG=TRUE;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 85 02 	sts	0x0285, r24
								break;
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <main+0xab2>
							}
							Key_Pressed=UART_u8ReceiveData();
    13f2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
    13f6:	80 93 26 02 	sts	0x0226, r24
						} while (Key_Pressed==NOTPRESSED);
    13fa:	8f 3f       	cpi	r24, 0xFF	; 255
    13fc:	61 f3       	breq	.-40     	; 0x13d6 <main+0xa8a>
    13fe:	8f e7       	ldi	r24, 0x7F	; 127
    1400:	9a e1       	ldi	r25, 0x1A	; 26
    1402:	a6 e0       	ldi	r26, 0x06	; 6
    1404:	81 50       	subi	r24, 0x01	; 1
    1406:	90 40       	sbci	r25, 0x00	; 0
    1408:	a0 40       	sbci	r26, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <main+0xab8>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <main+0xac2>
    140e:	00 00       	nop
						_delay_ms(250);
						
						if(TIME_OUT_FLAG==TRUE)
    1410:	80 91 85 02 	lds	r24, 0x0285
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	09 f4       	brne	.+2      	; 0x141a <main+0xace>
    1418:	4d c0       	rjmp	.+154    	; 0x14b4 <main+0xb68>
						{
							break;
						}
						if((Key_Pressed<'0') || (Key_Pressed>'9'))
    141a:	80 91 26 02 	lds	r24, 0x0226
    141e:	98 2f       	mov	r25, r24
    1420:	90 53       	subi	r25, 0x30	; 48
    1422:	9a 30       	cpi	r25, 0x0A	; 10
    1424:	78 f0       	brcs	.+30     	; 0x1444 <main+0xaf8>
						{
							LCD_Clear_Screen();
    1426:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
							LCD_vSend_String("Wrong Input!");
    142a:	c7 01       	movw	r24, r14
    142c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    1430:	8f ef       	ldi	r24, 0xFF	; 255
    1432:	94 e3       	ldi	r25, 0x34	; 52
    1434:	ac e0       	ldi	r26, 0x0C	; 12
    1436:	81 50       	subi	r24, 0x01	; 1
    1438:	90 40       	sbci	r25, 0x00	; 0
    143a:	a0 40       	sbci	r26, 0x00	; 0
    143c:	e1 f7       	brne	.-8      	; 0x1436 <main+0xaea>
    143e:	00 c0       	rjmp	.+0      	; 0x1440 <main+0xaf4>
    1440:	00 00       	nop
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <main+0xb08>
							_delay_ms(500);
						}
						else
						{
							LCD_vSend_char(Key_Pressed);
    1444:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
							Temp_Units=(Key_Pressed-VARIABLE_TO_GET_ASCII);
    1448:	80 91 26 02 	lds	r24, 0x0226
    144c:	80 53       	subi	r24, 0x30	; 48
    144e:	8a 87       	std	Y+10, r24	; 0x0a
							Key_Pressed=NOTPRESSED;
    1450:	10 93 26 02 	sts	0x0226, r17
						}
						/***************************************************/
						Tempreature=(Temp_Tens*10)+(Temp_Units);
    1454:	8b 85       	ldd	r24, Y+11	; 0x0b
    1456:	88 0f       	add	r24, r24
    1458:	98 2f       	mov	r25, r24
    145a:	99 0f       	add	r25, r25
    145c:	99 0f       	add	r25, r25
    145e:	89 0f       	add	r24, r25
    1460:	aa 84       	ldd	r10, Y+10	; 0x0a
    1462:	a8 0e       	add	r10, r24
						SPI_MasterTransmitchar(SET_TEMP);
    1464:	80 e4       	ldi	r24, 0x40	; 64
    1466:	0e 94 2e 0c 	call	0x185c	; 0x185c <SPI_MasterTransmitchar>
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	91 ee       	ldi	r25, 0xE1	; 225
    146e:	a4 e0       	ldi	r26, 0x04	; 4
    1470:	81 50       	subi	r24, 0x01	; 1
    1472:	90 40       	sbci	r25, 0x00	; 0
    1474:	a0 40       	sbci	r26, 0x00	; 0
    1476:	e1 f7       	brne	.-8      	; 0x1470 <main+0xb24>
    1478:	00 c0       	rjmp	.+0      	; 0x147a <main+0xb2e>
    147a:	00 00       	nop
						_delay_ms(200);
						SPI_MasterTransmitchar(Tempreature);
    147c:	8a 2d       	mov	r24, r10
    147e:	0e 94 2e 0c 	call	0x185c	; 0x185c <SPI_MasterTransmitchar>
						
						LCD_Clear_Screen();
    1482:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
						LCD_vSend_String("Tempreature set");
    1486:	85 e1       	ldi	r24, 0x15	; 21
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	94 e3       	ldi	r25, 0x34	; 52
    1492:	ac e0       	ldi	r26, 0x0C	; 12
    1494:	81 50       	subi	r24, 0x01	; 1
    1496:	90 40       	sbci	r25, 0x00	; 0
    1498:	a0 40       	sbci	r26, 0x00	; 0
    149a:	e1 f7       	brne	.-8      	; 0x1494 <main+0xb48>
    149c:	00 c0       	rjmp	.+0      	; 0x149e <main+0xb52>
    149e:	00 00       	nop
					Menu_Options(AIR_COND_CTRL_MENU,login_mode);
					show_menu=AIR_COND_MENU;
			   break;
			   
			   case TEMPREATURE_MENU:
					while(Tempreature==0 && TIME_OUT_FLAG==FALSE)
    14a0:	aa 20       	and	r10, r10
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <main+0xb66>
    14a4:	80 91 85 02 	lds	r24, 0x0285
    14a8:	88 23       	and	r24, r24
    14aa:	09 f4       	brne	.+2      	; 0x14ae <main+0xb62>
    14ac:	43 cf       	rjmp	.-378    	; 0x1334 <main+0x9e8>
							LCD_vSend_char(Key_Pressed);
							Temp_Units=(Key_Pressed-VARIABLE_TO_GET_ASCII);
							Key_Pressed=NOTPRESSED;
						}
						/***************************************************/
						Tempreature=(Temp_Tens*10)+(Temp_Units);
    14ae:	a9 86       	std	Y+9, r10	; 0x09
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <main+0xb68>
    14b2:	a9 86       	std	Y+9, r10	; 0x09
						
						LCD_Clear_Screen();
						LCD_vSend_String("Tempreature set");
						_delay_ms(500);
					}
					show_menu=AIR_COND_MENU;
    14b4:	88 e0       	ldi	r24, 0x08	; 8
    14b6:	80 93 25 02 	sts	0x0225, r24
					break;
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <main+0xb82>
			 case AIR_COND_MENU:
				Key_Pressed=NOTPRESSED;
				do 
				{
					LCD_Clear_Screen();
					LCD_vSend_String("1-Set Tempreature");
    14bc:	0f 2e       	mov	r0, r31
    14be:	f6 ee       	ldi	r31, 0xE6	; 230
    14c0:	4f 2e       	mov	r4, r31
    14c2:	f1 e0       	ldi	r31, 0x01	; 1
    14c4:	5f 2e       	mov	r5, r31
    14c6:	f0 2d       	mov	r31, r0
						{
							LCD_vSend_String("3-Room3 4-More");
						}
						else if(login_mode==GUEST_MODE)  		//if user select guest mode choose this option
						{
							LCD_vSend_String("3-Room3 4-Room4");	
    14c8:	0f 81       	ldd	r16, Y+7	; 0x07
    14ca:	cd 2c       	mov	r12, r13
    14cc:	de 2c       	mov	r13, r14
		/***********************************************/
		while(TIME_OUT_FLAG!=TRUE)	//LOOP while session time_out didn't finished
		{
			Key_Pressed=NOTPRESSED;
			
			switch(show_menu)
    14ce:	80 91 25 02 	lds	r24, 0x0225
				break;
			}//end of Modes_switch
						
		}//end of Selection mode			
		/***********************************************/
		while(TIME_OUT_FLAG!=TRUE)	//LOOP while session time_out didn't finished
    14d2:	90 91 85 02 	lds	r25, 0x0285
    14d6:	91 30       	cpi	r25, 0x01	; 1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <main+0xb90>
    14da:	6a cb       	rjmp	.-2348   	; 0xbb0 <main+0x264>
    14dc:	66 cd       	rjmp	.-1332   	; 0xfaa <main+0x65e>

000014de <__vector_10>:
	}
}

/******session timeout********/
ISR(TIMER0_COMP_vect)//ISR for session timeout
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	8f 93       	push	r24
    14ea:	9f 93       	push	r25
	Session_Counter++;
    14ec:	80 91 86 02 	lds	r24, 0x0286
    14f0:	90 91 87 02 	lds	r25, 0x0287
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	90 93 87 02 	sts	0x0287, r25
    14fa:	80 93 86 02 	sts	0x0286, r24
}
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_1>:

/*****************************/
/********for living room AND GARGAE***********/

ISR(INT0_vect)//ISR to turn on livingroom led
{
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
	LED_vTurnOn(MODES_LED_PORTS,LIVING_ROOM_LED1);
    152e:	83 e4       	ldi	r24, 0x43	; 67
    1530:	63 e0       	ldi	r22, 0x03	; 3
    1532:	0e 94 9b 04 	call	0x936	; 0x936 <LED_vTurnOn>
	LED_vTurnOn(MODES_LED_PORTS,LIVING_ROOM_LED2);
    1536:	83 e4       	ldi	r24, 0x43	; 67
    1538:	64 e0       	ldi	r22, 0x04	; 4
    153a:	0e 94 9b 04 	call	0x936	; 0x936 <LED_vTurnOn>
	Timer2_OverFlow_Init_interrupt();//start timer 2 go to ISR every 1 sec;
    153e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Timer2_OverFlow_Init_interrupt>
}
    1542:	ff 91       	pop	r31
    1544:	ef 91       	pop	r30
    1546:	bf 91       	pop	r27
    1548:	af 91       	pop	r26
    154a:	9f 91       	pop	r25
    154c:	8f 91       	pop	r24
    154e:	7f 91       	pop	r23
    1550:	6f 91       	pop	r22
    1552:	5f 91       	pop	r21
    1554:	4f 91       	pop	r20
    1556:	3f 91       	pop	r19
    1558:	2f 91       	pop	r18
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <__vector_2>:

ISR(INT1_vect)//ISR to turn on livingroom led
{
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	7f 93       	push	r23
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	af 93       	push	r26
    1580:	bf 93       	push	r27
    1582:	ef 93       	push	r30
    1584:	ff 93       	push	r31
	Timer1_wave_fastPWM_servo_postive(90);
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	84 eb       	ldi	r24, 0xB4	; 180
    158c:	92 e4       	ldi	r25, 0x42	; 66
    158e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Timer1_wave_fastPWM_servo_postive>
	Timer2_OverFlow_Init_interrupt();//start timer 2 go to ISR every 1 sec;
    1592:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Timer2_OverFlow_Init_interrupt>
}
    1596:	ff 91       	pop	r31
    1598:	ef 91       	pop	r30
    159a:	bf 91       	pop	r27
    159c:	af 91       	pop	r26
    159e:	9f 91       	pop	r25
    15a0:	8f 91       	pop	r24
    15a2:	7f 91       	pop	r23
    15a4:	6f 91       	pop	r22
    15a6:	5f 91       	pop	r21
    15a8:	4f 91       	pop	r20
    15aa:	3f 91       	pop	r19
    15ac:	2f 91       	pop	r18
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0f 90       	pop	r0
    15b4:	1f 90       	pop	r1
    15b6:	18 95       	reti

000015b8 <__vector_5>:

ISR(TIMER2_OVF_vect)//ISR to count the time of the living room leds
{
    15b8:	1f 92       	push	r1
    15ba:	0f 92       	push	r0
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
	secondes_counter++;
    15da:	80 91 84 02 	lds	r24, 0x0284
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	80 93 84 02 	sts	0x0284, r24
	if(secondes_counter>=5)
    15e4:	80 91 84 02 	lds	r24, 0x0284
    15e8:	85 30       	cpi	r24, 0x05	; 5
    15ea:	88 f0       	brcs	.+34     	; 0x160e <__vector_5+0x56>
	{
		secondes_counter=0;
    15ec:	10 92 84 02 	sts	0x0284, r1
		LED_vTurnOFF(MODES_LED_PORTS,LIVING_ROOM_LED1);
    15f0:	83 e4       	ldi	r24, 0x43	; 67
    15f2:	63 e0       	ldi	r22, 0x03	; 3
    15f4:	0e 94 9f 04 	call	0x93e	; 0x93e <LED_vTurnOFF>
		LED_vTurnOFF(MODES_LED_PORTS,LIVING_ROOM_LED2);
    15f8:	83 e4       	ldi	r24, 0x43	; 67
    15fa:	64 e0       	ldi	r22, 0x04	; 4
    15fc:	0e 94 9f 04 	call	0x93e	; 0x93e <LED_vTurnOFF>
		
		Timer1_wave_fastPWM_servo_postive(0);
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	cb 01       	movw	r24, r22
    1606:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Timer1_wave_fastPWM_servo_postive>
		Timer2_Stop_OverFlow();
    160a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Timer2_Stop_OverFlow>
	}
}
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	7f 91       	pop	r23
    161c:	6f 91       	pop	r22
    161e:	5f 91       	pop	r21
    1620:	4f 91       	pop	r20
    1622:	3f 91       	pop	r19
    1624:	2f 91       	pop	r18
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	0f 90       	pop	r0
    162c:	1f 90       	pop	r1
    162e:	18 95       	reti

00001630 <Menu_Options>:
extern char Key_Pressed;
extern char show_menu;
/*************************************/

void Menu_Options(const char Selected_Room,const char Selected_mode)
{
    1630:	3f 92       	push	r3
    1632:	4f 92       	push	r4
    1634:	5f 92       	push	r5
    1636:	6f 92       	push	r6
    1638:	7f 92       	push	r7
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	c8 2f       	mov	r28, r24
	char Receive;									//variable to Exchange the data with slave
	char Status_Code=DUMMYDATA;						//variable to carry the status of the room
	char TURN_ON_CODE=DUMMYDATA;					//variable to carry the on message of the room	
	char TURN_OFF_CODE=DUMMYDATA;					//variable to carry the on message of the room	
	/**********************************************/
	Key_Pressed=NOTPRESSED;
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	80 93 26 02 	sts	0x0226, r24
{
	/*************** VARIABLES ********************/
	char Receive;									//variable to Exchange the data with slave
	char Status_Code=DUMMYDATA;						//variable to carry the status of the room
	char TURN_ON_CODE=DUMMYDATA;					//variable to carry the on message of the room	
	char TURN_OFF_CODE=DUMMYDATA;					//variable to carry the on message of the room	
    165a:	0f ef       	ldi	r16, 0xFF	; 255
void Menu_Options(const char Selected_Room,const char Selected_mode)
{
	/*************** VARIABLES ********************/
	char Receive;									//variable to Exchange the data with slave
	char Status_Code=DUMMYDATA;						//variable to carry the status of the room
	char TURN_ON_CODE=DUMMYDATA;					//variable to carry the on message of the room	
    165c:	1f ef       	ldi	r17, 0xFF	; 255

void Menu_Options(const char Selected_Room,const char Selected_mode)
{
	/*************** VARIABLES ********************/
	char Receive;									//variable to Exchange the data with slave
	char Status_Code=DUMMYDATA;						//variable to carry the status of the room
    165e:	df ef       	ldi	r29, 0xFF	; 255
			case ROOM3_MENU:
				Status_Code=ROOM3_STATUS;
				TURN_ON_CODE=ROOM3_TURN_ON;
				TURN_OFF_CODE=ROOM3_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("Room3 S:");
    1660:	0f 2e       	mov	r0, r31
    1662:	f9 e3       	ldi	r31, 0x39	; 57
    1664:	8f 2e       	mov	r8, r31
    1666:	f2 e0       	ldi	r31, 0x02	; 2
    1668:	9f 2e       	mov	r9, r31
    166a:	f0 2d       	mov	r31, r0
				LCD_Clear_Screen();
				LCD_vSend_String("Room2 S:");
			break;
		
			case ROOM3_MENU:
				Status_Code=ROOM3_STATUS;
    166c:	0f 2e       	mov	r0, r31
    166e:	f3 e1       	ldi	r31, 0x13	; 19
    1670:	5f 2e       	mov	r5, r31
    1672:	f0 2d       	mov	r31, r0
			case TV_MENU:
				Status_Code=TV_STATUS;
				TURN_ON_CODE=TV_TURN_ON;
				TURN_OFF_CODE=TV_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("TV S:");
    1674:	0f 2e       	mov	r0, r31
    1676:	fb e4       	ldi	r31, 0x4B	; 75
    1678:	6f 2e       	mov	r6, r31
    167a:	f2 e0       	ldi	r31, 0x02	; 2
    167c:	7f 2e       	mov	r7, r31
    167e:	f0 2d       	mov	r31, r0
				LCD_Clear_Screen();
				LCD_vSend_String("Room4 S:");
			break;
		
			case TV_MENU:
				Status_Code=TV_STATUS;
    1680:	0f 2e       	mov	r0, r31
    1682:	f5 e1       	ldi	r31, 0x15	; 21
    1684:	4f 2e       	mov	r4, r31
    1686:	f0 2d       	mov	r31, r0
				LCD_Clear_Screen();
				LCD_vSend_String("Room3 S:");
			break;
		
			case ROOM4_MENU:
				Status_Code=ROOM4_STATUS;
    1688:	0f 2e       	mov	r0, r31
    168a:	f4 e1       	ldi	r31, 0x14	; 20
    168c:	3f 2e       	mov	r3, r31
    168e:	f0 2d       	mov	r31, r0
			{
				LCD_vSend_String("ON");
			}
			else if(Receive == OFF_STATUS)
			{
				LCD_vSend_String("OFF");
    1690:	0f 2e       	mov	r0, r31
    1692:	f1 e6       	ldi	r31, 0x61	; 97
    1694:	af 2e       	mov	r10, r31
    1696:	f2 e0       	ldi	r31, 0x02	; 2
    1698:	bf 2e       	mov	r11, r31
    169a:	f0 2d       	mov	r31, r0
			}
			LCD_Move_Cursor(2,1);
			LCD_vSend_String("1-ON 2-OFF 3-Ret");			
    169c:	0f 2e       	mov	r0, r31
    169e:	f5 e6       	ldi	r31, 0x65	; 101
    16a0:	ef 2e       	mov	r14, r31
    16a2:	f2 e0       	ldi	r31, 0x02	; 2
    16a4:	ff 2e       	mov	r15, r31
    16a6:	f0 2d       	mov	r31, r0
				show_menu=MAIN_MENU;
			}
			else
			{
				LCD_Clear_Screen();
				LCD_vSend_String("Wrong Input!");
    16a8:	0f 2e       	mov	r0, r31
    16aa:	f6 e7       	ldi	r31, 0x76	; 118
    16ac:	cf 2e       	mov	r12, r31
    16ae:	f2 e0       	ldi	r31, 0x02	; 2
    16b0:	df 2e       	mov	r13, r31
    16b2:	f0 2d       	mov	r31, r0
	/**********************************************/
	Key_Pressed=NOTPRESSED;

	do 
	{	
		switch(Selected_Room)
    16b4:	c5 30       	cpi	r28, 0x05	; 5
    16b6:	19 f1       	breq	.+70     	; 0x16fe <Menu_Options+0xce>
    16b8:	c6 30       	cpi	r28, 0x06	; 6
    16ba:	30 f4       	brcc	.+12     	; 0x16c8 <Menu_Options+0x98>
    16bc:	c3 30       	cpi	r28, 0x03	; 3
    16be:	59 f0       	breq	.+22     	; 0x16d6 <Menu_Options+0xa6>
    16c0:	c4 30       	cpi	r28, 0x04	; 4
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <Menu_Options+0x96>
    16c4:	41 c0       	rjmp	.+130    	; 0x1748 <Menu_Options+0x118>
    16c6:	11 c0       	rjmp	.+34     	; 0x16ea <Menu_Options+0xba>
    16c8:	c7 30       	cpi	r28, 0x07	; 7
    16ca:	61 f1       	breq	.+88     	; 0x1724 <Menu_Options+0xf4>
    16cc:	c7 30       	cpi	r28, 0x07	; 7
    16ce:	00 f1       	brcs	.+64     	; 0x1710 <Menu_Options+0xe0>
    16d0:	c9 30       	cpi	r28, 0x09	; 9
    16d2:	d1 f5       	brne	.+116    	; 0x1748 <Menu_Options+0x118>
    16d4:	30 c0       	rjmp	.+96     	; 0x1736 <Menu_Options+0x106>
		{
			case ROOM1_MENU:
				Status_Code=ROOM1_STATUS;
				TURN_ON_CODE=ROOM1_TURN_ON;
				TURN_OFF_CODE=ROOM1_TURN_OFF;
				LCD_Clear_Screen();
    16d6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Room1 S:");
    16da:	87 e2       	ldi	r24, 0x27	; 39
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
		switch(Selected_Room)
		{
			case ROOM1_MENU:
				Status_Code=ROOM1_STATUS;
				TURN_ON_CODE=ROOM1_TURN_ON;
				TURN_OFF_CODE=ROOM1_TURN_OFF;
    16e2:	01 e3       	ldi	r16, 0x31	; 49
	{	
		switch(Selected_Room)
		{
			case ROOM1_MENU:
				Status_Code=ROOM1_STATUS;
				TURN_ON_CODE=ROOM1_TURN_ON;
    16e4:	11 e2       	ldi	r17, 0x21	; 33
	do 
	{	
		switch(Selected_Room)
		{
			case ROOM1_MENU:
				Status_Code=ROOM1_STATUS;
    16e6:	d1 e1       	ldi	r29, 0x11	; 17
				TURN_ON_CODE=ROOM1_TURN_ON;
				TURN_OFF_CODE=ROOM1_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("Room1 S:");
			break;	
    16e8:	2f c0       	rjmp	.+94     	; 0x1748 <Menu_Options+0x118>
		
			case ROOM2_MENU:
				Status_Code=ROOM2_STATUS;
				TURN_ON_CODE=ROOM2_TURN_ON;
				TURN_OFF_CODE=ROOM2_TURN_OFF;
				LCD_Clear_Screen();
    16ea:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Room2 S:");
    16ee:	80 e3       	ldi	r24, 0x30	; 48
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			break;	
		
			case ROOM2_MENU:
				Status_Code=ROOM2_STATUS;
				TURN_ON_CODE=ROOM2_TURN_ON;
				TURN_OFF_CODE=ROOM2_TURN_OFF;
    16f6:	02 e3       	ldi	r16, 0x32	; 50
				LCD_vSend_String("Room1 S:");
			break;	
		
			case ROOM2_MENU:
				Status_Code=ROOM2_STATUS;
				TURN_ON_CODE=ROOM2_TURN_ON;
    16f8:	12 e2       	ldi	r17, 0x22	; 34
				LCD_Clear_Screen();
				LCD_vSend_String("Room1 S:");
			break;	
		
			case ROOM2_MENU:
				Status_Code=ROOM2_STATUS;
    16fa:	d2 e1       	ldi	r29, 0x12	; 18
				TURN_ON_CODE=ROOM2_TURN_ON;
				TURN_OFF_CODE=ROOM2_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("Room2 S:");
			break;
    16fc:	25 c0       	rjmp	.+74     	; 0x1748 <Menu_Options+0x118>
		
			case ROOM3_MENU:
				Status_Code=ROOM3_STATUS;
				TURN_ON_CODE=ROOM3_TURN_ON;
				TURN_OFF_CODE=ROOM3_TURN_OFF;
				LCD_Clear_Screen();
    16fe:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Room3 S:");
    1702:	c4 01       	movw	r24, r8
    1704:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			break;
		
			case ROOM3_MENU:
				Status_Code=ROOM3_STATUS;
				TURN_ON_CODE=ROOM3_TURN_ON;
				TURN_OFF_CODE=ROOM3_TURN_OFF;
    1708:	03 e3       	ldi	r16, 0x33	; 51
				LCD_vSend_String("Room2 S:");
			break;
		
			case ROOM3_MENU:
				Status_Code=ROOM3_STATUS;
				TURN_ON_CODE=ROOM3_TURN_ON;
    170a:	13 e2       	ldi	r17, 0x23	; 35
				LCD_Clear_Screen();
				LCD_vSend_String("Room2 S:");
			break;
		
			case ROOM3_MENU:
				Status_Code=ROOM3_STATUS;
    170c:	d5 2d       	mov	r29, r5
				TURN_ON_CODE=ROOM3_TURN_ON;
				TURN_OFF_CODE=ROOM3_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("Room3 S:");
			break;
    170e:	1c c0       	rjmp	.+56     	; 0x1748 <Menu_Options+0x118>
		
			case ROOM4_MENU:
				Status_Code=ROOM4_STATUS;
				TURN_ON_CODE=ROOM4_TURN_ON;
				TURN_OFF_CODE=ROOM4_TURN_OFF;
				LCD_Clear_Screen();
    1710:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Room4 S:");
    1714:	82 e4       	ldi	r24, 0x42	; 66
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			break;
		
			case ROOM4_MENU:
				Status_Code=ROOM4_STATUS;
				TURN_ON_CODE=ROOM4_TURN_ON;
				TURN_OFF_CODE=ROOM4_TURN_OFF;
    171c:	04 e3       	ldi	r16, 0x34	; 52
				LCD_vSend_String("Room3 S:");
			break;
		
			case ROOM4_MENU:
				Status_Code=ROOM4_STATUS;
				TURN_ON_CODE=ROOM4_TURN_ON;
    171e:	14 e2       	ldi	r17, 0x24	; 36
				LCD_Clear_Screen();
				LCD_vSend_String("Room3 S:");
			break;
		
			case ROOM4_MENU:
				Status_Code=ROOM4_STATUS;
    1720:	d3 2d       	mov	r29, r3
				TURN_ON_CODE=ROOM4_TURN_ON;
				TURN_OFF_CODE=ROOM4_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("Room4 S:");
			break;
    1722:	12 c0       	rjmp	.+36     	; 0x1748 <Menu_Options+0x118>
		
			case TV_MENU:
				Status_Code=TV_STATUS;
				TURN_ON_CODE=TV_TURN_ON;
				TURN_OFF_CODE=TV_TURN_OFF;
				LCD_Clear_Screen();
    1724:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("TV S:");
    1728:	c3 01       	movw	r24, r6
    172a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			break;
		
			case TV_MENU:
				Status_Code=TV_STATUS;
				TURN_ON_CODE=TV_TURN_ON;
				TURN_OFF_CODE=TV_TURN_OFF;
    172e:	05 e3       	ldi	r16, 0x35	; 53
				LCD_vSend_String("Room4 S:");
			break;
		
			case TV_MENU:
				Status_Code=TV_STATUS;
				TURN_ON_CODE=TV_TURN_ON;
    1730:	15 e2       	ldi	r17, 0x25	; 37
				LCD_Clear_Screen();
				LCD_vSend_String("Room4 S:");
			break;
		
			case TV_MENU:
				Status_Code=TV_STATUS;
    1732:	d4 2d       	mov	r29, r4
				TURN_ON_CODE=TV_TURN_ON;
				TURN_OFF_CODE=TV_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("TV S:");
			break;
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <Menu_Options+0x118>
		
			case AIR_COND_CTRL_MENU:
				Status_Code=AIR_COND_STATUS;
				TURN_ON_CODE=AIR_COND_TURN_ON;
				TURN_OFF_CODE=AIR_COND_TURN_OFF;
				LCD_Clear_Screen();
    1736:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Air Cond. S:");
    173a:	81 e5       	ldi	r24, 0x51	; 81
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			break;
		
			case AIR_COND_CTRL_MENU:
				Status_Code=AIR_COND_STATUS;
				TURN_ON_CODE=AIR_COND_TURN_ON;
				TURN_OFF_CODE=AIR_COND_TURN_OFF;
    1742:	06 e3       	ldi	r16, 0x36	; 54
				LCD_vSend_String("TV S:");
			break;
		
			case AIR_COND_CTRL_MENU:
				Status_Code=AIR_COND_STATUS;
				TURN_ON_CODE=AIR_COND_TURN_ON;
    1744:	16 e2       	ldi	r17, 0x26	; 38
				LCD_Clear_Screen();
				LCD_vSend_String("TV S:");
			break;
		
			case AIR_COND_CTRL_MENU:
				Status_Code=AIR_COND_STATUS;
    1746:	d6 e1       	ldi	r29, 0x16	; 22
				TURN_OFF_CODE=AIR_COND_TURN_OFF;
				LCD_Clear_Screen();
				LCD_vSend_String("Air Cond. S:");
			break;
		}
			SPI_MasterTransmitchar(Status_Code);
    1748:	8d 2f       	mov	r24, r29
    174a:	0e 94 2e 0c 	call	0x185c	; 0x185c <SPI_MasterTransmitchar>
    174e:	8f e7       	ldi	r24, 0x7F	; 127
    1750:	99 ea       	ldi	r25, 0xA9	; 169
    1752:	a3 e0       	ldi	r26, 0x03	; 3
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	90 40       	sbci	r25, 0x00	; 0
    1758:	a0 40       	sbci	r26, 0x00	; 0
    175a:	e1 f7       	brne	.-8      	; 0x1754 <Menu_Options+0x124>
    175c:	00 c0       	rjmp	.+0      	; 0x175e <Menu_Options+0x12e>
    175e:	00 00       	nop
			_delay_ms(150);
			Receive=SPI_MasterTransmitchar(DUMMYDATA);
    1760:	8f ef       	ldi	r24, 0xFF	; 255
    1762:	0e 94 2e 0c 	call	0x185c	; 0x185c <SPI_MasterTransmitchar>
			
			if(Receive == ON_STATUS)
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	29 f4       	brne	.+10     	; 0x1774 <Menu_Options+0x144>
			{
				LCD_vSend_String("ON");
    176a:	8e e5       	ldi	r24, 0x5E	; 94
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    1772:	05 c0       	rjmp	.+10     	; 0x177e <Menu_Options+0x14e>
			}
			else if(Receive == OFF_STATUS)
    1774:	88 23       	and	r24, r24
    1776:	19 f4       	brne	.+6      	; 0x177e <Menu_Options+0x14e>
			{
				LCD_vSend_String("OFF");
    1778:	c5 01       	movw	r24, r10
    177a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			}
			LCD_Move_Cursor(2,1);
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Move_Cursor>
			LCD_vSend_String("1-ON 2-OFF 3-Ret");			
    1786:	c7 01       	movw	r24, r14
    1788:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
			
			do 
			{
				Key_Pressed=UART_u8ReceiveData();
    178c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <UART_u8ReceiveData>
    1790:	80 93 26 02 	sts	0x0226, r24
			} while (Key_Pressed==NOTPRESSED);
    1794:	8f 3f       	cpi	r24, 0xFF	; 255
    1796:	d1 f3       	breq	.-12     	; 0x178c <Menu_Options+0x15c>
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	91 ee       	ldi	r25, 0xE1	; 225
    179c:	a4 e0       	ldi	r26, 0x04	; 4
    179e:	81 50       	subi	r24, 0x01	; 1
    17a0:	90 40       	sbci	r25, 0x00	; 0
    17a2:	a0 40       	sbci	r26, 0x00	; 0
    17a4:	e1 f7       	brne	.-8      	; 0x179e <Menu_Options+0x16e>
    17a6:	00 c0       	rjmp	.+0      	; 0x17a8 <Menu_Options+0x178>
    17a8:	00 00       	nop
			_delay_ms(200);
			if (Key_Pressed == '1')
    17aa:	80 91 26 02 	lds	r24, 0x0226
    17ae:	81 33       	cpi	r24, 0x31	; 49
    17b0:	21 f4       	brne	.+8      	; 0x17ba <Menu_Options+0x18a>
			{
				SPI_MasterTransmitchar(TURN_ON_CODE);
    17b2:	81 2f       	mov	r24, r17
    17b4:	0e 94 2e 0c 	call	0x185c	; 0x185c <SPI_MasterTransmitchar>
    17b8:	1a c0       	rjmp	.+52     	; 0x17ee <Menu_Options+0x1be>
			}
			else if (Key_Pressed == '2')
    17ba:	82 33       	cpi	r24, 0x32	; 50
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <Menu_Options+0x196>
			{
				SPI_MasterTransmitchar(TURN_OFF_CODE);
    17be:	80 2f       	mov	r24, r16
    17c0:	0e 94 2e 0c 	call	0x185c	; 0x185c <SPI_MasterTransmitchar>
    17c4:	14 c0       	rjmp	.+40     	; 0x17ee <Menu_Options+0x1be>
			}
			else if (Key_Pressed == '3')
    17c6:	83 33       	cpi	r24, 0x33	; 51
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <Menu_Options+0x1a2>
			{
				show_menu=MAIN_MENU;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	80 93 25 02 	sts	0x0225, r24
    17d0:	0e c0       	rjmp	.+28     	; 0x17ee <Menu_Options+0x1be>
			}
			else
			{
				LCD_Clear_Screen();
    17d2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Clear_Screen>
				LCD_vSend_String("Wrong Input!");
    17d6:	c6 01       	movw	r24, r12
    17d8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_vSend_String>
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	94 e3       	ldi	r25, 0x34	; 52
    17e0:	ac e0       	ldi	r26, 0x0C	; 12
    17e2:	81 50       	subi	r24, 0x01	; 1
    17e4:	90 40       	sbci	r25, 0x00	; 0
    17e6:	a0 40       	sbci	r26, 0x00	; 0
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <Menu_Options+0x1b2>
    17ea:	00 c0       	rjmp	.+0      	; 0x17ec <Menu_Options+0x1bc>
    17ec:	00 00       	nop
				_delay_ms(500);
			}
			
	} while((Key_Pressed<'1') || (Key_Pressed>'3'));
    17ee:	80 91 26 02 	lds	r24, 0x0226
    17f2:	81 53       	subi	r24, 0x31	; 49
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <Menu_Options+0x1ca>
    17f8:	5d cf       	rjmp	.-326    	; 0x16b4 <Menu_Options+0x84>
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	bf 90       	pop	r11
    180c:	af 90       	pop	r10
    180e:	9f 90       	pop	r9
    1810:	8f 90       	pop	r8
    1812:	7f 90       	pop	r7
    1814:	6f 90       	pop	r6
    1816:	5f 90       	pop	r5
    1818:	4f 90       	pop	r4
    181a:	3f 90       	pop	r3
    181c:	08 95       	ret

0000181e <SPI_MasterInit>:
#include "SPI_driver.h"


void SPI_MasterInit(void)
{
	DIO_set_PINDir('B',4,1);		//set direction SS pin o/p
    181e:	82 e4       	ldi	r24, 0x42	; 66
    1820:	64 e0       	ldi	r22, 0x04	; 4
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	DIO_set_PINDir('B',5,1);		//set direction MOSI pin o/p
    1828:	82 e4       	ldi	r24, 0x42	; 66
    182a:	65 e0       	ldi	r22, 0x05	; 5
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	DIO_set_PINDir('B',7,1);		//set direction SCK pin o/p
    1832:	82 e4       	ldi	r24, 0x42	; 66
    1834:	67 e0       	ldi	r22, 0x07	; 7
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
	
	SET_BIT(SPCR,MSTR);				//set direction master bit 
    183c:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPR0);				//set clk: F_CPU/16 fel master bs
    183e:	68 9a       	sbi	0x0d, 0	; 13
	SET_BIT(SPCR,SPE);				//enable SPI hardware for master
    1840:	6e 9a       	sbi	0x0d, 6	; 13
	
	DIO_Write('B',4,1);				//write 1 to SS pin to disable transmission 			
    1842:	82 e4       	ldi	r24, 0x42	; 66
    1844:	64 e0       	ldi	r22, 0x04	; 4
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
}
    184c:	08 95       	ret

0000184e <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	SET_BIT(SPCR,SPE);				//enable spi hardware for slave
    184e:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_set_PINDir('B',6,1);		//set direction MISO pin o/p
    1850:	82 e4       	ldi	r24, 0x42	; 66
    1852:	66 e0       	ldi	r22, 0x06	; 6
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PINDir>
}
    185a:	08 95       	ret

0000185c <SPI_MasterTransmitchar>:

unsigned char SPI_MasterTransmitchar(unsigned char Data)
{
    185c:	cf 93       	push	r28
    185e:	c8 2f       	mov	r28, r24
	DIO_Write('B',4,0);				//write 0 to SS pin to start transmission
    1860:	82 e4       	ldi	r24, 0x42	; 66
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_Write>
	SPDR=Data;						//send data to slave
    186a:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);	//wait till interrupt flag be high "serial transmission complete"
    186c:	77 9b       	sbis	0x0e, 7	; 14
    186e:	fe cf       	rjmp	.-4      	; 0x186c <SPI_MasterTransmitchar+0x10>
	return SPDR;					//return the exchanged data come from slave
    1870:	8f b1       	in	r24, 0x0f	; 15
}
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <SPI_SlaveReceiverchar>:

unsigned char SPI_SlaveReceiverchar(unsigned char Data)
{
	SPDR=Data;						//send data to master
    1876:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);	//wait till interrupt flag be high "serial transmission complete"
    1878:	77 9b       	sbis	0x0e, 7	; 14
    187a:	fe cf       	rjmp	.-4      	; 0x1878 <SPI_SlaveReceiverchar+0x2>
	return SPDR;					//return the exchanged data come from slave
    187c:	8f b1       	in	r24, 0x0f	; 15
    187e:	08 95       	ret

00001880 <Timer_Stop_CTC>:
#include <avr/interrupt.h>	//to be able to use the interrupt

/***********timer0************/
void Timer_Stop_CTC(void)
{
	CLR_BIT(TCCR0,CS00);			//let the prescaler=1024
    1880:	83 b7       	in	r24, 0x33	; 51
    1882:	8e 7f       	andi	r24, 0xFE	; 254
    1884:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    1886:	83 b7       	in	r24, 0x33	; 51
    1888:	8d 7f       	andi	r24, 0xFD	; 253
    188a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);	
    188c:	83 b7       	in	r24, 0x33	; 51
    188e:	8b 7f       	andi	r24, 0xFB	; 251
    1890:	83 bf       	out	0x33, r24	; 51
}
    1892:	08 95       	ret

00001894 <Timer_CTC_Init_interrupt>:
void Timer_CTC_Init_interrupt(void)
{
	OCR0=78;						//load 78 in OCR0 78*0.000128-> byro7 lel ISR kol 10msec
    1894:	8e e4       	ldi	r24, 0x4E	; 78
    1896:	8c bf       	out	0x3c, r24	; 60
		
	SET_BIT(TCCR0,WGM01);			//enable CTC mode WGM01=1,WGM00=0
    1898:	83 b7       	in	r24, 0x33	; 51
    189a:	88 60       	ori	r24, 0x08	; 8
    189c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00);
    189e:	83 b7       	in	r24, 0x33	; 51
    18a0:	8f 7b       	andi	r24, 0xBF	; 191
    18a2:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,CS00);			//let the prescaler=1024
    18a4:	83 b7       	in	r24, 0x33	; 51
    18a6:	81 60       	ori	r24, 0x01	; 1
    18a8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); 
    18aa:	83 b7       	in	r24, 0x33	; 51
    18ac:	84 60       	ori	r24, 0x04	; 4
    18ae:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    18b0:	83 b7       	in	r24, 0x33	; 51
    18b2:	8d 7f       	andi	r24, 0xFD	; 253
    18b4:	83 bf       	out	0x33, r24	; 51
	
	sei();							//enable I-bet
    18b6:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);			//enable ctc inttterupt bit 
    18b8:	89 b7       	in	r24, 0x39	; 57
    18ba:	82 60       	ori	r24, 0x02	; 2
    18bc:	89 bf       	out	0x39, r24	; 57
}
    18be:	08 95       	ret

000018c0 <Timer2_OverFlow_Init_interrupt>:
/*****************************/

/************timer2************/
void Timer2_OverFlow_Init_interrupt(void)
{
	SET_BIT(ASSR,AS2);				//3SHAN YA5OD EL CLOCK MN EXTERNAL CRYSTAL 
    18c0:	82 b5       	in	r24, 0x22	; 34
    18c2:	88 60       	ori	r24, 0x08	; 8
    18c4:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS22);			//SELECT PRESCALER 128 3shan yro7 el ISR kol sanya bzbt
    18c6:	85 b5       	in	r24, 0x25	; 37
    18c8:	84 60       	ori	r24, 0x04	; 4
    18ca:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
    18cc:	85 b5       	in	r24, 0x25	; 37
    18ce:	81 60       	ori	r24, 0x01	; 1
    18d0:	85 bd       	out	0x25, r24	; 37
	
	sei();
    18d2:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);			//enable interrupt
    18d4:	89 b7       	in	r24, 0x39	; 57
    18d6:	80 64       	ori	r24, 0x40	; 64
    18d8:	89 bf       	out	0x39, r24	; 57
}
    18da:	08 95       	ret

000018dc <Timer2_Stop_OverFlow>:
void Timer2_Stop_OverFlow(void)
{
	CLR_BIT(TCCR2,CS22);
    18dc:	85 b5       	in	r24, 0x25	; 37
    18de:	8b 7f       	andi	r24, 0xFB	; 251
    18e0:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS20);
    18e2:	85 b5       	in	r24, 0x25	; 37
    18e4:	8e 7f       	andi	r24, 0xFE	; 254
    18e6:	85 bd       	out	0x25, r24	; 37
}
    18e8:	08 95       	ret

000018ea <Timer1_wave_fastPWM_servo_postive>:

/**************timer1********/
void Timer1_wave_fastPWM_servo_postive(double value)
{
	
	SET_BIT(DDRD,5);				//set pin OC1A o/p
    18ea:	8d 9a       	sbi	0x11, 5	; 17
	
	SET_BIT(TCCR1B,WGM13);			//SET FAST PWM SIGNAL WITH TOP ICR1A
    18ec:	2e b5       	in	r18, 0x2e	; 46
    18ee:	20 61       	ori	r18, 0x10	; 16
    18f0:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM12);
    18f2:	2e b5       	in	r18, 0x2e	; 46
    18f4:	28 60       	ori	r18, 0x08	; 8
    18f6:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1A,WGM11);
    18f8:	2f b5       	in	r18, 0x2f	; 47
    18fa:	22 60       	ori	r18, 0x02	; 2
    18fc:	2f bd       	out	0x2f, r18	; 47
	
	OCR1A=(((value*0.00555555555)+1.5)*1000);				//on time
    18fe:	21 e6       	ldi	r18, 0x61	; 97
    1900:	3b e0       	ldi	r19, 0x0B	; 11
    1902:	46 eb       	ldi	r20, 0xB6	; 182
    1904:	5b e3       	ldi	r21, 0x3B	; 59
    1906:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__mulsf3>
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 ec       	ldi	r20, 0xC0	; 192
    1910:	5f e3       	ldi	r21, 0x3F	; 63
    1912:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__addsf3>
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a e7       	ldi	r20, 0x7A	; 122
    191c:	54 e4       	ldi	r21, 0x44	; 68
    191e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__mulsf3>
    1922:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9b bd       	out	0x2b, r25	; 43
    192c:	8a bd       	out	0x2a, r24	; 42
	ICR1=(19999);						//top of fast pw, 3shan b3d 20000 3ada ybd2 y3ed mn el awl(periodic)
    192e:	8f e1       	ldi	r24, 0x1F	; 31
    1930:	9e e4       	ldi	r25, 0x4E	; 78
    1932:	97 bd       	out	0x27, r25	; 39
    1934:	86 bd       	out	0x26, r24	; 38
	//20msec
	
	
	
	SET_BIT(TCCR1B,CS11);		//set   prescaler=8
    1936:	8e b5       	in	r24, 0x2e	; 46
    1938:	82 60       	ori	r24, 0x02	; 2
    193a:	8e bd       	out	0x2e, r24	; 46

	
	SET_BIT(TCCR1A,COM1A1);			//(non inverting mode) clear OCR1A on compare match and set at bottom
    193c:	8f b5       	in	r24, 0x2f	; 47
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	8f bd       	out	0x2f, r24	; 47
	
}
    1942:	08 95       	ret

00001944 <UART_vInit>:
 *  Author: 20100
 */ 
#include "UART_driver.h"

void UART_vInit(unsigned long Baud)
{
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
	unsigned short UBRR;
	UBRR=(F_CPU/(16*Baud))-1;				//equation of asynchronous normal mode 
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	aa 1f       	adc	r26, r26
    194e:	bb 1f       	adc	r27, r27
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	aa 1f       	adc	r26, r26
    1956:	bb 1f       	adc	r27, r27
    1958:	9c 01       	movw	r18, r24
    195a:	ad 01       	movw	r20, r26
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	44 1f       	adc	r20, r20
    1962:	55 1f       	adc	r21, r21
    1964:	22 0f       	add	r18, r18
    1966:	33 1f       	adc	r19, r19
    1968:	44 1f       	adc	r20, r20
    196a:	55 1f       	adc	r21, r21
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	72 e1       	ldi	r23, 0x12	; 18
    1970:	8a e7       	ldi	r24, 0x7A	; 122
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__udivmodsi4>
    1978:	21 50       	subi	r18, 0x01	; 1
    197a:	30 40       	sbci	r19, 0x00	; 0
	
	UBRRH=(unsigned char)(UBRR>>8);		//high byte of ubrr value
    197c:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)(UBRR);		//low byte of ubrr value
    197e:	29 b9       	out	0x09, r18	; 9
	
	SET_BIT(UCSRB,TXEN);				//enable transmiter
    1980:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);				//enable receiver
    1982:	54 9a       	sbi	0x0a, 4	; 10
	
	UCSRC=0x86;										//set URSEL=1 to access UCSRC,set UCSZ1 and UCSZ0  useful data 8-bit
    1984:	86 e8       	ldi	r24, 0x86	; 134
    1986:	80 bd       	out	0x20, r24	; 32
	//UCSRC|=(1<<8)|(1<<2)|(1<<1);
}
    1988:	08 95       	ret

0000198a <UART_vSendData>:


void UART_vSendData(char data)
{
	while(READ_BIT(UCSRA,UDRE)==0);			//wait tol ma howa msh empty
    198a:	5d 9b       	sbis	0x0b, 5	; 11
    198c:	fe cf       	rjmp	.-4      	; 0x198a <UART_vSendData>
	UDR=data;								//put the data in transmitter buffer
    198e:	8c b9       	out	0x0c, r24	; 12
}
    1990:	08 95       	ret

00001992 <UART_u8ReceiveData>:


int UART_u8ReceiveData(void)
{
	while(READ_BIT(UCSRA,RXC)==0);			//wait until receiving complete
    1992:	5f 9b       	sbis	0x0b, 7	; 11
    1994:	fe cf       	rjmp	.-4      	; 0x1992 <UART_u8ReceiveData>
	return UDR;
    1996:	8c b1       	in	r24, 0x0c	; 12
}
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	08 95       	ret

0000199c <UART_vSendString>:

void UART_vSendString(char *ptr)
{
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
	while(*ptr!=0)							//tol ma howa msh be null yb3t 7rf 7rf bltarteb
    19a2:	88 81       	ld	r24, Y
    19a4:	88 23       	and	r24, r24
    19a6:	79 f0       	breq	.+30     	; 0x19c6 <UART_vSendString+0x2a>
{
	while(READ_BIT(UCSRA,RXC)==0);			//wait until receiving complete
	return UDR;
}

void UART_vSendString(char *ptr)
    19a8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!=0)							//tol ma howa msh be null yb3t 7rf 7rf bltarteb
	{
		UART_vSendData(*ptr);
    19aa:	0e 94 c5 0c 	call	0x198a	; 0x198a <UART_vSendData>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	90 e7       	ldi	r25, 0x70	; 112
    19b2:	a2 e0       	ldi	r26, 0x02	; 2
    19b4:	81 50       	subi	r24, 0x01	; 1
    19b6:	90 40       	sbci	r25, 0x00	; 0
    19b8:	a0 40       	sbci	r26, 0x00	; 0
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <UART_vSendString+0x18>
    19bc:	00 c0       	rjmp	.+0      	; 0x19be <UART_vSendString+0x22>
    19be:	00 00       	nop
	return UDR;
}

void UART_vSendString(char *ptr)
{
	while(*ptr!=0)							//tol ma howa msh be null yb3t 7rf 7rf bltarteb
    19c0:	89 91       	ld	r24, Y+
    19c2:	88 23       	and	r24, r24
    19c4:	91 f7       	brne	.-28     	; 0x19aa <UART_vSendString+0xe>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	08 95       	ret

000019cc <__subsf3>:
    19cc:	50 58       	subi	r21, 0x80	; 128

000019ce <__addsf3>:
    19ce:	bb 27       	eor	r27, r27
    19d0:	aa 27       	eor	r26, r26
    19d2:	0e d0       	rcall	.+28     	; 0x19f0 <__addsf3x>
    19d4:	a3 c0       	rjmp	.+326    	; 0x1b1c <__fp_round>
    19d6:	94 d0       	rcall	.+296    	; 0x1b00 <__fp_pscA>
    19d8:	30 f0       	brcs	.+12     	; 0x19e6 <__addsf3+0x18>
    19da:	99 d0       	rcall	.+306    	; 0x1b0e <__fp_pscB>
    19dc:	20 f0       	brcs	.+8      	; 0x19e6 <__addsf3+0x18>
    19de:	31 f4       	brne	.+12     	; 0x19ec <__addsf3+0x1e>
    19e0:	9f 3f       	cpi	r25, 0xFF	; 255
    19e2:	11 f4       	brne	.+4      	; 0x19e8 <__addsf3+0x1a>
    19e4:	1e f4       	brtc	.+6      	; 0x19ec <__addsf3+0x1e>
    19e6:	89 c0       	rjmp	.+274    	; 0x1afa <__fp_nan>
    19e8:	0e f4       	brtc	.+2      	; 0x19ec <__addsf3+0x1e>
    19ea:	e0 95       	com	r30
    19ec:	e7 fb       	bst	r30, 7
    19ee:	7f c0       	rjmp	.+254    	; 0x1aee <__fp_inf>

000019f0 <__addsf3x>:
    19f0:	e9 2f       	mov	r30, r25
    19f2:	a5 d0       	rcall	.+330    	; 0x1b3e <__fp_split3>
    19f4:	80 f3       	brcs	.-32     	; 0x19d6 <__addsf3+0x8>
    19f6:	ba 17       	cp	r27, r26
    19f8:	62 07       	cpc	r22, r18
    19fa:	73 07       	cpc	r23, r19
    19fc:	84 07       	cpc	r24, r20
    19fe:	95 07       	cpc	r25, r21
    1a00:	18 f0       	brcs	.+6      	; 0x1a08 <__addsf3x+0x18>
    1a02:	71 f4       	brne	.+28     	; 0x1a20 <__addsf3x+0x30>
    1a04:	9e f5       	brtc	.+102    	; 0x1a6c <__addsf3x+0x7c>
    1a06:	bd c0       	rjmp	.+378    	; 0x1b82 <__fp_zero>
    1a08:	0e f4       	brtc	.+2      	; 0x1a0c <__addsf3x+0x1c>
    1a0a:	e0 95       	com	r30
    1a0c:	0b 2e       	mov	r0, r27
    1a0e:	ba 2f       	mov	r27, r26
    1a10:	a0 2d       	mov	r26, r0
    1a12:	0b 01       	movw	r0, r22
    1a14:	b9 01       	movw	r22, r18
    1a16:	90 01       	movw	r18, r0
    1a18:	0c 01       	movw	r0, r24
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	a0 01       	movw	r20, r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	ff 27       	eor	r31, r31
    1a22:	59 1b       	sub	r21, r25
    1a24:	99 f0       	breq	.+38     	; 0x1a4c <__addsf3x+0x5c>
    1a26:	59 3f       	cpi	r21, 0xF9	; 249
    1a28:	50 f4       	brcc	.+20     	; 0x1a3e <__addsf3x+0x4e>
    1a2a:	50 3e       	cpi	r21, 0xE0	; 224
    1a2c:	68 f1       	brcs	.+90     	; 0x1a88 <__addsf3x+0x98>
    1a2e:	1a 16       	cp	r1, r26
    1a30:	f0 40       	sbci	r31, 0x00	; 0
    1a32:	a2 2f       	mov	r26, r18
    1a34:	23 2f       	mov	r18, r19
    1a36:	34 2f       	mov	r19, r20
    1a38:	44 27       	eor	r20, r20
    1a3a:	58 5f       	subi	r21, 0xF8	; 248
    1a3c:	f3 cf       	rjmp	.-26     	; 0x1a24 <__addsf3x+0x34>
    1a3e:	46 95       	lsr	r20
    1a40:	37 95       	ror	r19
    1a42:	27 95       	ror	r18
    1a44:	a7 95       	ror	r26
    1a46:	f0 40       	sbci	r31, 0x00	; 0
    1a48:	53 95       	inc	r21
    1a4a:	c9 f7       	brne	.-14     	; 0x1a3e <__addsf3x+0x4e>
    1a4c:	7e f4       	brtc	.+30     	; 0x1a6c <__addsf3x+0x7c>
    1a4e:	1f 16       	cp	r1, r31
    1a50:	ba 0b       	sbc	r27, r26
    1a52:	62 0b       	sbc	r22, r18
    1a54:	73 0b       	sbc	r23, r19
    1a56:	84 0b       	sbc	r24, r20
    1a58:	ba f0       	brmi	.+46     	; 0x1a88 <__addsf3x+0x98>
    1a5a:	91 50       	subi	r25, 0x01	; 1
    1a5c:	a1 f0       	breq	.+40     	; 0x1a86 <__addsf3x+0x96>
    1a5e:	ff 0f       	add	r31, r31
    1a60:	bb 1f       	adc	r27, r27
    1a62:	66 1f       	adc	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	88 1f       	adc	r24, r24
    1a68:	c2 f7       	brpl	.-16     	; 0x1a5a <__addsf3x+0x6a>
    1a6a:	0e c0       	rjmp	.+28     	; 0x1a88 <__addsf3x+0x98>
    1a6c:	ba 0f       	add	r27, r26
    1a6e:	62 1f       	adc	r22, r18
    1a70:	73 1f       	adc	r23, r19
    1a72:	84 1f       	adc	r24, r20
    1a74:	48 f4       	brcc	.+18     	; 0x1a88 <__addsf3x+0x98>
    1a76:	87 95       	ror	r24
    1a78:	77 95       	ror	r23
    1a7a:	67 95       	ror	r22
    1a7c:	b7 95       	ror	r27
    1a7e:	f7 95       	ror	r31
    1a80:	9e 3f       	cpi	r25, 0xFE	; 254
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <__addsf3x+0x96>
    1a84:	b3 cf       	rjmp	.-154    	; 0x19ec <__addsf3+0x1e>
    1a86:	93 95       	inc	r25
    1a88:	88 0f       	add	r24, r24
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <__addsf3x+0x9e>
    1a8c:	99 27       	eor	r25, r25
    1a8e:	ee 0f       	add	r30, r30
    1a90:	97 95       	ror	r25
    1a92:	87 95       	ror	r24
    1a94:	08 95       	ret

00001a96 <__fixunssfsi>:
    1a96:	5b d0       	rcall	.+182    	; 0x1b4e <__fp_splitA>
    1a98:	88 f0       	brcs	.+34     	; 0x1abc <__fixunssfsi+0x26>
    1a9a:	9f 57       	subi	r25, 0x7F	; 127
    1a9c:	90 f0       	brcs	.+36     	; 0x1ac2 <__fixunssfsi+0x2c>
    1a9e:	b9 2f       	mov	r27, r25
    1aa0:	99 27       	eor	r25, r25
    1aa2:	b7 51       	subi	r27, 0x17	; 23
    1aa4:	a0 f0       	brcs	.+40     	; 0x1ace <__fixunssfsi+0x38>
    1aa6:	d1 f0       	breq	.+52     	; 0x1adc <__fixunssfsi+0x46>
    1aa8:	66 0f       	add	r22, r22
    1aaa:	77 1f       	adc	r23, r23
    1aac:	88 1f       	adc	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	1a f0       	brmi	.+6      	; 0x1ab8 <__fixunssfsi+0x22>
    1ab2:	ba 95       	dec	r27
    1ab4:	c9 f7       	brne	.-14     	; 0x1aa8 <__fixunssfsi+0x12>
    1ab6:	12 c0       	rjmp	.+36     	; 0x1adc <__fixunssfsi+0x46>
    1ab8:	b1 30       	cpi	r27, 0x01	; 1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <__fixunssfsi+0x46>
    1abc:	62 d0       	rcall	.+196    	; 0x1b82 <__fp_zero>
    1abe:	b1 e0       	ldi	r27, 0x01	; 1
    1ac0:	08 95       	ret
    1ac2:	5f c0       	rjmp	.+190    	; 0x1b82 <__fp_zero>
    1ac4:	67 2f       	mov	r22, r23
    1ac6:	78 2f       	mov	r23, r24
    1ac8:	88 27       	eor	r24, r24
    1aca:	b8 5f       	subi	r27, 0xF8	; 248
    1acc:	39 f0       	breq	.+14     	; 0x1adc <__fixunssfsi+0x46>
    1ace:	b9 3f       	cpi	r27, 0xF9	; 249
    1ad0:	cc f3       	brlt	.-14     	; 0x1ac4 <__fixunssfsi+0x2e>
    1ad2:	86 95       	lsr	r24
    1ad4:	77 95       	ror	r23
    1ad6:	67 95       	ror	r22
    1ad8:	b3 95       	inc	r27
    1ada:	d9 f7       	brne	.-10     	; 0x1ad2 <__fixunssfsi+0x3c>
    1adc:	3e f4       	brtc	.+14     	; 0x1aec <__fixunssfsi+0x56>
    1ade:	90 95       	com	r25
    1ae0:	80 95       	com	r24
    1ae2:	70 95       	com	r23
    1ae4:	61 95       	neg	r22
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	08 95       	ret

00001aee <__fp_inf>:
    1aee:	97 f9       	bld	r25, 7
    1af0:	9f 67       	ori	r25, 0x7F	; 127
    1af2:	80 e8       	ldi	r24, 0x80	; 128
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	08 95       	ret

00001afa <__fp_nan>:
    1afa:	9f ef       	ldi	r25, 0xFF	; 255
    1afc:	80 ec       	ldi	r24, 0xC0	; 192
    1afe:	08 95       	ret

00001b00 <__fp_pscA>:
    1b00:	00 24       	eor	r0, r0
    1b02:	0a 94       	dec	r0
    1b04:	16 16       	cp	r1, r22
    1b06:	17 06       	cpc	r1, r23
    1b08:	18 06       	cpc	r1, r24
    1b0a:	09 06       	cpc	r0, r25
    1b0c:	08 95       	ret

00001b0e <__fp_pscB>:
    1b0e:	00 24       	eor	r0, r0
    1b10:	0a 94       	dec	r0
    1b12:	12 16       	cp	r1, r18
    1b14:	13 06       	cpc	r1, r19
    1b16:	14 06       	cpc	r1, r20
    1b18:	05 06       	cpc	r0, r21
    1b1a:	08 95       	ret

00001b1c <__fp_round>:
    1b1c:	09 2e       	mov	r0, r25
    1b1e:	03 94       	inc	r0
    1b20:	00 0c       	add	r0, r0
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <__fp_round+0xc>
    1b24:	88 23       	and	r24, r24
    1b26:	52 f0       	brmi	.+20     	; 0x1b3c <__fp_round+0x20>
    1b28:	bb 0f       	add	r27, r27
    1b2a:	40 f4       	brcc	.+16     	; 0x1b3c <__fp_round+0x20>
    1b2c:	bf 2b       	or	r27, r31
    1b2e:	11 f4       	brne	.+4      	; 0x1b34 <__fp_round+0x18>
    1b30:	60 ff       	sbrs	r22, 0
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <__fp_round+0x20>
    1b34:	6f 5f       	subi	r22, 0xFF	; 255
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	08 95       	ret

00001b3e <__fp_split3>:
    1b3e:	57 fd       	sbrc	r21, 7
    1b40:	90 58       	subi	r25, 0x80	; 128
    1b42:	44 0f       	add	r20, r20
    1b44:	55 1f       	adc	r21, r21
    1b46:	59 f0       	breq	.+22     	; 0x1b5e <__fp_splitA+0x10>
    1b48:	5f 3f       	cpi	r21, 0xFF	; 255
    1b4a:	71 f0       	breq	.+28     	; 0x1b68 <__fp_splitA+0x1a>
    1b4c:	47 95       	ror	r20

00001b4e <__fp_splitA>:
    1b4e:	88 0f       	add	r24, r24
    1b50:	97 fb       	bst	r25, 7
    1b52:	99 1f       	adc	r25, r25
    1b54:	61 f0       	breq	.+24     	; 0x1b6e <__fp_splitA+0x20>
    1b56:	9f 3f       	cpi	r25, 0xFF	; 255
    1b58:	79 f0       	breq	.+30     	; 0x1b78 <__fp_splitA+0x2a>
    1b5a:	87 95       	ror	r24
    1b5c:	08 95       	ret
    1b5e:	12 16       	cp	r1, r18
    1b60:	13 06       	cpc	r1, r19
    1b62:	14 06       	cpc	r1, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	f2 cf       	rjmp	.-28     	; 0x1b4c <__fp_split3+0xe>
    1b68:	46 95       	lsr	r20
    1b6a:	f1 df       	rcall	.-30     	; 0x1b4e <__fp_splitA>
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <__fp_splitA+0x30>
    1b6e:	16 16       	cp	r1, r22
    1b70:	17 06       	cpc	r1, r23
    1b72:	18 06       	cpc	r1, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	f1 cf       	rjmp	.-30     	; 0x1b5a <__fp_splitA+0xc>
    1b78:	86 95       	lsr	r24
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	61 05       	cpc	r22, r1
    1b7e:	08 94       	sec
    1b80:	08 95       	ret

00001b82 <__fp_zero>:
    1b82:	e8 94       	clt

00001b84 <__fp_szero>:
    1b84:	bb 27       	eor	r27, r27
    1b86:	66 27       	eor	r22, r22
    1b88:	77 27       	eor	r23, r23
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	97 f9       	bld	r25, 7
    1b8e:	08 95       	ret

00001b90 <__mulsf3>:
    1b90:	0b d0       	rcall	.+22     	; 0x1ba8 <__mulsf3x>
    1b92:	c4 cf       	rjmp	.-120    	; 0x1b1c <__fp_round>
    1b94:	b5 df       	rcall	.-150    	; 0x1b00 <__fp_pscA>
    1b96:	28 f0       	brcs	.+10     	; 0x1ba2 <__mulsf3+0x12>
    1b98:	ba df       	rcall	.-140    	; 0x1b0e <__fp_pscB>
    1b9a:	18 f0       	brcs	.+6      	; 0x1ba2 <__mulsf3+0x12>
    1b9c:	95 23       	and	r25, r21
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <__mulsf3+0x12>
    1ba0:	a6 cf       	rjmp	.-180    	; 0x1aee <__fp_inf>
    1ba2:	ab cf       	rjmp	.-170    	; 0x1afa <__fp_nan>
    1ba4:	11 24       	eor	r1, r1
    1ba6:	ee cf       	rjmp	.-36     	; 0x1b84 <__fp_szero>

00001ba8 <__mulsf3x>:
    1ba8:	ca df       	rcall	.-108    	; 0x1b3e <__fp_split3>
    1baa:	a0 f3       	brcs	.-24     	; 0x1b94 <__mulsf3+0x4>

00001bac <__mulsf3_pse>:
    1bac:	95 9f       	mul	r25, r21
    1bae:	d1 f3       	breq	.-12     	; 0x1ba4 <__mulsf3+0x14>
    1bb0:	95 0f       	add	r25, r21
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	62 9f       	mul	r22, r18
    1bb8:	f0 01       	movw	r30, r0
    1bba:	72 9f       	mul	r23, r18
    1bbc:	bb 27       	eor	r27, r27
    1bbe:	f0 0d       	add	r31, r0
    1bc0:	b1 1d       	adc	r27, r1
    1bc2:	63 9f       	mul	r22, r19
    1bc4:	aa 27       	eor	r26, r26
    1bc6:	f0 0d       	add	r31, r0
    1bc8:	b1 1d       	adc	r27, r1
    1bca:	aa 1f       	adc	r26, r26
    1bcc:	64 9f       	mul	r22, r20
    1bce:	66 27       	eor	r22, r22
    1bd0:	b0 0d       	add	r27, r0
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	66 1f       	adc	r22, r22
    1bd6:	82 9f       	mul	r24, r18
    1bd8:	22 27       	eor	r18, r18
    1bda:	b0 0d       	add	r27, r0
    1bdc:	a1 1d       	adc	r26, r1
    1bde:	62 1f       	adc	r22, r18
    1be0:	73 9f       	mul	r23, r19
    1be2:	b0 0d       	add	r27, r0
    1be4:	a1 1d       	adc	r26, r1
    1be6:	62 1f       	adc	r22, r18
    1be8:	83 9f       	mul	r24, r19
    1bea:	a0 0d       	add	r26, r0
    1bec:	61 1d       	adc	r22, r1
    1bee:	22 1f       	adc	r18, r18
    1bf0:	74 9f       	mul	r23, r20
    1bf2:	33 27       	eor	r19, r19
    1bf4:	a0 0d       	add	r26, r0
    1bf6:	61 1d       	adc	r22, r1
    1bf8:	23 1f       	adc	r18, r19
    1bfa:	84 9f       	mul	r24, r20
    1bfc:	60 0d       	add	r22, r0
    1bfe:	21 1d       	adc	r18, r1
    1c00:	82 2f       	mov	r24, r18
    1c02:	76 2f       	mov	r23, r22
    1c04:	6a 2f       	mov	r22, r26
    1c06:	11 24       	eor	r1, r1
    1c08:	9f 57       	subi	r25, 0x7F	; 127
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	8a f0       	brmi	.+34     	; 0x1c30 <__mulsf3_pse+0x84>
    1c0e:	e1 f0       	breq	.+56     	; 0x1c48 <__mulsf3_pse+0x9c>
    1c10:	88 23       	and	r24, r24
    1c12:	4a f0       	brmi	.+18     	; 0x1c26 <__mulsf3_pse+0x7a>
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	91 50       	subi	r25, 0x01	; 1
    1c22:	50 40       	sbci	r21, 0x00	; 0
    1c24:	a9 f7       	brne	.-22     	; 0x1c10 <__mulsf3_pse+0x64>
    1c26:	9e 3f       	cpi	r25, 0xFE	; 254
    1c28:	51 05       	cpc	r21, r1
    1c2a:	70 f0       	brcs	.+28     	; 0x1c48 <__mulsf3_pse+0x9c>
    1c2c:	60 cf       	rjmp	.-320    	; 0x1aee <__fp_inf>
    1c2e:	aa cf       	rjmp	.-172    	; 0x1b84 <__fp_szero>
    1c30:	5f 3f       	cpi	r21, 0xFF	; 255
    1c32:	ec f3       	brlt	.-6      	; 0x1c2e <__mulsf3_pse+0x82>
    1c34:	98 3e       	cpi	r25, 0xE8	; 232
    1c36:	dc f3       	brlt	.-10     	; 0x1c2e <__mulsf3_pse+0x82>
    1c38:	86 95       	lsr	r24
    1c3a:	77 95       	ror	r23
    1c3c:	67 95       	ror	r22
    1c3e:	b7 95       	ror	r27
    1c40:	f7 95       	ror	r31
    1c42:	e7 95       	ror	r30
    1c44:	9f 5f       	subi	r25, 0xFF	; 255
    1c46:	c1 f7       	brne	.-16     	; 0x1c38 <__mulsf3_pse+0x8c>
    1c48:	fe 2b       	or	r31, r30
    1c4a:	88 0f       	add	r24, r24
    1c4c:	91 1d       	adc	r25, r1
    1c4e:	96 95       	lsr	r25
    1c50:	87 95       	ror	r24
    1c52:	97 f9       	bld	r25, 7
    1c54:	08 95       	ret

00001c56 <__udivmodsi4>:
    1c56:	a1 e2       	ldi	r26, 0x21	; 33
    1c58:	1a 2e       	mov	r1, r26
    1c5a:	aa 1b       	sub	r26, r26
    1c5c:	bb 1b       	sub	r27, r27
    1c5e:	fd 01       	movw	r30, r26
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <__udivmodsi4_ep>

00001c62 <__udivmodsi4_loop>:
    1c62:	aa 1f       	adc	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	ee 1f       	adc	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	a2 17       	cp	r26, r18
    1c6c:	b3 07       	cpc	r27, r19
    1c6e:	e4 07       	cpc	r30, r20
    1c70:	f5 07       	cpc	r31, r21
    1c72:	20 f0       	brcs	.+8      	; 0x1c7c <__udivmodsi4_ep>
    1c74:	a2 1b       	sub	r26, r18
    1c76:	b3 0b       	sbc	r27, r19
    1c78:	e4 0b       	sbc	r30, r20
    1c7a:	f5 0b       	sbc	r31, r21

00001c7c <__udivmodsi4_ep>:
    1c7c:	66 1f       	adc	r22, r22
    1c7e:	77 1f       	adc	r23, r23
    1c80:	88 1f       	adc	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	1a 94       	dec	r1
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <__udivmodsi4_loop>
    1c88:	60 95       	com	r22
    1c8a:	70 95       	com	r23
    1c8c:	80 95       	com	r24
    1c8e:	90 95       	com	r25
    1c90:	9b 01       	movw	r18, r22
    1c92:	ac 01       	movw	r20, r24
    1c94:	bd 01       	movw	r22, r26
    1c96:	cf 01       	movw	r24, r30
    1c98:	08 95       	ret

00001c9a <_exit>:
    1c9a:	f8 94       	cli

00001c9c <__stop_program>:
    1c9c:	ff cf       	rjmp	.-2      	; 0x1c9c <__stop_program>
